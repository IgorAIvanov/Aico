

*** 
 Part: A2v10 Platform 
  A2v10 Platform The  Platform is a tool designed to develop
				application solutions related to the automation of accounting
				and enterprise management. 
 The  A2v10  Platform is a tool designed to develop
				application solutions related to the automation of accounting
				and enterprise management. The  Help System is designed for those 
				who develop, install, configure and maintain 
				application solutions built on this software platform. 
				Please note that this help system does NOT contain information for the end users/ 
 The  A2v10  Help System is designed for those 
				who develop, install, configure and maintain 
				application solutions built on this software platform. 
				Please note that this help system does NOT contain information for the end users/  A2v10  Help System includes:  Description of the platform architecture principles.  Object model description.  Properties/Methods/Events reference information.  Description of the rules for building a database structure.  Useful links  The Platform website  .  The Platform source code (GitHub)  .  A2v10.Data Library source code (NET6).  The source code of this help system is on GitHub  .  The Icon library source code  .  The Platform source code (NET6 version)  .  The Workflow Engine source code (NET6) on GitHub  .  NuGet packages  NuGet-package A2v10.Web.Runtime  .  NuGet-package A2v10.Data.Interfaces (NET6)  .  NuGet-package A2v10.Data.Providers (NET6)  .  NuGet-package A2v10.Data.Core (NET6)  .  NuGet-package A2v10.System.Xaml (NET6)  .  NuGet-package A2v10.Platform (NET6)  .  NuGet-package A2v10 Workflow Engine (NET6)  .  Installation packages  Browser testing installation package A2v10.Tests.Browser  .  Native Messaging Host installation package to work with external equipment (Google Chrome extension).  Business process editor (BPMN) installation package.  Samples  An example of a simple application (NET Framework)  .  An example of a simple application (NET6)  .  What's new  -
					This section describes the latest changes and add-ons in the  A2v10  platform software. 

*** 
 Part: What's new in the A2v10 Platform 
  What's new in the A2v10 Platform This section describes the latest changes and add-ons in the  platform software. 
 This section describes the latest changes and add-ons in the  A2v10  platform software. The current platform version number is displayed in the lower right corner of the browser window. 
 The current platform version number is displayed in the lower right corner of the browser window.  Release 38. January 2022 

*** 
 Part: Release 38 - versions 7810-7818 (January 2022) 
  Release 38 - versions 7810-7818 (January 2022)  All releases  |  « Previous release  |  Next release »  Xaml  A new Flame  icon has been added to the  Icon  listing. 

*** 
 Part: General information 
  General information 

*** 
 Part: The Platform 
  The Platform The  system is implemented using the  technology stack from . 
 The  A2v10  system is implemented using the  .NET Framework  technology stack from  Microsoft  . or the cloud  service is used as a DBMS. 
 Microsoft SQL-Server  or the cloud  Azure SQL Database (service)  service is used as a DBMS. The server part of the system is implemented as a web application based on the Microsoft ASP.NET.MVC platform.
		The system can be deployed in the  cloud service as a . 
 The server part of the system is implemented as a web application based on the Microsoft ASP.NET.MVC platform.
		The system can be deployed in the  Microsoft Azure  cloud service as a  Web App Service  . The open source JavaScript framework  is used to implement the front-end of the web application. 
		The front-end is implemented as an SPA application (Single Page Application). All modern browsers are supported (Edge, Chrome, FireFox, 
		Safari). The Internet Explorer browser is NOT supported. 
 The open source JavaScript framework  Vue.js  is used to implement the front-end of the web application. 
		The front-end is implemented as an SPA application (Single Page Application). All modern browsers are supported (Edge, Chrome, FireFox, 
		Safari). The Internet Explorer browser is NOT supported. The 
		reporting system is used to generate reports and printable forms. 
 The  Stimulsoft Reports.Web  reporting system is used to generate reports and printable forms. Please note! The  libraries are NOT included into the platform. 
		To work with the reports, you need to purchase a separate license. 
 Please note! The  Stimulsoft  libraries are NOT included into the platform. 
		To work with the reports, you need to purchase a separate license. 

*** 
 Part: Application programs 
  Application programs The  system provides the developer with a high-level object-oriented "designer" of application programs. 
 The  A2v10  system provides the developer with a high-level object-oriented "designer" of application programs. In fact, an application program is a simple directory with files. They are model descriptions, views, templates,
		reports, static files, etc. Please note that the application program is "dynamic" in the sense that after changes
		in the program files, the file compilation, project assembly, and deployment are not required. 
 In fact, an application program is a simple directory with files. They are model descriptions, views, templates,
		reports, static files, etc. Please note that the application program is "dynamic" in the sense that after changes
		in the program files, the file compilation, project assembly, and deployment are not required. Each endpoint directory represents an endpoint that is addressed via a unique URL address. 
 Each endpoint directory represents an endpoint that is addressed via a unique URL address. The endpoint is the point of interaction with the program. Usually, one endpoint is responsible for
		processing one item of the subject field. The endpoint is accessed in a relative way (indicated in the
		URL). The , file must be present in the directory,
		representing the endpoint, which describes possible actions with this endpoint. It can be assumed that
		the sign of the endpoint is the presence of the  file in the corresponding directory. 
 The endpoint is the point of interaction with the program. Usually, one endpoint is responsible for
		processing one item of the subject field. The endpoint is accessed in a relative way (indicated in the
		URL). The  model.json  , file must be present in the directory,
		representing the endpoint, which describes possible actions with this endpoint. It can be assumed that
		the sign of the endpoint is the presence of the model.json  file in the corresponding directory. The system supports the redirection of the URLs to various endpoints. The
		 redirect file is used
		for this, which must be located in the root directory of the program. 
 The system supports the redirection of the URLs to various endpoints. The  redirect.json  redirect file is used
		for this, which must be located in the root directory of the program. The application folder may contain additional . 
 The application folder may contain additional  special folders  . 

*** 
 Part: The model.json file 
  The model.json file Each application folder that describes an endpoint must contain a 
		 description file. This file describes all the possible actions 
		that are allowed on this endpoint. 
 Each application folder that describes an endpoint must contain a model.json  description file. This file describes all the possible actions 
		that are allowed on this endpoint.  { "source"  : ""  , "schema"  : ""  , "model"  : ""  , "actions"  :  {  }  , "dialogs"  :  {  }  , "popups"  :  {  }  , "commands"  :  {  }  , "reports"  :  {  }  , "files"  :  {  }  } All Object Properties are represented by the objects, in which the property name 
		defines the name of the action, and the content is the object describing this action. 
 All Object Properties are represented by the objects, in which the property name 
		defines the name of the action, and the content is the object describing this action.  Endpoint object properties 
[Table]
 Name  |  Type  |  Description 
 source  |  String  |  Data source. This is actually the name of the connection string (connectionString) from the application config file. If not specified, it is considered equal to the "Default" string. If the connection string is not found, an exception is thrown. 
 schema  |  String  |  The sql-scheme name for the data model. Can be overridden in specific actions. If not specified, thendbo. 
 model  |  String  |  Model name. Can be overridden in specific actions. 
 actions  |  actions  |  Object describing the possible actions with the given endpoint. 
 dialogs  |  dialogs  |  object describing the dialogs that can be invoked for the given endpoint. 
 popups  |  popups  |  object describing the pop-up windows that can be invoked for the given endpoint. 
 commands  |  commands  |  Object describing the commands that can be executed for the given endpoint. 
 reports  |  reports  |  Object describing the reports associated with the given endpoint. 
 files  |  files  |  Object describing the work with downloadable files. 
 Name  Type  Description  source  String  Data source. This is actually the name of the 
					connection string (connectionString) from the application config file. 
					If not specified, it is considered equal to 
					the "Default" string. If the connection string is not found, an exception is thrown.  schema  String  The sql-scheme name for the data model. Can be overridden in specific actions. If not specified, 
					then  dbo  .  model  String  Model name. Can be overridden in specific actions.  actions  actions  Object describing the possible actions with the given endpoint.  dialogs  dialogs  object describing the dialogs that can be invoked for the given endpoint.  popups  popups  object describing the pop-up windows that can be invoked for the given endpoint.  commands  commands  Object describing the commands that can be executed for the given endpoint.  reports  reports  Object describing the reports associated with the given endpoint.  files  files  Object describing the work with downloadable files. 

*** 
 Part: Actions 
  Actions  model.json The  object describes the actions that are possible at the current endpoint. Object
		property names are action names. Each property represents the object of the following structure: 
 The  actions  object describes the actions that are possible at the current endpoint. Object
		property names are action names. Each property represents the object of the following structure:  { "source"  : ""  , "schema"  : ""  , "model"  : ""  , "merge"  :  { "source"  : ""  , "schema"  : ""  , "model"  : ""  , "parameters"  :  {  }  } "index"  : true  | false  , "copy"  : true  | false  , "template"  : ""  , "view"  : ""  , "checkTypes"  : ""  , "indirect"  : true  | false  , "parameters"  :  {  } "export"  :  { "fileName"  : ""  , "template"  : ""  , "format"  : "xlsx"  | "dbf"  | "csv"  | "unknown"  , "encoding"  : "utf8"  | "1251"  | "866"  }  }  Properties of the action object 
[Table]
 Name  |  Type  |  Description 
 source  |  string  |  Optional. Data source. If not specified, taken from the parent item. 
 schema  |  string  |  Optional. The name of the SQL schema. If not specified, taken from the parent item. 
 model  |  string  |  Name of the model. If not specified, taken from the parent item. 
 merge  |  object  |  Optional. An additional model that will be combined with the main one. It is possible to specify a different schema and a different data source. If the schema or the source are not specified, they are taken from the parent item.
The parameters object allows you to set additional parameters for the second model. It is possible to reference values from the main model. To do this, specify in the value the path to the property of the main model in double curly braces ({{....}}). 
 index  |  boolean  |  Whether the model for action is an index one. For the index model the stored procedure with the '.Index' suffix is executed, for the regular - with the '.Load' suffix. 
 copy  |  boolean  |  Whether the action is copying. In this case, a saved procedure with the suffix '.Copy' is executed to load the model. Copying in the index actions is not supported. 
 template  |  string  |  Path to the template file for action. Learn more about templates. 
 view  |  string  |  Path to the view file for the action. 
 checkTypes  |  string  |  The name of the *.d.ts file for dynamic type checking. 
 indirect  |  boolean  |  Indirectness. The action is performed in two stages. 
 parameters  |  object  |  Object, static parameters that are passed to the saved model download procedure. The property name is the name of the parameter, the value is the value of the parameter. 
 export  |  object  |  Oject that describes the action of exporting (loading) a data model. The object has the following parameters:
fileName	A row. The name of the file being saved to be offered to the user.
format	xlsx | dbf | csv list. File format for export.
template	A row. The name of the template file based on which the export will be performed. Required for export to xlsx format.
encoding	Export file code page. Required for export to dbf and csv formats. List: utf8 | 1251 | 866.
When you load the model for export, a saved procedure with the .Export suffix will be called. 
 Name  Type  Description  source  string  Optional. Data source. If not specified, taken from the parent item.  schema  string  Optional. The name of the SQL schema. If not specified, taken from the parent item.  model  string  Name of the model. If not specified, taken from the parent item.  merge  object  Optional. An additional model that will be combined with the main one. It is possible to
					specify a different schema and a different data source. If the schema or the source are
					not specified, they are taken from the parent item.  The parameters  object allows you to set additional parameters for the second
					model. It is possible to reference values from the main model. To do this, specify in the
					value the path to the property of the main model in double curly braces (  {{....}}  ).  index  boolean  Whether the model for action is an index one. For the index model the stored procedure with
					the '.Index'  suffix is executed, for the regular - with the '.Load' suffix.  copy  boolean  Whether the action is copying. In this case, a saved procedure with the suffix '.Copy'  is executed to load the model. Copying in the index actions is not supported.  template  string  Path to the template file for action.  Learn more about templates  .  view  string  Path to the view file for the action.  checkTypes  string  The name of the *.d.ts file for dynamic  type checking  .  indirect  boolean  Indirectness. The action is performed in two stages.  parameters  object  Object, static parameters that are passed to the saved model download procedure. The 
					property name is the name of the parameter, the value is the value of the parameter.  export  object  Oject that describes the action of exporting (loading) a data model. The object has the following parameters: 
[Table]
 fileName  |  A row. The name of the file being saved to be offered to the user. 
 format  |  xlsx | dbf | csv list. File format for export. 
 template  |  A row. The name of the template file based on which the export will be performed. Required for export to xlsx format. 
 encoding  |  Export file code page. Required for export to dbf and csv formats. List: utf8 | 1251 | 866. 
 fileName  A row. The name of the file being saved to be offered to the user.  format xlsx  | dbf  | csv  list.
								File format for export.  template  A row. The name of the template file based on which the export will be performed. Required for export to xlsx  format.  encoding  Export file code page. Required for export to dbf and csv formats. List: utf8  | 1251  | 866  .  When you load the model for export, a saved procedure with the .Export  suffix will be called. 

*** 
 Part: Dialogs 
  Dialogs  model.json The  object describes the dialogs possible at the current endpoint. Object property
		names are the names of the dialogs. Each property represents an object of the following structure: 
 The  dialogs  object describes the dialogs possible at the current endpoint. Object property
		names are the names of the dialogs. Each property represents an object of the following structure:  { "source"  : ""  , "schema"  : ""  , "model"  : ""  , "merge"  :  { "source"  : ""  , "schema"  : ""  , "model"  : ""  , "parameters"  :  {  }  } "index"  : true  | false  , "copy"  : true  | false  , "template"  : ""  , "view"  : ""  , "checkTypes"  : ""  , "parameters"  :  {  }  }  Properties of the dialog object 
[Table]
 Name  |  Type  |  Description 
 source  |  string  |  Optional. Data source. If not specified, taken from the parent item. 
 schema  |  string  |  Optional. The name of the SQL schema. If not specified, taken from the parent item. 
 model  |  string  |  Name of the model. If not specified, taken from the parent item. 
 merge  |  object  |  Optional. An additional model that will be combined with the main one. It is possible to specify a different schema and a different data source. If the scheme or source is not specified, they are taken from the parent element.
The parameters parameters object allows you to set additional parameters for the second model. It is possible to reference values from the main model. To do this, specify in the value the path to the property of the main model in double curly braces ({{....}}). 
 index  |  boolean  |  Whether the dialog displays an index model. For the index model, the saved procedure with the '.Index'suffix is executed, for the regular - with the '.Load' suffix. 
 copy  |  boolean  |  Whether the dialog is a dialog of copying. In this case, a stored procedure with the '.Copy' suffix is executed to load the model. Copying in the index dialogs is not supported. 
 template  |  string  |  Path to the template file for the dialog. Learn more about templates. 
 view  |  string  |  Path to the view file for the dialog. 
 checkTypes  |  string  |  Name of the *.d.ts file for dynamic type checking. 
 parameters  |  object  |  Object, static parameters that are passed to the model download stored procedure. The property name is the name of the parameter, the value is the value of the parameter. 
 Name  Type  Description  source  string  Optional. Data source. If not specified, taken from the parent item.  schema  string  Optional. The name of the SQL schema. If not specified, taken from the parent item.  model  string  Name of the model. If not specified, taken from the parent item.  merge  object  Optional. An additional model that will be combined with the main one. It is possible to
					specify a different schema and a different data source. If the scheme or source is not
					specified, they are taken from the parent element.  The parameters  parameters object allows you to set additional parameters for
					the second model. It is possible to reference values from the main model. To do this, specify
					in the value the path to the property of the main model in double curly braces (  {{....}}  ).  index  boolean  Whether the dialog displays an index model. For the index model, the saved procedure with the '.Index'  suffix is executed, for the regular - with the '.Load'  suffix.  copy  boolean  Whether the dialog is a dialog of copying. In this case, a stored procedure with the '.Copy'  suffix is executed to load the model. Copying in the index dialogs is not supported.  template  string  Path to the template file for the dialog.  Learn more about templates  .  view  string  Path to the view file for the dialog.  checkTypes  string  Name of the *.d.ts file for dynamic  type checking  .  parameters  object  Object, static parameters that are passed to the model download stored procedure. The 
					property name is the name of the parameter, the value is the value of the parameter. 

*** 
 Part: Popups 
  Popups  model.json The pop-up window can be either embedded in the markup or have downloadable
		external content. In the latter case, it has its own model and its own template. 
 The pop-up window can be either embedded in the markup or have downloadable
		external content. In the latter case, it has its own model and its own template. The  object describes the pop-ups that are possilble at the 
		current endpoint. Object property names are window names. Each property 
		represents an object of the following structure: 
 The  popups  object describes the pop-ups that are possilble at the 
		current endpoint. Object property names are window names. Each property 
		represents an object of the following structure:  { "source"  : ""  , "schema"  : ""  , "model"  : ""  , "index"  : true  | false  , "template"  : ""  , "view"  : ""  , "parameters"  :  {  }  }  Properties of the pop-up window object 
[Table]
 Name  |  Type  |  Description 
 source  |  string  |  Optional. Data source. If not specified, taken from the parent item. 
 schema  |  string  |  Optional. Name of the SQL schema. If not specified, taken from the parent item. 
 model  |  string  |  Name of the model. If not specified, taken from the parent item. 
 index  |  boolean  |  Whether the pop-up window displays an index model. For the index model, the saved procedure with the '.Index' suffix is executed, for the regular - with the '.Load' suffix. 
 template  |  string  |  Path to the template file for the pop-up window. Learn more about templates. 
 view  |  string  |  Path to the view file for the pop-up window. Typically, the root element of the window markup will be the Popup item. 
 parameters  |  object  |  Object, static parameters that are passed to the model download stored procedure. The property name is the name of the parameter, the value is the value of the parameter. 
 Name  Type  Description  source  string  Optional. Data source. If not specified, taken from the parent item.  schema  string  Optional. Name of the SQL schema. If not specified, taken from the parent item.  model  string  Name of the model. If not specified, taken from the parent item.  index  boolean  Whether the pop-up window displays an index model. For the index model, the saved
					procedure with the '.Index'  suffix is executed, for the regular - 
					with the '.Load' suffix.  template  string  Path to the template file for the pop-up window.  Learn more about templates  .  view  string  Path to the view file for the pop-up window. Typically, the root element of the window
					markup will be the  Popup  item.  parameters  object  Object, static parameters that are passed to the model download stored procedure. 
					The property name is the name of the parameter, the value is the value of the parameter. 

*** 
 Part: Commands 
  Commands  model.json The  object describes the commands available at the
		current endpoint. Object property names are command names. Each 
		property represents an object of the following structure: 
 The  commands  object describes the commands available at the
		current endpoint. Object property names are command names. Each 
		property represents an object of the following structure:  { "type"  : "sql"  | "clr"  | "callApi"  | "startProcess"  | "resumeProcess"  | "sendMessage"  , "source"  : ""  , "schema"  : ""  , "procedure"  : ""  , "file"  : ""  , "clrType"  : ""  , "parameters"  :  {  }  }  Properties of the command object 
[Table]
 Name  |  Type  |  Description 
 type  |  enum  |  Obligatory. The command type:
sql	Calling a stored sql procedure. You must specify a procedure property.
clr	Calling the .NET object method. You must specify the clrType property. Learn more....
callApi	Calling an external http-API. Parameters are determined by the parameters property. Learn more....
startProcess	Starting a business process.
resumeProcess	Resuming a business process.
file	Receiving a file.
sendMessage	Sending a message. Parameters are determined by the parameters property. Learn more.... 
 source  |  string  |  Optional. Only makes sense for the sql type. Data source for the stored procedure. If not specified, taken from the parent element. 
 schema  |  string  |  Optional. Only makes sense for the sql type. Name of the SQL schema for the stored procedure. If not specified, taken from the parent element. 
 procedure  |  string  |  Required for the sql type. The name of the stored procedure. 
 clrType  |  string  |  Required for the clr type. A string describing the build and the .NET type. 
 file  |  string  |  String. Ther file name for business processes. 
 parameters  |  object  |  Optional.
For the sql type, it is an object whose properties are passed to the stored procedure as the static parameters. The property name is the name of the parameter, the value is the value of the parameter.
For the callApi type, determine the command’s behavior. Learn more.... 
 debugOnly  |  boolean  |  The command will be executed only in the debug configuration ( configuration key of the appSettings section is "debug"). 
 Name  Type  Description  type  enum  Obligatory. The command type: 
[Table]
 sql  |  Calling a stored sql procedure. You must specify a procedure property. 
 clr  |  Calling the .NET object method. You must specify the clrType property. Learn more.... 
 callApi  |  Calling an external http-API. Parameters are determined by the parameters property. Learn more.... 
 startProcess  |  Starting a business process. 
 resumeProcess  |  Resuming a business process. 
 file  |  Receiving a file. 
 sendMessage  |  Sending a message. Parameters are determined by the parameters property. Learn more.... 
 sql  Calling a stored sql procedure. You must specify a procedure  property.  clr  Calling the .NET object method. You must specify the clrType  property.  Learn more...  .  callApi  Calling an external http-API. Parameters are determined by the parameters  property.  Learn more...  .  startProcess  Starting a business process.  resumeProcess  Resuming a business process.  file  Receiving a file.  sendMessage  Sending a message. Parameters are determined by the parameters  property.  Learn more...  .  source  string  Optional. Only makes sense for the  sql  type. Data source for the stored procedure. If not specified, taken from the parent element.  schema  string  Optional. Only makes sense for the  sql  type. Name of the SQL schema for the stored procedure. If not specified, taken from the parent element.  procedure  string  Required for the  sql  type. The name of the stored procedure.  clrType  string  Required for the  clr  type. A string describing the build and the .NET type.  file  string  String. Ther file name for business processes.  parameters  object  Optional.  For the  sql  type, it is an object whose properties are passed to the stored procedure
					as the static parameters. The property name is the name of the parameter, the value is the value of the parameter.  For the  callApi  type, determine the command’s behavior.  Learn more...  .  debugOnly  boolean  The command will be executed only in the debug configuration ( configuration  key of the appSettings  section is  "debug"  ).  Sql type commands type command executes a stored procedure. The procedure name is specified by the  property. The Sql-schema is specified
		by the  property or taken from the parent element (if not specified). The procedure is executed at the source, which is specified by the
		 or is taken from the parent element (if not specified). 
 Sql  type command executes a stored procedure. The procedure name is specified by the procedure  property. The Sql-schema is specified
		by the schema  property or taken from the parent element (if not specified). The procedure is executed at the source, which is specified by the source  or is taken from the parent element (if not specified). The following parameters are passed to the procedure: 
 The following parameters are passed to the procedure:  Standard parameters (@TenantId, @UserId).  Parameters passed to the url.  Parameters from the parameters  property.  Clr type commands type command calls a method of the type specified by the  property. 
		The type must implement the . 
 Clr  type command calls a method of the type specified by the clrType  property. 
		The type must implement the IInvokeTarget  .  Learn more...  CallApi type commands type command calls an external server via http. The behavior of the command is
		determined by the  parameters. . 
 CallApi  type command calls an external server via http. The behavior of the command is
		determined by the parameters  parameters.  Learn more...  .  SendMessage type commands type command sends a message. The behavior of the command is determined by
		the	 parameters. . 
 SendMessage  type command sends a message. The behavior of the command is determined by
		the parameters  parameters.  Learn more...  . 

*** 
 Part: Reports 
  Reports An A2v10 report refers to either an external report ()
		reporting system is supported), or an file that is uploaded in an xml or json format. 
 An A2v10 report refers to either an external report (  Stimulsoft  )
		reporting system is supported), or an file that is uploaded in an xml or json format. The  object describes the reports possible at the current endpoint. Object property names 
		are the names of the reports. Each property represents object of the following structure: 
 The  reports  object describes the reports possible at the current endpoint. Object property names 
		are the names of the reports. Each property represents object of the following structure:  { "source"  : ""  , "schema"  : ""  , "model"  : ""  , "procedure"  : ""  , "parameters"  :  {  } "type"  : "stimulsoft"  | "xml"  | "json"  , "report"  : ""  , "name"  : ""  , "encoding"  : ""  , "xmlSchemas: [" "],
  "  validate"  : true  | false  , "variables"  :  {  }  }  Properties of the report object 
[Table]
 Name  |  Type  |  Description 
 source  |  string  |  Optional. Data source. If not specified, taken from the parent item. 
 schema  |  string  |  Optional. Name of the SQL schema. If not specified, taken from the parent item. 
 model  |  string  |  Name of the model. If not specified, taken from the parent item. 
 procedure  |  string  |  Name of the stored procedure for building a report. If not specified, based on the model name with the '.Report'" suffix. 
 parameters  |  object  |  Object, the static parameters that are passed to the model download stored procedure. The property name is the name of the parameter, the value is the value of the parameter. 
 type  |  enum  |  Report type. Possible values:
stimulsoft - default. Stimulsoft report. You must specify the value of the report property;
xml - xml format report;
json - json format report.
Please note. Json reports are often used during the debugging process to make sure that the data model for the xml report is formed correctly. 
 report  |  string  |  Only for the Stimulsoft reports. Report file name without extension. The .mrt extension will be added. 
 name  |  string  |  Name (title) of the report. In export mode, this name specifies the name of the file to be exported. You can use macros. Details are below. 
 encoding  |  string  |  Only for xml reports. Xml file encoding. Represents any valid encoding. The most commonly used is 'utf-8', 'utf-16' or 'windows-1251'. 
 xmlSchemas  |  string[]  |  Only for xml reports. An array of strings that specify xml schemas for building/validating of the xml reports. Schema file names are specified without the extension (the .xsd extension will be added) and relative to the current folder (you can use ../ to access the parent folder.) 
 validate  |  boolean  |  Only for xml reports. Whether to check the report for compliance with the xml-schemas specified in the xmlSchemas array. 
 variables  |  object  |  Object to be passed to the stimulsoft report as the Variables. Used if you want to change the behavior of the report form depending on external conditions. 
 Name  Type  Description  source  string  Optional. Data source. If not specified, taken from the parent item.  schema  string  Optional. Name of the SQL schema. If not specified, taken from the parent item.  model  string  Name of the model. If not specified, taken from the parent item.  procedure  string  Name of the stored procedure for building a report. If not specified, based on the model name with the '.Report'  " suffix.  parameters  object  Object, the static parameters that are passed to the model download stored procedure. The property name is the name of the parameter, the value is the value of the parameter.  type  enum  Report type. Possible values:  stimulsoft  - default.  Stimulsoft  report. You must specify the value of the report  property;  xml  - xml format report;  json  - json format report.  Please note. Json reports are often used during the debugging process to make sure that the data model for the xml report is formed correctly.  report  string  Only for the  Stimulsoft  reports. Report file name without extension. The .mrt  extension will be added.  name  string  Name (title) of the report. In export mode, this name specifies the name of the file to be exported. You can use macros. Details are below.  encoding  string  Only for xml reports. Xml file encoding. Represents any valid encoding. The most commonly used is 'utf-8'  , 'utf-16'  or 'windows-1251'  .  xmlSchemas  string[]  Only for xml reports. An array of strings that specify xml schemas for building/validating of the xml reports. Schema file names are specified without the extension (the .xsd  extension will be added) and relative to the current folder (you can use ../  to access the parent folder.)  validate  boolean  Only for xml reports. Whether to check the report for compliance with the xml-schemas specified in the xmlSchemas  array.  variables  object  Object to be passed to the  stimulsoft  report as the Variables  . Used if you want to change the behavior of the report form depending on external conditions.  More about macros You can use macros in the report file name to access the properties of the current model. A macro is the full name of a property (from the root element) in a data model in double parentheses. 
 You can use macros in the report file name to access the properties of the current model. A macro is the full name of a property (from the root element) in a data model in double parentheses. Example: 
 Example:  { "name"  : "{{Report.RepName}}.xml" // the upload file name will be equal to the RepName property of the Report object of the current data model with an .xml extension  ...  } Please note!  libraries are NOT part of the platform. You need to purchase a separate license to work with reports. 
 Please note!  Stimulsoft  libraries are NOT part of the platform. You need to purchase a separate license to work with reports. 

*** 
 Part: Files 
  Files The  object describes the commands for working with downloaded files that are available at the current
		endpoint. Object property names represent the command names. Each property represents an object of the following structure: 
 The  files  object describes the commands for working with downloaded files that are available at the current
		endpoint. Object property names represent the command names. Each property represents an object of the following structure: Usually used with the  control. The command is
		specified in the  property of the control. 
 Usually used with the  UploadFile  control. The command is
		specified in the Url  property of the control.  { "type"  : "parse"  | "sql"  | "azureBlob"  | "clr"  , "parse"  : "excel"  | "xlsx"  | "csv"  | "dbf"  | "xml"  | "auto"  , "source"  : ""  , "schema"  : ""  , "model"  : ""  , "locale"  : ""  , "container"  : ""  , "azureSource"  : ""  , "async"  : true  | false  , "clrType"  : ""  , "parameters"  :  {  }  , "imageCompress"  :  { "quality"  :  0..100  , "threshold"  :  size  }  }  Properties of the object 
[Table]
 Name  |  Type  |  Description 
 type  |  enum  |  Obligatory. File operation type:
parse	The file parsing. If a model is specified, the file is stored in a database. If the model is empty, the parsing result is simply returned to the client. You must specify a parse property. You can also specify the locale property for the text files.
Example of the data import.
sql	Direct storage of the raw file data in the database. The model must be specified.
azureBlob	Save the file in the Azure Storage. The container property must be specified. The name of the source (connection string) is specified in the azureSource property. If not specified, equals to "AzureStorage".
clr	Calling the .NET object method. You must specify the clrType property. Learn more.... 
 parse  |  enum  |  Obligatory for parse operation. Format of the file being parsed.
csv, dbf, xml	Type of the file for analysis.
xlsx, excel	Microsoft Excel files parsing. Only .xlsx format is supported.
auto	Automatic format determination depending on the file extension.
Example of the data import. 
 locale  |  string  |  Optional. The locale for the file parsing. A text string representing the language and, optionally, the country. For example: "uk", "uk-UA" for Ukraine. Used in particular to parse numbers (decimal separator, thousands separator). If not specified, the standard view (a dot as a decimal separator) is used. 
 source  |  string  |  Optional. Data source. If not specified, taken from the parent item. 
 schema  |  string  |  Optional. Name of the sql schema. If not specified, taken from the parent item. 
 model  |  string  |  Name of the model. If not specified, taken from the parent item. If it is equal to an empty line, the model is not stored in the database, but simply returned to the client. 
 container  |  string  |  Obligatory for the azureBlob type. The name of the container in Azure Storage. 
 azureSource  |  string  |  Only for the azureBlob ype. Source (connection string name) for Azure Storage. If not specified, equals to "AzureStorage". 
 clrType  |  string  |  Required for the clr type. A string describing the build and the .NET type. 
 async  |  boolean  |  Only for the clr type. Asynchronous execution of the clr-command. 
 parameters  |  object  |  Object, the static parameters that are passed to the stored model update procedure. The property name is the name of the parameter, the value is the value of the parameter. 
 imageCompress  |  object  |  Controls image compression when they are uploaded to the server. For JPEG files only.
quality	File quality (0..100). 0-minimum, 100-maximum. The actual value of 40-50 does not lead to a significant deterioration in image quality.
threshold	The minimum value of the file size (in megabytes) for which the compression will be applied. If the file size is smaller, it is saved "as is". 
 Name  Type  Description  type  enum  Obligatory. File operation type: 
[Table]
 parse  |  The file parsing. If a model is specified, the file is stored in a database. If the model is empty, the parsing result is simply returned to the client. You must specify a parse property. You can also specify the locale property for the text files.
Example of the data import. 
 sql  |  Direct storage of the raw file data in the database. The model must be specified. 
 azureBlob  |  Save the file in the Azure Storage. The container property must be specified. The name of the source (connection string) is specified in the azureSource property. If not specified, equals to "AzureStorage". 
 clr  |  Calling the .NET object method. You must specify the clrType property. Learn more.... 
 parse  The file parsing. If a model is specified, the file is stored in a database. If the model
								is empty, the parsing result is simply returned to the client. You must specify a parse  property. You can also specify the locale  property for the text files.  Example of the  data import  .  sql  Direct storage of the raw file data in the database. The model must be specified.  azureBlob  Save the file in the Azure Storage. The container  property must be specified.
								The name of the source (connection string) is specified in the azureSource  property. If not specified, equals to  "AzureStorage"  .  clr  Calling the .NET object method. You must specify the clrType  property.  Learn more...  .  parse  enum  Obligatory for parse  operation. Format of the file being parsed. 
[Table]
 csv, dbf, xml  |  Type of the file for analysis. 
 xlsx, excel  |  Microsoft Excel files parsing. Only .xlsx format is supported. 
 auto  |  Automatic format determination depending on the file extension. 
 csv, dbf, xml  Type of the file for analysis.  xlsx, excel  Microsoft Excel files parsing. Only .xlsx  format is supported.  auto  Automatic format determination depending on the file extension.  Example of the  data import  .  locale  string  Optional. The locale for the file parsing. A text string representing the language and,
				optionally, the country. For example: "uk", "uk-UA" for Ukraine. Used in particular to parse
				numbers (decimal separator, thousands separator). If not specified, the standard view (a dot
				as a decimal separator) is used.  source  string  Optional. Data source. If not specified, taken from the parent item.  schema  string  Optional. Name of the sql schema. If not specified, taken from the parent item.  model  string  Name of the model. If not specified, taken from the parent item. If it is equal
					to an empty line, the model is not stored in the database, but simply returned
					to the client.  container  string  Obligatory for the azureBlob  type. The name of the container in Azure Storage.  azureSource  string  Only for the azureBlob  ype. Source (connection string name) for Azure 
					Storage. If not specified,  equals to  "AzureStorage"  .  clrType  string  Required for the  clr  type. A string describing the build and the .NET type.  async  boolean  Only for the  clr  type. Asynchronous execution of the clr-command.  parameters  object  Object, the static parameters that are passed to the stored model update 
					procedure. The property name is the name of the parameter, the value is 
					the value of the parameter.  imageCompress  object  Controls image compression when they are uploaded to the server. For JPEG files only. 
[Table]
 quality  |  File quality (0..100). 0-minimum, 100-maximum. The actual value of 40-50 does not lead to a significant deterioration in image quality. 
 threshold  |  The minimum value of the file size (in megabytes) for which the compression will be applied. If the file size is smaller, it is saved "as is". 
 quality  File quality (0..100). 0-minimum, 100-maximum. The actual value of 40-50 
								does not lead to a significant deterioration in image quality.  threshold  The minimum value of the file size (in megabytes) for which the compression
								will be applied. If the file size is smaller, it is saved "as is".  Parse operation The operation parses the resulting file (according to the format specified in the 
		property) and presents it as a table. If a model is specified, the system attempts to save the 
		resulting table to the database. 
 The operation parses the resulting file (according to the format specified in the parse  property) and presents it as a table. If a model is specified, the system attempts to save the 
		resulting table to the database. Saving the model is performed as follows: 
 Saving the model is performed as follows:  The procedure for obtaining metadata ( {source}: [{schema}].[{model}.Metadata]  ) is called.
				This procedure should return one record with a description of one table. The table name is predefined - Rows  .  The matching of the fields of the received file and the metadata table is performed, and the corresponding table type is filled in.  The update procedure ( {source}: [{schema}].[{model}.Update]  ) is called. 
				The table obtained at the previous step is passed to it. The following parameters are passed to the procedure:  Standard parameters ( @TenantId  , @UserId  ).  Parameters passed to the url.  Parameters from the parameters  property. @Rows (readonly)  - table type. Table data.  The model obtained as a result of the saved procedure is simply returned to the client. If the value of the  property is equal to an empty string (), then no additional actions are
		performed with the result of file parsing. The resulting table is simply returned to the client as an object with a single
		 property that contains an array of records for the source file. 
 If the value of the model  property is equal to an empty string ( ""  ), then no additional actions are
		performed with the result of file parsing. The resulting table is simply returned to the client as an object with a single Rows  property that contains an array of records for the source file.  Sql operation This operation simply saves the resulting file in the database as a byte array ().
		If the  parameter is specified, the file will (possibly) be pre-compressed. To do this,
		call the stored procedure . The following parameters are passed
		to it (the same as in the case of saving attachments): 
 This operation simply saves the resulting file in the database as a byte array ( vabinary(max type)  ).
		If the imageCompress  parameter is specified, the file will (possibly) be pre-compressed. To do this,
		call the stored procedure {source}: [{schema}].[{model}.Update]  . The following parameters are passed
		to it (the same as in the case of saving attachments): 
[Table]
 Name  |  Type  |  Description 
 @UserId  |  bigint  |  Сurrent user ID. 
 @TenantId  |  bigint  |  Tenant ID (only in a multitenant environment). 
 @Name  |  nvarchar(255)  |  File name (without path). 
 @Mime  |  nvarchar(255)  |  MIME-type of the file. 
 @Stream  |  varbinary(max)  |  File data (just bytes without conversion). 
 Name  Type  Description  @UserId  bigint  Сurrent user ID.  @TenantId  bigint  Tenant ID (only in a multitenant environment).  @Name  nvarchar(255)  File name (without path).  @Mime  nvarchar(255)  MIME-type of the file.  @Stream  varbinary(max)  File data (just bytes without conversion). Note that the parameter names are fixed! 
 Note that the parameter names are fixed!  Clr operation The type must implement the IInvokeTarget interface.  . 
 The type must implement the IInvokeTarget interface.  Learn more...  . The name, MIME type, and () of the received file are passed to the method. 
 The name, MIME type, and ( Stream  ) of the received file are passed to the method. 

*** 
 Part: Application Special Folders 
  Application Special Folders The application folder can include special folders. Their names start with the "_" character. 
 The application folder can include special folders. Their names start with the "_" character.  Special Folders  _assets  - common items of the application.  _layout  - override the base layout pages of the application.  _emails  - email templates.  _files  - static files. 

*** 
 Part: _assets special folder 
  _assets special folder special folder contains common application elements, such as images, JavaScript scripts, or style sheets. 
_assets  special folder contains common application elements, such as images, JavaScript scripts, or style sheets. Style sheets (* .css files) and scripts (* .js) from the  folder are loaded at the moment of initial program initialization. 
 Style sheets (* .css files) and scripts (* .js) from the _assets  folder are loaded at the moment of initial program initialization.  Script files (*.js) Script files are loaded and executed at the moment of initial program initialization. Usually, these files should
		contain modules, although this is optional. By convention, such modules must be prefixed with . 
 Script files are loaded and executed at the moment of initial program initialization. Usually, these files should
		contain modules, although this is optional. By convention, such modules must be prefixed with "app:"  . Regular plug-in modules (without the refix) will be loaded each time together with the page that refers to them. In contrast,
		modules with the  prefix in the  folder are loaded once, when the program is initialized. If the regular
		module is prefixed with , it will not be loaded. 
 Regular plug-in modules (without the "app:"  refix) will be loaded each time together with the page that refers to them. In contrast,
		modules with the "app:"  prefix in the _assets  folder are loaded once, when the program is initialized. If the regular
		module is prefixed with "app:"  , it will not be loaded. The folder may contain minified files (* .min.css or * .min.js). If the system finds such files, their usual versions (without 
		the intermediate suffix min) are ignored. This behavior allows you to use standard minimization tools to reduce program loading time. 
 Please note!  The folder may contain minified files (* .min.css or * .min.js). If the system finds such files, their usual versions (without 
		the intermediate suffix min) are ignored. This behavior allows you to use standard minimization tools to reduce program loading time. 

*** 
 Part: _layout special folder 
  _layout special folder The  special folder contains html-files to modify the main elements of the program. 
 The _layout  special folder contains html-files to modify the main elements of the program. 

*** 
 Part: _emails special folder 
  _emails special folder The  special folder contains email templates used for registration, password recovery, etc. 
 The _emails  special folder contains email templates used for registration, password recovery, etc. 

*** 
 Part: _files special folder 
  _files special folder The  special folder мcontains arbitrary files for download by users. 
 The _files  special folder мcontains arbitrary files for download by users. The  command is usually used to download. 
 The  Download  command is usually used to download.  Example of downloading a file <Hyperlink Content  = "Sample file to download" Command  = "{BindCmd Command=Download, Url='/entity_import_sample.xlsx'}" /> The  folder can contain subfolders. In the command, the path is specified relative to this folder. 
 Please note!  The _files  folder can contain subfolders. In the command, the path is specified relative to this folder. 

*** 
 Part: The redirect.json file 
  The redirect.json file 

*** 
 Part: Data models 
  Data models Data models are the main items that make up a business application. 
		A model is a representation of a business entity such as a customer, a supplier, 
		or a document. 
		It should be noted that the model is namely a business entity and it is 
		abstracted from the database tables and other technical details. 
		Moreover, the system does not know anything about the existence of tables, 
		field names, and so on. 
		It simply calls the stored procedures that should return/receive data in the 
		specified format. 
 Data models are the main items that make up a business application. 
		A model is a representation of a business entity such as a customer, a supplier, 
		or a document. 
		It should be noted that the model is namely a business entity and it is 
		abstracted from the database tables and other technical details. 
		Moreover, the system does not know anything about the existence of tables, 
		field names, and so on. 
		It simply calls the stored procedures that should return/receive data in the 
		specified format. In fact, the model is a hierarchical object consisting of scalar values, other objects, and arrays. 
 In fact, the model is a hierarchical object consisting of scalar values, other objects, and arrays. The system can perform just four actions with the model: 
 The system can perform just four actions with the model:  Get a list of instances.  Get one instance.  Save an instance.  Execute a command. To build the model (and its metadata), the 
		platform calls certain stored procedures. 
		Their names are constructed from the model name by adding the special suffixes 
		to the name. 

		Possible model suffixes: 
 To build the model (and its metadata), the 
		platform calls certain stored procedures. 
		Their names are constructed from the model name by adding the special suffixes 
		to the name. 

		Possible model suffixes:  .Index  - load a list of instances.  .Load  - load one instance.  .Metadata  - load metadata to store.  .Update  - update an instance. The stored procedures return data as multiple sets 
		(recordset). To construct metadata, field names and some service fields and service sets 
		are used. 
		The use of field names (rather than their values) is necessary because you need 
		to be able to build the models with the correct structure, even from the empty recordsets 
 The stored procedures return data as multiple sets 
		(recordset). To construct metadata, field names and some service fields and service sets 
		are used. 
		The use of field names (rather than their values) is necessary because you need 
		to be able to build the models with the correct structure, even from the empty recordsets  Data model types  General information  .  Simple data models  .  Working with arrays  .  Pagination  .  Updating models  .  Hierarchical models  .  Cross data models  .  Models with grouping  .  Working with binary objects  . 

*** 
 Part: General information 
  General information  Data models  Datasets The first field of each dataset must always be null. 
		The name of this field determines how to interpret this dataset. 
 The first field of each dataset must always be null. 
		The name of this field determines how to interpret this dataset.  Field naming conventions Any name in the system can consist of several (from one to three) items. 
		The name items are distinguished by the symbol  (exclamation point). 
		Note that in SQL-Server, names that contain wildcard characters, spaces, or 
		language keywords must be enclosed in square brackets. 
		
		All parts of the name are optional, but delimiters are always required. 
		In other words, if, for example, a field name begins with , then this means that the name is not specified (the field will not be in the model), 
		there is no type, but only a modifier. 
 Any name in the system can consist of several (from one to three) items. 
		The name items are distinguished by the symbol  !  (exclamation point). 
		Note that in SQL-Server, names that contain wildcard characters, spaces, or 
		language keywords must be enclosed in square brackets. 
		
		All parts of the name are optional, but delimiters are always required. 
		In other words, if, for example, a field name begins with  !!  , then this means that the name is not specified (the field will not be in the model), 
		there is no type, but only a modifier.  The first item of the name is always the name of the property (possibly compound) in the model.  The second item is the type name (for read/write) or the path to a property in the model (for metadata).  The third item is a modifier that describes either the type of the field or its special purpose.  Recordset types The set type is described by the third item (suffix) of the first 
		field of each recordset. 
 The set type is described by the third item (suffix) of the first 
		field of each recordset. 
[Table]
 Type  |  Description 
 Object  |  Single item. 
 Array  |  An array of items. If this array is a child, then the set must contain a property that defines the parent item (!ParentId). Read more... 
 LazyArray  |  "Lazy" array of child items. Loaded the first time a property is accessed. Read more... 
 Map  |  References. Always a child. May not have a name. The set must always contain an identifier (property with the !Id modifier). It is by this field that the binding with the source is carried out. 
 Tree  |  Item tree (static or dynamic). The set must contain properties with modifiers !Id, !ParentId, !Items. Read more... 
 Group  |  The item tree that is built by means of the flat table grouping. The set must contain properties of !GroupMarker and !Items types. Read more... 
 CrossArray  |  The cross array of items. Always a child. The set must contain a property that defines a parent item (!ParentId) and the !Key key property. Read more... 
 Type  Description  Object  Single item.  Array  An array of items. If this array is a child, 
					then the set must contain a property that defines the parent item
					( !ParentId  ).  Read more...  LazyArray  "Lazy" array of child items. Loaded the first time a property is accessed.  Read more...  Map  References. 
					Always a child. May not have a name. 
					The set must always contain an identifier (property with the !Id  modifier). 
					
					It is by this field that the binding with the source is carried out.  Tree  Item tree (static or dynamic). The set must contain properties with
					modifiers !Id  , !ParentId  , !Items  .  Read more...  Group  The item tree that is built by means 
					of the flat table grouping. 
					The set must contain properties of !GroupMarker  and !Items  types.  Read more...  CrossArray  The cross array of items. Always a child. 
					The set must contain a property that defines a parent item ( !ParentId  ) 
					and the !Key  key property.  Read more... 

*** 
 Part: Simple data models 
  Simple data models  Data models 

*** 
 Part: Working with arrays 
  Working with arrays  Data models An array can be either an independent item of the model (then it has a name and it
		will be displayed in the root of the model), or a child item of some other object. 
 An array can be either an independent item of the model (then it has a name and it
		will be displayed in the root of the model), or a child item of some other object. An array is defined by the  type (or  for 
	"lazy" array) in the descriptor (the first field) of the dataset. 
 An array is defined by the Array  type (or LazyArray  for 
	"lazy" array) in the descriptor (the first field) of the dataset.  Note! The arrays with too many items should not be used. In addition to the fact
		that this leads to a drop in performance, it is also very inconvenient for the end
		user to work with. Use server-side sorting, filtering, and paging to work with
		large arrays (tables).  Подробнее...  .  The recommended size of the array on the client is no more than 100 items. The maximum,
		which does not lead to a noticeable decrease in performance, is about 200 items.  Regular arrays It's simply a recordset. Each row in the set will be a corresponding object of array. The 
		type of the object is determined by the set descriptor. 
 It's simply a recordset. Each row in the set will be a corresponding object of array. The 
		type of the object is determined by the set descriptor.  Example Let there be a fragment of SQL code: 
 Let there be a fragment of SQL code: select  [  Agents!TAgent!Array  ]  = null  ,  [  Id!!Id  ]  =  Id  ,  [  Name!!Name  ]  =  Name  ,  Code from  dbo.Agents where  ....  ;  It will form the Agents  . array at the root of the model. Each item of the array will be of TAgent  type with the following properties: Id  , Name  , Code  .  Child arrays A child array is always nested and is a property of another object. Usually has no name. The parent must have a
		 placeholder property with the item type of the child array. Please note that the child set must
		be processed after the basic one. 
 A child array is always nested and is a property of another object. Usually has no name. The parent must have a null  placeholder property with the item type of the child array. Please note that the child set must
		be processed after the basic one. In order to associate an array with a parent object, the recordset must contain a field with a link to the parent
		object in the form , where 
 In order to associate an array with a parent object, the recordset must contain a field with a link to the parent
		object in the form [Name!ParentType.PropertyName!ParentId]  , where  [Name]  - the optional field name. May be empty.  ParentType.PropertyName  - the type name and the property name of the parent object where the array item will be recorded.  ParentId  - the field modifier. Binding works as follows: 
 Binding works as follows:  The value of the !ParentId  field is taken.  The object of the ParentType  type with the corresponding identifier is searched for in the
				model (it goes without saying that this identifier should be marked with the !Id  modifier).  The field with the PropertyName  name is searched for in the found object. The item is added
			to the array corresponding to this field.  Example Let there be a fragment of SQL code: 
 Let there be a fragment of SQL code: /*basic object*/ select  [  Document!TDocument!Object  ]  = null  ,  [  Id!!Id  ]  =  Id  ,  [  Date  ]  ,  [  Rows!TRow!Array  ]  =null from  dbo.Documents where  ....  ; /*child array*/ select  [  !TRow!Array  ]  = null  ,  [  Id!!Id  ]  =  Id  ,  [  Qty  ]  ,  [  Price  ]  ,  [  Sum  ]  ,  [  !TDocument.Rows!ParentId  ]  =null from  dbo.DocDetails where  ....  ;  It will form the Document  object of the TDocument  ype at the root with the following properties: Id  , Date  , Rows  . The Rows  property will be the items array of the TRow  type with the following properties: Id  , Qty  , Price  , Sum  .  "Lazy" arrays Lazy (on demand) arrays are not added to the model in the process, but are loaded the first time the property is accessed.
		Most often, this mechanism is used when the basic model is an array, and the child arrays are not always needed, but only
		on the attempt to display them. A typical example is a list of contractors, each of which contains the documents associated with it. 
 Lazy (on demand) arrays are not added to the model in the process, but are loaded the first time the property is accessed.
		Most often, this mechanism is used when the basic model is an array, and the child arrays are not always needed, but only
		on the attempt to display them. A typical example is a list of contractors, each of which contains the documents associated with it. Lazy arrays can only be children and are defined by the  modifier. 
 Lazy arrays can only be children and are defined by the LazyArray  modifier.  It should be noted that the structure of the child object (not data!) must be known to the system at the initial building of the 
		model. Therefore, when using "lazy" arrays, it is necessary to return an empty recordset, which will define the correct data 
		structure of the array. The array will be filled with real data during the loading process. To load the lazy array, the model load stored procedure will be called with a suffix corresponding to the property name of the
		main model. The ID of the main item will be passed to it as the  parameter. It should return a set that corresponds
		to the description of the array in the main model. The property with the  modifier is optional. 
 To load the lazy array, the model load stored procedure will be called with a suffix corresponding to the property name of the
		main model. The ID of the main item will be passed to it as the @Id  parameter. It should return a set that corresponds
		to the description of the array in the main model. The property with the !ParentId  modifier is optional.  Example Let there be a list of the contractors with a list of documents. 
 Let there be a list of the contractors with a list of documents. /*basic procedure*/ create or alter  proceduure  dbo.  [  Agent.Index.Load  ]  @UserId bigint as begin set nocount on  ; /* basic set */ select  [  Agents!TAgent!Array  ]  = null  ,  [  Id!!Id  ]  =  Id  ,  [  Name!!Name  ]  =  Name  ,  [  Code  ]  [  Documents!TDocument!LazyArray  ]  = null /* lazy array Documents */ from  dbo.Agents where  ....  ; /* TDocument object structure - empty set */ select  [  Documents!TDocument!Array  ]  = null  ,  [  Id!!Id  ]  =  Id  ,  [  Date  ]  ,  [  Sum  ]  ,  [  Memo  ] from  dbo.Documents where 0  <  > 0  ; end go /*The procedure for loading a lazy array. The Documents suffix corresponds to the name of the property in the basic model.*/ create or alter procedure  dbo.  [  Agent.Documents  ]  @UserId bigint  ,  @Id bigint /*The identifier of the contractor for which the list of documents is loaded*/ as begin set nocount on  ; select  [  Documents!TDocument!Array  ]  = null  ,  [  Id!!Id  ]  =  Id  ,  [  Date  ]  ,  [  Sum  ]  ,  [  Memo  ] from  dbo.Documents where  [  Agent  ]  =@Id and  ....  ; end go  It will form the Document  object of the TDocument  ype at the root with the following properties: Id  , Date  , Rows  . The Rows  type will be the items array of the TRow  with the following properties: Id  , Qty  , Price  , Sum  . Lazy array loading procedures can also take parameters and use . 
 Lazy array loading procedures can also take parameters and use  pagination  .  Please note! It is possible to update (reload from the database) only the contents of the lazy array without the basic model.
		To do this, simply pass the array as an argument to the  Refresh (Reload)  command or to the controller's  $reload  method. 

*** 
 Part: Pagination 
  Pagination  Data models 

*** 
 Part: Updating the models 
  Updating the models  Data models Note that the model is completely updated in one call to a stored procedure. SQL server
		
		are widely used for data transfer. 
 Note that the model is completely updated in one call to a stored procedure. SQL server  table parameters  are widely used for data transfer. Models are updated as follows. 
 Models are updated as follows. First, the client sends the entire model to the server. 
 First, the client sends the entire model to the server. The system finds the model name for the corresponding action and calls the stored procedure with the
		 suffix. This procedure returns multiple sets with empty content. The field names in
		these sets define the rules for how to convert the contents of the model received from the client to
		the parameters of the stored model update procedure. 
 The system finds the model name for the corresponding action and calls the stored procedure with the  .Metadata  suffix. This procedure returns multiple sets with empty content. The field names in
		these sets define the rules for how to convert the contents of the model received from the client to
		the parameters of the stored model update procedure. The system converts the obtained raw data into a set of tables using the received metadata. 
 The system converts the obtained raw data into a set of tables using the received metadata. The procedure with the  suffix is called and the converted tables are passed to it. 
 The procedure with the  .Update  suffix is called and the converted tables are passed to it.  Rules for interpreting .Metadata sets The name of the first field of each set always consists of three items separated by a '!' character. 
 The name of the first field of each set always consists of three items separated by a '!' character.  The first item is the name of the parameter in the  .Update  procedure.  The second item is the path to the data from the data model. Although some values may be arrays,
			the path is still specified through a point.  The third item is always the value of  Metadata  . The remaining fields of the set are properties in the model and, accordingly, the fields in the tabular variable. 
 The remaining fields of the set are properties in the model and, accordingly, the fields in the tabular variable. The number of tabular parameters in the  procedure (excluding predefined
		ones) will always be equal to the number of sets returned by the  procedure. 
 The number of tabular parameters in the  .Update  procedure (excluding predefined
		ones) will always be equal to the number of sets returned by the  .Metadata  procedure.  Example Consider the procedure for updating a document. A working example of
		
		can be found on GitHub 
 Consider the procedure for updating a document. A working example of  tables and stored procedures  can be found on GitHub Let's define tabular types 
 Let's define tabular types create  type  a2v10sample.  [  Document.TableType  ] as  table  (  Id bigint  ,  Kind nvarchar  ( 32  )  ,  [  Date  ]  date  ,  [  No  ] nvarchar  ( 255  )  ,  [  Sum  ]  money  ,  [  Agent  ] bigint  ,  Memo nvarchar  ( 255  )  ) go create  type  a2v10sample.  [  DocDetails.TableType  ] as  table  (  Id bigint null  ,  ParentId bigint null  ,  RowNumber int  ,  [  Qty  ]  float  ,  [  Price  ]  float  ,  [  Sum  ]  money  ,  Product bigint  ,  [  Memo  ] nvarchar  ( 255  )  ) go The first type will correspond to the  
		table, and the second to the . 
 The first type will correspond to the  a2v10sample.Documents  table, and the second to the  a2v10sample.DocDetails  . The procedure for obtaining metadata will be as follows: 
 The procedure for obtaining metadata will be as follows: create or alter procedure  a2v10sample.  [  Document.Metadata  ] as begin set nocount on  ; declare  @Document  a2v10sample.  [  Document.TableType  ]  ; declare  @Rows  a2v10sample.  [  DocDetails.TableType  ]  ; select  [  Document!Document!Metadata  ]  = null  ,  * from  @Document  ; select  [  Rows!Document.Rows!Metadata  ]  =null  ,  * from  @Rows  ; end go It returns two sets. The first set describes the document itself (there will always be one record in the table) with
		all the required fields. This table will be passed to a parameter named . Note that in the name 
		, the first word  is the name of the parameter, and the second 
		 - is the path in the model where you want to receive the data from. 
 It returns two sets. The first set describes the document itself (there will always be one record in the table) with
		all the required fields. This table will be passed to a parameter named  @Document  . Note that in the name  [Document!Document!Metadata]  , the first word  Document  is the name of the parameter, and the second  Document  - is the path in the model where you want to receive the data from. The second set describes the row table. This table will have as many rows as the
		 array of the original model. The parameter name is . 
 The second set describes the row table. This table will have as many rows as the  Document.Rows  array of the original model. The parameter name is  @Rows  . The update procedure will be as follows: 
 The update procedure will be as follows: create or alter procedure  a2v10sample.  [  Document.Update  ]  @TenantId int  = 1  ,  @UserId bigint  ,  @Document  a2v10sample.  [  Document.TableType  ] readonly  ,  @Rows  a2v10sample.  [  DocDetails.TableType  ] readonly  ,  @Kind nvarchar  ( 32  ) as begin set nocount on  ; declare  @RetId bigint  ; declare  @output  table  (  op  sysname  ,  id bigint  )  ; merge  a2v10sample.Documents as  target using  @Document as  source on  (  target.Id  =  source.Id  ) when matched then update set  target.  [  Date  ]  =  source.  [  Date  ]  ,  target.  [  No  ]  =  source.  [  No  ]  ,  target.Agent  =  source.Agent  ,  target.  [  Sum  ]  =  source.  [  Sum  ]  ,  target.Memo  =  source.Memo  ,  target.DateModified  =  getdate  (  ) when not matched by  target then insert  (  Kind  ,  [  Date  ]  ,  [  No  ]  ,  Agent  ,  [  Sum  ]  ,  Memo  ) values  (  @Kind  ,  [  Date  ]  ,  [  No  ]  ,  Agent  ,  [  Sum  ]  ,  Memo  ) output  $action  op  ,  inserted.Id  id into  @output  (  op  ,  id  )  ; select  top  ( 1  )  @RetId  =  id from  @output  ; merge  a2v10sample.DocDetails as  target using  @Rows as  source on  (  target.Id  =  source.Id and  target.Document  =  @RetId  ) when matched then update set  target.RowNo  =  source.RowNumber  ,  target.Product  =  source.Product  ,  target.Qty  =  source.Qty  ,  target.Price  =  source.Price  ,  target.  [  Sum  ]  =  source.  [  Sum  ]  ,  target.Memo  =  source.Memo when not matched by  target then insert  (  Document  ,  RowNo  ,  Qty  ,  Price  ,  [  Sum  ]  ,  Product  ,  Memo  ) values  (  @RetId  ,  RowNumber  ,  Qty  ,  Price  ,  [  Sum  ]  ,  Product  ,  Memo  ) when not matched by  source and  target.Document  =  @RetId then delete  ; exec  a2v10sample.  [  Document.Load  ]  @UserId  ,  @RetId  ; end go The procedure simply updates (or inserts) the document and its rows using the  statement. Note that
		a pseudo-table  is used to obtain the document ID (which is needed to insert rows) 
 The procedure simply updates (or inserts) the document and its rows using the  merge  statement. Note that
		a pseudo-table  inserted  is used to obtain the document ID (which is needed to insert rows)  Additional service fields in record sets When filling in data tables from models, the following service fields are added to the tables. If they are 
		declared in tabular types, their values will be filled in. These fields are used to bind child records 
		(because they may be new and their identifiers may not yet exist). 
 When filling in data tables from models, the following service fields are added to the tables. If they are 
		declared in tabular types, their values will be filled in. These fields are used to bind child records 
		(because they may be new and their identifiers may not yet exist). 
[Table]
 Name  |  Type  |  Description 
 GUID  |  uniqueidentifier  |  Unique value. Used in conjunction with ParentGUID. 
 RowNumber  |  int  |  The row number in the table (starting with 1). 
 CurrentKey  |  Various types  |  The current key in Map type tables. Used in conjunction with the ParentKey field of a child table. 
 ParentId  |  Various types  |  arent record ID. An identifier is always a property named Id. 
 ParentGUID  |  uniqueidentifier  |  Unique identifier of the parent record (property named GUID from the parent table). 
 ParentKey  |  Various types  |  Parent record key (CurrentKey). Used to populate tables of type Map. 
 ParentRowNumber  |  int  |  The row number of the parent record (a property named RowNumber from the parent table). 
 Name  Type  Description  GUID  uniqueidentifier  Unique value. Used in conjunction with  ParentGUID  .  RowNumber  int  The row number in the table (starting with 1).  CurrentKey  Various types  The current key in  Map  type tables. Used in conjunction
					with the  ParentKey  field of a child table.  ParentId  Various types  arent record ID. An identifier is always a property named  Id  .  ParentGUID  uniqueidentifier  Unique identifier of the parent record (property named  GUID  from the parent table).  ParentKey  Various types  Parent record key (  CurrentKey  ). Used to populate tables of type  Map  .  ParentRowNumber  int  The row number of the parent record (a property named  RowNumber  from the parent table).  Tip To see what data comes into the stored procedure, you can use the following code snippet (where @Rows is the name of the table parameter): 
 To see what data comes into the stored procedure, you can use the following code snippet (where @Rows is the name of the table parameter): declare  @xml nvarchar  (  max  )  ; set  @xml  =  ( select  * from  @Rows for xml auto  )  ; throw 60000  ,  @xml  , 0  ; 

*** 
 Part: Hierarchical data models 
  Hierarchical data models  Data models The hierarchical (tree-like) data model includes a set of records 
		with a parent-child relationship. The nesting depth is not limited. 
 The hierarchical (tree-like) data model includes a set of records 
		with a parent-child relationship. The nesting depth is not limited. The hierarchical model is represented by the  object type.
		For the tree to work properly, each record must have three required fields: 
 The hierarchical model is represented by the !Tree  object type.
		For the tree to work properly, each record must have three required fields: !Id  - record identifier !ParentId  - parent record identifier. !Items  - an array of child fields. . The T-SQL recursive query engine (CTE) - Common Table Expressions
		and the WITH clause - is usually used to generate record sets.
		. 
 Note  . The T-SQL recursive query engine (CTE) - Common Table Expressions
		and the WITH clause - is usually used to generate record sets.  For more information, see the Microsoft documentation  . The trees can be loaded both statically (the entire tree in one request), and 
		dynamically (lazy loading), when the branches of the tree are filled from the
		database only in case the user (or program) expands this branch. 
 The trees can be loaded both statically (the entire tree in one request), and 
		dynamically (lazy loading), when the branches of the tree are filled from the
		database only in case the user (or program) expands this branch.  Example Working with a hierarchical model is easiest to demonstrate with an example. Let
		there be a table  of the following form: 
 Working with a hierarchical model is easiest to demonstrate with an example. Let
		there be a table Agents  of the following form: 
[Table]
 Id  |  Parent  |  Name 
 10  |  null  |  Agent 1 
 20  |  null  |  Agent 2 
 100  |  10  |  Subagent 1.1 
 110  |  10  |  Subagent 1.2 
 200  |  20  |  Subagent 2.1 
 210  |  20  |  Subagent 2.2 
 Id  Parent  Name  10  null  Agent 1  20  null  Agent 2  100  10  Subagent 1.1  110  10  Subagent 1.2  200  20  Subagent 2.1  210  20  Subagent 2.2  Static tree The static tree is completely filled at once in one access to the database. 
		The query that generates data for the tree model will look as follows: 
 The static tree is completely filled at once in one access to the database. 
		The query that generates data for the tree model will look as follows: create or alter procedure  dbo.  [  Agent.Index.Load  ]  @UserId bigint as begin set nocount on  ; with  T  (  Id  ,  Parent  ,  [  Level  ]  ) as  ( select  Id  ,  Parent  , 0 from  dbo.Agents  a where  a.Parent  is null union all select  a.Id  ,  a.Parent  ,  T.  [  Level  ]  + 1 from  dbo.Agents  a inner join  T on  T.Id  =  a.Parent  ) select  [  Agents!TAgent!Tree  ]  = null  ,  [  Id!!Id  ]  =  a.Id  ,  [  Name!!Name  ]  =  a.  [  Name  ]  ,  [  !TAgent.Items!ParentId  ]  =T.Parent  ,  [  Items!TAgent!Items  ]  = null  ,  [  Level  ]  =  T.  [  Level  ] from  dbo.Agents  a inner join  T on  a.Id  =  T.Id order by  [  Level  ]  ,  [  Id!!Id  ]  ; end When this set is being processed, a simple array of   items of 
	type is created. Each item of this array will contain an  array that will be
	populated with child items. The parent item is defined by the property with the .
	modifier. Note that this field does not have a property name, so it will not be included in the resulting model. 
 When this set is being processed, a simple array of Agents  items of TAgent  type is created. Each item of this array will contain an Items  array that will be
	populated with child items. The parent item is defined by the property with the ParentId  .
	modifier. Note that this field does not have a property name, so it will not be included in the resulting model. As a result of processing, such model will be obtained (service properties for simplicity are not shown): 
 As a result of processing, such model will be obtained (service properties for simplicity are not shown):  { "Agents"  :  [  { "Id"  : 10  , "Name"  : "Agent1"  , "Items"  :  [  { "Id"  : 100  , "Name"  : "Subagent 1.1"  , "Items"  :  [  ]  , "Level"  : 1  ,  }  ,  { "Id"  : 101  , "Name"  : "Subagent 1.2"  , "Items"  :  [  ]  , "Level"  : 1  ,  }  ]  , "Level"  : 0  ,  }  ,  { "Id"  : 20  , "Name"  : "Agent2"  , "Items"  :  [  { "Id"  : 200  , "Name"  : "Subagent 2.1"  , "Items"  :  [  ]  , "Level"  : 1  ,  }  ,  { "Id"  : 201  , "Name"  : "Subagent 2.2"  , "Items"  :  [  ]  , "Level"  : 1  ,  }  ]  , "Level"  : 0  ,  }  ]  } To work with such a model, the  control is most often used. 
 To work with such a model, the  TreeView  control is most often used. Example (XAML): 
 Example (XAML): <TreeView ItemsSource  = "{Bind Agents}" IconFolder  = "Folder" IconItem  = "File" > <TreeViewItem ItemsSource  = "{Bind Items}" Label  = "{Bind Name}" /> </TreeView>  Dynamic tree Dynamic tree fills up as the user opens certain branches of the tree. 
 Dynamic tree fills up as the user opens certain branches of the tree. When working with a dynamic tree, it is sufficient to return only the top level
	of the tree from the loading procedure. However, in order for the system to know
	which items can be disclosed, you need to have another service property in the model
	with a special  type. If this property is set, the system
	assumes that this item has children and shows the corresponding user interface elements. 
 When working with a dynamic tree, it is sufficient to return only the top level
	of the tree from the loading procedure. However, in order for the system to know
	which items can be disclosed, you need to have another service property in the model
	with a special !HasChildren  type. If this property is set, the system
	assumes that this item has children and shows the corresponding user interface elements. Note that such a property, even though it is a service property, must have a name, as it is handled on the client’s side. 
 Note that such a property, even though it is a service property, must have a name, as it is handled on the client’s side. When a user attempts to open such a tree item, a stored procedure with the
	 suffix is called, which should return the child items
	for that node. The process is then repeated recursively. 
 When a user attempts to open such a tree item, a stored procedure with the .Expand  suffix is called, which should return the child items
	for that node. The process is then repeated recursively. The top-level procedure can return the following set: 
 The top-level procedure can return the following set: create or alter procedure  dbo.  [  Agent.Index.Load  ]  @UserId bigint as begin set nocount on  ; select  [  Agents!TAgent!Tree  ]  = null  ,  [  Id!!Id  ]  =  a.Id  ,  [  Name!!Name  ]  =  a.  [  Name  ]  ,  [  Items!TAgent!Items  ]  = null  ,  [  HasChildren!!HasChildren  ]  = case when exists  ( select  * from  dbo.Agents  c where  c.Parent  =  a.Id  ) then 1 else 0 end from  dbo.Agents  a where  Parent  is null order by  [  Id!!Id  ]  ; end Then, upon an attempt to open the tree, the  procedure will be called, which should return the elements of the next level of the tree. 
 Then, upon an attempt to open the tree, the .Expand  procedure will be called, which should return the elements of the next level of the tree. create or alter procedure  dbo.  [  Agent.Index.Expand  ]  @UserId bigint  ,  @Id bigint as begin set nocount on  ; /*Please note that the tree now has the name Items (same as the top-level child items) */ select  [  Items!TAgent!Tree  ]  = null  ,  [  Id!!Id  ]  =  a.Id  ,  [  Name!!Name  ]  =  a.  [  Name  ]  ,  [  Items!TAgent!Items  ]  = null  ,  [  HasChildren!!HasChildren  ]  = case when exists  ( select  * from  dbo.Agents  c where  c.Parent  =  a.Id  ) then 1 else 0 end from  dbo.Agents  a where  Parent  =  @Id order by  [  Id!!Id  ]  ; end The tree items in the data model implement the  interface and have some additional properties. . 
 The tree items in the data model implement the ITreeElement  interface and have some additional properties.  Learn more...  . 

*** 
 Part: Cross data models 
  Cross data models  Data models The cross data model includes one or more fields that will be expanded into either a
		horizontal array of items ( type) or into a keyed
		object ( type). 
 The cross data model includes one or more fields that will be expanded into either a
		horizontal array of items ( CrossArray  type) or into a keyed
		object ( CrossObject  type). Such models are most often used
		to build cross-sectional reports, in which the number of columns is variable and is
		determined by the received data.

		This is similar to the sql  statement, but, unlike it, you do 
		not need to know in advance which columns will be included in the result set. 
 Such models are most often used
		to build cross-sectional reports, in which the number of columns is variable and is
		determined by the received data.

		This is similar to the sql  pivot  statement, but, unlike it, you do 
		not need to know in advance which columns will be included in the result set. Note that it doesn't make sense (though not forbidden) to use cross-models
		for objects (not arrays). Just use  instead. 
 Note that it doesn't make sense (though not forbidden) to use cross-models
		for objects (not arrays). Just use MapObject  instead. For cross arrays, the differences from simple nested arrays are the following: 
 For cross arrays, the differences from simple nested arrays are the following:  All cross arrays in all records will be the same size.  The order of the items will be determined by the ( Key  ) of the cross item.  The main array (the one that contains the items with the cross arrays) will have an additional  $cross  property
				where the key arrays for each of the cross arrays will be represented. For cross objects, the logic is as follows: 
 For cross objects, the logic is as follows:  All cross objects in all records will have the same structure.  The main array (the one that contains the items with the cross arrays) will have an additional  $cross  , property where the key arrays for each of 
				the cross arrays will be represented. The easiest way to understand how cross models work is with an example. 
 The easiest way to understand how cross models work is with an example.  Cross Array Processing Example Let there be a fragment of SQL code: 
 Let there be a fragment of SQL code: /* main recordset */ select  [  RepData!TData!Array  ]  = null  ,  [  Id!!Id  ]  =  Id  ,  S1  ,  N1  ,  [  Cross1!TCross!CrossArray  ]  = null from  ...  ; /* cross part */ select  [  !TCross!CrossArray  ]  = null  ,  [  Key!!Key  ]  =  Key  ,  Val  ,  [  !TData.Cross1!ParentId  ]  =  Id  ; from  ...  ; And it returns the following data: 
 And it returns the following data: 
[Table]
 RepData!TData!Array  |  Id!!Id  |  S1  |  N1  |  Cross1!TCross!CrossArray 
 null  |  10  |  Str1  |  100  |  null 
 null  |  20  |  Str2  |  200  |  null 
 RepData!TData!Array  Id!!Id  S1  N1  Cross1!TCross!CrossArray  null  10  Str1  100  null  null  20  Str2  200  null 
[Table]
 !TCross!CrossArray  |  Key!!Key  |  Val  |  !TData.Cross1!ParentId 
 null  |  K1  |  111  |  10 
 null  |  K2  |  222  |  20 
 !TCross!CrossArray  Key!!Key  Val  !TData.Cross1!ParentId  null  K1  111  10  null  K2  222  20 When the first set is being processed, a simple array 
		of the  items of the  type will be created. 
		Each item of this array will contain the  field, 
		which will later become a cross array of items of the  type. 
		Please note that the main items must contain an 
		identifier (a field with the  type), 
		so that the next data sets can refer to the array item. 
 When the first set is being processed, a simple array 
		of the RepData  items of the TData  type will be created. 
		Each item of this array will contain the Cross1  field, 
		which will later become a cross array of items of the TCross  type. 
		Please note that the main items must contain an 
		identifier (a field with the !Id  type), 
		so that the next data sets can refer to the array item. The second set is processed as follows. First, the field of reference 
		to the cross field of the main item of the array is searched 
		(a field with the  type). 
		The link type indicates the type name and the field name separated by a dot. 
		 - the  field in 
		the  type item. 
		The content of the cross-record is stored in the internal 
		buffer of the found master record. 
 The second set is processed as follows. First, the field of reference 
		to the cross field of the main item of the array is searched 
		(a field with the !ParentId  type). 
		The link type indicates the type name and the field name separated by a dot. !TData.Cross1!ParentId  - the Cross1  field in 
		the TData  type item. 
		The content of the cross-record is stored in the internal 
		buffer of the found master record. Please note that the cross array must contain a test field of the 
		 type. 
		It is used for internal processing. 
		It is this field that will be contained in the array returned 
		by the  property. 
		This property will be added to the array itself (not an item!) of  objects. 
		A reference to the list of keys will look like . 
 Please note that the cross array must contain a test field of the !Key  type. 
		It is used for internal processing. 
		It is this field that will be contained in the array returned 
		by the $cross  property. 
		This property will be added to the array itself (not an item!) of TData  objects. 
		A reference to the list of keys will look like RepArray.$Cross.Cross1  . After processing all cross-set records, the system finds 
		the concatenation of all possible keys in all  records and 
		converts the internal buffers to arrays. As a result, 
		all cross arrays will have the same length. 
 After processing all cross-set records, the system finds 
		the concatenation of all possible keys in all TData  records and 
		converts the internal buffers to arrays. As a result, 
		all cross arrays will have the same length. The resulting model will look as follows: 
 The resulting model will look as follows:  RepData  :  [  { Id  : 10  ,  S1  : "Str1"  ,  N1  : 100  ,  Cross1  :  [  {  Key  : 'K1'  ,  Val  : 111  }  ,  {  Key  : 'K2'  ,  Val  : 0  }  ]  }  ,  { Id  : 20  ,  S1  : "Str2"  ,  N1  : 200  ,  Cross1  :  [  {  Key  : 'K1'  ,  Val  : 0  }  {  Key  : 'K2'  ,  Val  : 222  }  ,  ]  }  ,  $cross  :  {  Cross1  :  [ 'K1'  , 'K2'  ]  }  ]  Example The cross models are most often used to build reports in conjunction with
		tables. To make the
		example more realistic, let's add the output of the totals.
		The  
		element is used to display cross arrays. 
 The cross models are most often used to build reports in conjunction with  Sheet  tables. To make the
		example more realistic, let's add the output of the totals.
		The  SheetCellGroup  element is used to display cross arrays. Template 
 Template const  template  =  {  properties  :  { /* properties for the whole array */ /* merge columns */ 'TDataArray.$Cross1Span'  (  )  { return  this.$cross.Cross1.length  + 1  ;  }  , /* cross totals. returns array! */ 'TDataArray.$Cross1Total'  (  )  { return  this.$cross.Cross1.reduce  (  (  prevArray  ,  currKey  ,  currIndex  )  =  >  {  prevArray.push  (  {  Val  :  this.reduce  (  (  prevTotal  ,  currElem  )  =  >  prevTotal  +  currElem.Cross1  [  currIndex  ]  .Val  , 0  )  }  )  ; return  prevArray  ;  }  ,  [  ]  )  ;  }  , /* total for Cross1 section across all lines */ 'TDataArray.$GrandTotal'  (  )  { return  this.$Cross1Total.reduce  (  (  p  ,  c  )  =  >  p  +  c.Val  , 0  )  ;  }  , /* properties for each item of the array */ /* total Cross1 by line */ 'TData.$Cross1Total'  (  )  { return  this.Cross1.reduce  (  (  p  ,  c  )  =  >  p  +  c.Val  , 0  )  ;  }  }  } XAML: 
 XAML: <Sheet Margin  = "1rem" GridLines  = "Both" Compact  = "True" > <Sheet.Header> <SheetRow Style  = "Header" > <SheetCell RowSpan  = "2" >  Id </SheetCell> <SheetCell RowSpan  = "2" >  S1 </SheetCell> <SheetCell RowSpan  = "2" >  N1 </SheetCell> <SheetCell ColSpan  = "{Bind RepData.$Cross1Span}" >  Cross1 </SheetCell> </SheetRow> <SheetRow Style  = "Header" > <SheetCellGroup ItemsSource  = "{Bind RepData.$cross.Cross1}" > <SheetCell Content  = "{Bind}" /> </SheetCellGroup> <SheetCell>  Total </SheetCell> </SheetRow> <SheetRow Style  = "Total" > <SheetCell ColSpan  = "3" >  Total </SheetCell> <SheetCellGroup ItemsSource  = "{Bind RepData.$Cross1Total}" > <SheetCell Content  = "{Bind Val}" /> </SheetCellGroup> <SheetCell Content  = "{Bind RepData.$GrandTotal}" /> </SheetRow> </Sheet.Header> <SheetSection ItemsSource  = "{Bind RepData}" > <SheetRow> <SheetCell Content  = "{Bind Id}" /> <SheetCell Content  = "{Bind S1}" /> <SheetCell Content  = "{Bind N1}" /> <SheetCellGroup ItemsSource  = "{Bind Cross1}" > <SheetCell Content  = "{Bind Val, DataType=Number, HideZeros=True}" /> </SheetCellGroup> <SheetCell Content  = "{Bind $Cross1Total}" /> </SheetRow> </SheetSection> </Sheet> Result: 
 Result: 
[Table]
 Id  |  S1  |  N1  |  Cross1 
 K1  |  K2  |  Total 
 Total  |  111  |  222  |  333 
 10  |  Str1  |  100  |  111  |    |  111 
 20  |  Str2  |  200  |    |  222  |  222 
 Id  S1  N1  Cross1  K1  K2  Total  Total  111  222  333  10  Str1  100  111  111  20  Str2  200  222  222 

*** 
 Part: Grouped Models 
  Grouped Models  Data models A grouped data model includes a record set with a parent-child relationship. The nesting depth is not limited. 
 A grouped data model includes a record set with a parent-child relationship. The nesting depth is not limited. Unlike , in which parent-child relationships are defined using
		the parent record identifier, in the grouped models, relationships are defined based on repeated values. 
 Unlike  hierarchical (tree-like) models  , in which parent-child relationships are defined using
		the parent record identifier, in the grouped models, relationships are defined based on repeated values. . The T-SQL  clause is usually used to form grouped datasets.
									  . 
 Please note  . The T-SQL GROUP BY ROLLUP  clause is usually used to form grouped datasets.  For more information, see the Microsoft documentation  . A grouped model is represented by the  object type. 
		To be correct, each record must have two additional required fields: 
 A grouped model is represented by the !Group  object type. 
		To be correct, each record must have two additional required fields: !GroupMarker  - the grouping markers. There will be as
			many of them as many grouping levels will be used. In fact, they are
			simply the T-SQL value of the grouping  function for the
			corresponding field. There will be as many such fields as are specified
			in the group groupby rollup  statement. !Items  - an array of child records. This value will always
			be null in the recordset. The field is necessary for the system to build
			a hierarchy based on the received data. Note that the data type of the
			items must always be the same as the data type of the root object (with
			the !Group  modifier). Due to the nature of the processing of models, you MUST first sort the recordset
		by grouping markers in reverse order, so that groups are displayed first. 
 Due to the nature of the processing of models, you MUST first sort the recordset
		by grouping markers in reverse order, so that groups are displayed first. . If only one grouping level is specified for the model, then in
		fact this means that you will simply calculate the totals for certain fields (those
		that are displayed using the  function). 
 Please note  . If only one grouping level is specified for the model, then in
		fact this means that you will simply calculate the totals for certain fields (those
		that are displayed using the sum  function).  Example The simplest way to demonstrate working with grouped models is with an example.
		Suppose you have the  table looking as follows: 
 The simplest way to demonstrate working with grouped models is with an example.
		Suppose you have the Documents  table looking as follows: 
[Table]
 Id  |  Date  |  Agent  |  Amount 
 10  |  2021-05-01  |  10  |  150.00 
 11  |  2021-05-02  |  10  |  300.00 
 12  |  2021-05-01  |  20  |  320.00 
 13  |  2021-05-02  |  20  |  270.00 
 Id  Date  Agent  Amount  10  2021-05-01  10  150.00  11  2021-05-02  10  300.00  12  2021-05-01  20  320.00  13  2021-05-02  20  270.00 And the  table looking as follows: 
 And the Agents  table looking as follows: 
[Table]
 Id  |  Name 
 10  |  Agent 1 
 20  |  Agent 2 
 Id  Name  10  Agent 1  20  Agent 2 Let's build a recordset with grouping by date and contractor. 
 Let's build a recordset with grouping by date and contractor. create or alter procedure  dbo.  [  Report.Documents.Load  ]  @UserId bigint as begin set nocount on  ; set transaction isolation level read uncommitted  ; select  [  ReportData!TData!Group  ]  = null  ,  [  Agent  ]  =  a.  [  Name  ]  ,  [  Date  ]  =  convert  ( nvarchar  ,  d.  [  Date  ]  , 104  )  ,  Amount  = sum  (  d.Amount  )  ,  [  Agent!!GroupMarker  ]  = grouping  (  a.  [  Name  ]  )  ,  [  Date!!GroupMarker  ]  = grouping  (  d.  [  Date  ]  )  ,  [  Items!TData!Items  ]  = null from  dbo.Documents  d inner join  dbo.Agents  a on  d.Agent  =  a.Id group by rollup  (  a.  [  Name  ]  ,  d.  [  Date  ]  ) order by  [  Agent!!GroupMarker  ] desc  ,  [  Date!!GroupMarker  ] desc  ,  a.  [  Name  ]  ,  d.  [  Date  ]  ; end go As a result of this procedure the following recordset will be formed: 
 As a result of this procedure the following recordset will be formed: 
[Table]
 ReportData!TData!Group  |  Agent  |  Date  |  Amount  |  Agent!!GroupMarker  |  Date!!GroupMarker  |  Items!TData!Items 
 null  |  null  |  null  |  1040.00  |  1  |  1  |  null 
 null  |  Agent 1  |  null  |  450.00  |  0  |  1  |  null 
 null  |  Agent 2  |  null  |  590.00  |  0  |  1  |  null 
 null  |  Agent 1  |  01.05.2020  |  150.00  |  0  |  0  |  null 
 null  |  Agent 1  |  02.05.2020  |  300.00  |  0  |  0  |  null 
 null  |  Agent 2  |  01.05.2020  |  320.00  |  0  |  0  |  null 
 null  |  Agent 2  |  02.05.2020  |  270.00  |  0  |  0  |  null 
 ReportData!TData!Group  Agent  Date  Amount  Agent!!GroupMarker  Date!!GroupMarker  Items!TData!Items  null  null  null  1040.00  1  1  null  null  Agent 1  null  450.00  0  1  null  null  Agent 2  null  590.00  0  1  null  null  Agent 1  01.05.2020  150.00  0  0  null  null  Agent 1  02.05.2020  300.00  0  0  null  null  Agent 2  01.05.2020  320.00  0  0  null  null  Agent 2  02.05.2020  270.00  0  0  null The first three lines of the set represent the totals for the entire report (the first line) and for each of the
		countractors (the second and the third lines). Grouping markers show which field this total is for. 
 The first three lines of the set represent the totals for the entire report (the first line) and for each of the
		countractors (the second and the third lines). Grouping markers show which field this total is for. After processing this set, such a model will be formed (service properties are not shown for simplicity). 
 After processing this set, such a model will be formed (service properties are not shown for simplicity).  { "ReportData"  :  { "Agent"  : ""  , "Date"  : ""  , "Amount"  : 1040  , "Items"  :  [  { "Agent"  : "Agent 1"  , "Date"  : ""  , "Amount"  : 450  , "Items"  :  [  { "Agent"  : "Agent 1"  , "Date"  : "01.05.2020"  , "Amount"  : 150  , "Items"  :  [  ]  , "$level"  : 2  , "$groupName"  : "01.05.2020"  }  ,  { "Agent"  : "Agent 1"  , "Date"  : "02.05.2020"  , "Amount"  : 300  , "Items"  :  [  ]  , "$level"  : 2  , "$groupName"  : "02.05.2020"  }  ]  , "$level"  : 1  , "$groupName"  : "Agent 1"  }  ,  { "Agent"  : "Agent 2"  , "Date"  : ""  , "Amount"  : 590  , "Items"  :  [  { "Agent"  : "Agent 2"  , "Date"  : "01.05.2020"  , "Amount"  : 320  , "Items"  :  [  ]  , "$level"  : 2  , "$groupName"  : "01.05.2020"  }  ,  { "Agent"  : "Agent 2"  , "Date"  : "02.05.2020"  , "Amount"  : 270  , "Items"  :  [  ]  , "$level"  : 2  , "$groupName"  : "02.05.2020"  }  ]  , "$level"  : 1  , "$groupName"  : "Agent 2"  }  ]  , "$level"  : 0  ,  }  } Note the  and  properties.
	The  - property - specifies the level in the tree
	(from 0), and  - - the group name - actually 
	simply selects one of the set values depending on the level. 
 Note the $level  and $groupName  properties.
	The $level  - property - specifies the level in the tree
	(from 0), and $groupName  - - the group name - actually 
	simply selects one of the set values depending on the level. You can display such a model, for example, using the  object. 
 You can display such a model, for example, using the  Sheet  object. <Sheet GridLines  = "Both" Columns  = "Fit,Auto,Auto" > <Sheet.Header> <SheetRow Style  = "Header" > <SheetCell / > <SheetCell Content  = "Agent/Date" /> <SheetCell Content  = "Amount" /> </SheetRow> <SheetRow Style  = "Total" > <SheetCell ColSpan  = "2" Content  = "Total" /> <SheetCell Content  = "{Bind ReportData.Amount, DataType=Currency}" Align  = "Right" /> </SheetRow> </Sheet.Header> <SheetTreeSection ItemsSource  = "{Bind ReportData.Items}" > <SheetRow> <SheetGroupCell / > <SheetCell GroupIndent  = "True" Content  = "{Bind $groupName}" /> <SheetCell Content  = "{Bind Amount, DataType=Currency}" Align  = "Right" /> </SheetRow> </SheetTreeSection> </Sheet> Result (display only, group convolution does not work) 
 Result (display only, group convolution does not work) 
[Table]
   |  Agent/Date  |  Amount 
 Total  |  1 040,00 
   |    |   
   |  Agent 1  |  450,00 
   |  01.05.2020  |  150,00 
   |  02.05.2020  |  300,00 
   |  Agent 2  |  590,00 
   |  01.05.2020  |  320,00 
   |  02.05.2020  |  270,00 
 Agent/Date  Amount  Total  1 040,00  Agent 1  450,00  01.05.2020  150,00  02.05.2020  300,00  Agent 2  590,00  01.05.2020  320,00  02.05.2020  270,00 

*** 
 Part: Working with binary objects (blob) 
  Working with binary objects (blob)  Data models  General information A binary object (this can be an image, attachment, etc.) is a separate entity. It has
		the ,  properties and, actually, data (). 
 A binary object (this can be an image, attachment, etc.) is a separate entity. It has
		the Name  , Mime  properties and, actually, data ( Stream  ). This entity can be stored in a separate table for each item, as well as in a common table of
		attachments with an additional table of relations. An access token generation mechanism is
		used to prevent unauthorized access to attachments. A token is simply a hash of a string
		containing the ID of the current session, the user ID, and the additional access key (guid)
		associated with that attachment. The simplest way is to add this key as a field with a
		 type and a default  value. 
 This entity can be stored in a separate table for each item, as well as in a common table of
		attachments with an additional table of relations. An access token generation mechanism is
		used to prevent unauthorized access to attachments. A token is simply a hash of a string
		containing the ID of the current session, the user ID, and the additional access key (guid)
		associated with that attachment. The simplest way is to add this key as a field with a uniqueidentifier  type and a default newid()  value. Working with binary objects actually consists of three almost independent parts. 
 Working with binary objects actually consists of three almost independent parts.  Obtaining the object itself and the access token. Here everything is simple and you
				can use the standard tools of the platform. However, you will not be able to download
				the data stream immediately. We need some separate tools to work with this stream. The
				simplest option is to download the data by clicking on the link. If we work with pictures,
				it makes sense to show their Preview. In addition, an access token must be generated to
				prevent unauthorized access. To do this, you have to include a field with the special !Token  . type into the recordset. When processing this field, the system will
				take a value (this will be guid) and generate an access token instead. Note that the values
				of this token will be different in different browser sessions.  Receiving bytes from the server (pictures, attachments) using an access token. Used to display images
				(  Image  ,  FileImage  items)
				or simply to load them using the  File  command.  Uploading data to the server. You can save data anywhere (for example in a database or in Azure Storage).
				This attachment has an ID. It can be used to obtain content for downloading or displaying binary data 
				(picture, file). Note that this ID will be recorded into the model itself only when the model is saved.
				In addition to the download ID, an access token will be generated when the data is saved. It also has 
				to be recorded into the model (you don't need to save it; when loading, it will be newly generated anyway).
				Note that this ID will only be written to the model itself when the model is saved. In addition to the download
				ID, an access token will be generated when the data is saved. It also has to be recorded into the model (you
				don’t need to save it; when loading it will be newly generated anyway).  Stored procedure formats Two stored procedures are used to work with binary data. One for reading data ( suffix),
		another for their recording ( suffix). Note that the procedures for working with binary
		data are specific and do not comply with the rules for building models. 
 Two stored procedures are used to work with binary data. One for reading data ( .Load  suffix),
		another for their recording ( .Update  suffix). Note that the procedures for working with binary
		data are specific and do not comply with the rules for building models. .Load  Procedure The procedure receives the following parameters (the names are fixed, the order does not matter): 
 The procedure receives the following parameters (the names are fixed, the order does not matter): @TenantId int  - tenant ID (only in a multitenant environment). @UserId bigint  - current user ID. @Id bigint  - data (image, attachment) ID. The procedure must return a single record set with the following fields (field names matter, their order is arbitrary). 
 The procedure must return a single record set with the following fields (field names matter, their order is arbitrary). Id bigint  - data (image, attachment) ID. Mime nvarchar(255)  - mime data type. Name nvarchar(255)  - the recordset name. Stream varbinary(max)  - the data stream itself. Can be equal to null. BlobName nvarcvhar(max)  - the name of the set in external storage (e. g. Azure Storage). Can be equal to null. Token uniqueidentifier  - the field for generating the access token. This item must correspond to what the load
				procedure of the model, from which this data will be received, will return. The download procedure must return one of the fields  or .
		If the  field is specified, the data will be retrieved from external storage
		(Azure Storage) and the value of the  field will be ignored. 
 The download procedure must return one of the fields BlobName  or Stream  .
		If the BlobName  field is specified, the data will be retrieved from external storage
		(Azure Storage) and the value of the Stream  field will be ignored. .Update  Procedure The procedure receives the following parameters (the names are fixed, the order does not matter): 
 The procedure receives the following parameters (the names are fixed, the order does not matter): @TenantId int  - tenant ID (only in a multitenant environment). @UserId bigint  - current user ID. @Name nvarchar(255)  - the recordset name. @Mime nvarchar(255)  - mime data type. @Stream varbinary(max)  - the data stream itself or null, if the data is stored in external storage. @BlobName nvarcvhar(max)  - the set name in external storage or null. The procedure must return a single set with the following fields (field names matter, order not important). 
 The procedure must return a single set with the following fields (field names matter, order not important). Id bigint  - data (image, attachment) ID. Token uniqueidentifier  - field for generating the access token. The data returned by this procedure will be returned to the client, who will need to add it to their data model. 
 The data returned by this procedure will be returned to the client, who will need to add it to their data model.  See also  Image  Control.  FileImage  Control.  UploadFile  Control.  File  Command.  files  section of the model.json  file. 

*** 
 Part: Views 
  Views Views can be written in XAML or HTML. The main language is XAML. 
 Views can be written in XAML or HTML. The main language is XAML. XAML views are a high-level markup view (similar to WPF and Silverlight
		technologies) and are translated into HTML to work with the current data mode. 
 XAML views are a high-level markup view (similar to WPF and Silverlight
		technologies) and are translated into HTML to work with the current data mode. The two-way binding (Binding) mechanism is used to bind the controls to the data.
		When you change the model data, the view is automatically updated and vice versa. 
 The two-way binding (Binding) mechanism is used to bind the controls to the data.
		When you change the model data, the view is automatically updated and vice versa. Unlike HTML, the XAML language is "hard", that is, invalid tags and rules 
		cause exceptions. This simplifies the work of the application programmer. 
 Unlike HTML, the XAML language is "hard", that is, invalid tags and rules 
		cause exceptions. This simplifies the work of the application programmer.  XAML  - XAML view 

*** 
 Part: Xaml views 
  Xaml views 

*** 
 Part: XAML language 
  XAML language  Listings  Markup extensions  . 

*** 
 Part: Markup extensions 
  Markup extensions  General information 

*** 
 Part: Controls 
  Controls Controls are used to enter, change or display data. 
 Controls are used to enter, change or display data.  Controls  Alert  -  alert panel.  Button  - button.  ChatItem  - chat item.  CheckBox  - check box.  Code  - source code.  ComboBox  - combo box list.  ComboBoxItem  - combo box list item.  DataGrid  - data table.  DataGridColumn  - data table column.  DataGridRowDetails  - data table row refining.  DatePicker  - date selection.  EmptyPanel  - panel for empty content.  FileImage  - image.  Graphics  - container for a graphic image.  Header  - header.  Image  - image.  Label  - label.  List  - list.  ListItem  - list item.  MenuItem  - menu item.  Pager  - pager (pagination).  PeriodPicker  - period selection.  PropertyGrid  - table of properties.  PropertyGridItem  - property table item.  Radio  - radio button.  Selector  - selector.  Separator  - separator.  StateCard  - card.  Static  - static text.  TabButton  - bookmark toolbar.  Table  - table.  TableCell  - table cell.  TableColumn  - table column.  TableMarkCell  - marker cell in table.  TableRow  - table row.  TextBox  - text editor.  TimePicker  - timing selector.  TreeView  - hierarchical list (tree).  TreeViewItem  - tree item.  UploadFile  - uploading a file to the server. 

*** 
 Part: Alert Control 
  Alert Control  All controls Represents a message panel. 
 Represents a message panel. Inherits:  : 
 Inherits:  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  Object  |  Content property. Content of the panel. Can be either plain text or a control (UIElementBase). 
 Style  |  AlertStyle  |  Display style. Possible values (the specific appearance depends on the user interface theme):
Default - (default) Regular panel.
Success - Success (green).
Warning - Warning (orange).
Info - Information (blue).
Danger - Error (red).
Dark - Dark.
Light - Light. 
 Icon  |  Icon  |  The icon to be displayed in front of the content. 
 DropShadow  |  ShadowStyle  |  Type of the shadow. 
 Base item properties 
 Name  Type  Description  Content  Object  Content property. Content of the panel. Can be either plain text or a control (  UIElementBase  ).  Style AlertStyle  Display style. Possible values (the specific appearance depends on the user interface theme): Default  - (default) Regular panel. Success  - Success (green). Warning  - Warning (orange). Info  - Information (blue). Danger  - Error (red). Dark  - Dark. Light  - Light.  Icon  Icon  The icon to be displayed in front of the content.  DropShadow  ShadowStyle  Type of the shadow.  Base item properties  Example XAML 
 XAML <Alert Content  = "An error occurred" Style  = "Danger" DropShadow  = "Shadow1" Icon  = "ErrorOutline" /> <Alert Content  = "Attention! Something happened" Style  = "Warning" DropShadow  = "Shadow1" Icon  = "WarningOutline" /> <Alert Content  = "Operation completed successfully" Style  = "Success" DropShadow  = "Shadow1" Icon  = "SuccessOutline" /> <Alert Style  = "Info" DropShadow  = "Shadow1" Icon  = "InfoOutline" > <Text> <Span>  More  information  about  the  problem </Span> <Hyperlink Block  = "True" >  Details... </Hyperlink> </Text> </Alert> Result 
 Result An error occurred Attention! Something happened Operation completed successfully More information about the problem 

*** 
 Part: Button Control 
  Button Control  All controls Represents a command button. 
 Represents a command button.  Inherits:  CommandControl  :  ContentControl  :  Control  :  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Style  |  ButtonStyle  |  Button style. If the property is a bind (Bind), then the value of the binding must be a lowercase string (for example 'warning', not 'Warning'); 
 Size  |  ControlSize  |  Button size. 
 Icon  |  Icon  |  Icon on a button. 
 IconAlign  |  IconAlign  |  The position of the icon on the button. Possible values:
Default - (default) left.
Left - left.
Top - top. 
 DropDown  |  UIElementBase  |  The dropdown item associated with the button. This is usually the DropDownMenu item. 
 Rounded  |  Boolean  |  Button with rounded corners. If the button has no text, but only an icon, then the button will be rounded. 
 Base item properties 
 Name  Type  Description  Style  ButtonStyle  Button style. If the property is a bind (  Bind  ),
					then the value of the binding must be a lowercase string (for example 'warning'  , not 'Warning'  );  Size  ControlSize  Button size.  Icon  Icon  Icon on a button.  IconAlign IconAlign  The position of the icon on the button. Possible values: Default  - (default) left. Left  - left. Top  - top.  DropDown  UIElementBase  The dropdown item associated with the button.
					This is usually the  DropDownMenu  item.  Rounded  Boolean  Button with rounded corners. If the button has no text, but only an icon, then the button will be rounded.  Base item properties 

*** 
 Part: ChatItem Control 
  ChatItem Control  All controls 

*** 
 Part: CheckBox Control 
  CheckBox Control  All controls Represents a checkbox. Usually associated with a boolean value in the model. 
 Represents a checkbox. Usually associated with a boolean value in the model.  Inherits:  CheckBoxBase  :  ValuedControl  :  Control  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 The object has no properties of its own. 
 Base item properties 
 Name  Type  Description  The object has no properties of its own.  Base item properties  Example Let the model have an , item that has a  property. 
 Let the model have an Element  , item that has a Checked  property. XAML 
 XAML <Grid Columns  = "1*, 1*" > <CheckBox Value  = "{Bind Element.Checked}" Label  = "checkbox" /> <Span Content  = "{Bind Element.Checked}" Align  = "Right" /> </Grid> Result 
 Result Checkbox false false  (function () {
			if (!window.Vue) return;
			var vm = new Vue({
				el: "#xaml-checkbox",
				data: {
					Checked: false
				}
			});
		})(); 

*** 
 Part: Code Control 
  Code Control  All controls Represents a text block for displaying the text of the program. Used primarily for debugging. 
 Represents a text block for displaying the text of the program. Used primarily for debugging. Inherits:  :
		 :  : 
 Inherits:  ContentControl  :  Control  :  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Mutliline  |  Boolean  |  Multiline item. 
 Height  |  Length  |  The text box height. 
 Base item properties 
 Name  Type  Description  Mutliline  Boolean  Multiline item.  Height  Length  The text box height.  Base item properties 

*** 
 Part: ComboBox Control 
  ComboBox Control  All controls Represents a drop-down selection list. 
 Represents a drop-down selection list.  Inherits:  ValuedControl  :  Control  :  UIElement  :  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Children  |  List<ComboBoxItems>  |  List content. Represents a list of the ComboBoxItem items. Can be static or dynamic. Can be static or dynamic. 
 ItemsSource  |  Array  |  Always a binding - Bind. The data source to display in the list. 
 DisplayProperty  |  String  |  Name of the property to be displayed when linking list items to objects. 
 ShowValue  |  Boolean  |  Display value instead of content in the list. 
 Align  |  TextAlign  |  Text alignment. 
 Style  |  ComboBoxStyle  |  Display style. Possible values:
Default - (by default) a regular list.
Hyperlink - display the list as a hyperlink. 
 Size  |  ControlSize  |  Item size. Possible values:
Default - (by default) regular list size.
Large - increased list size.
(other values of the ControlSize enumeration are not supported). 
 Base item properties 
 Name  Type  Description  Children  List<  ComboBoxItems  >  List content. Represents a list of the  ComboBoxItem  items. Can be static or dynamic.
					Can be static or dynamic.  ItemsSource  Array  Always a binding -  Bind  . The data source to display in the list.  DisplayProperty  String  Name of the property to be displayed when linking list items to objects.  ShowValue  Boolean  Display value instead of content in the list.  Align  TextAlign  Text alignment.  Style ComboBoxStyle  Display style. Possible values: Default  - (by default) a regular list. Hyperlink  - display the list as a hyperlink.  Size ControlSize  Item size. Possible values: Default  - (by default) regular list size. Large  - increased list size.  (other values of the ControlSize  enumeration are not supported).  Base item properties  Description The content of the dropdown list can be determined in three different ways: 
 The content of the dropdown list can be determined in three different ways:  Static content.  . In this case, the item must include a list of  ComboBoxItem  , items, for each of which the Content  and Value  properties are set. The ItemsSource  property is not specified.
				When you select an item, the Value  property is assigned the corresponding Value  from the item. The list displays the Content  property (or Value  , if it is set that ShowValue = true  ).  Binding to the list of objects  . In this case, the ItemsSource  binding is associated with an array of objects. The value will be the selected object. The list displays the property of the associated object,
				specified by the DisplayProperty  property.  Binding to a list of objects and value  . In this case, the ItemsSource  binding is also associated with an array of objects. But a single nested  ComboBoxItem  element is used to display and select values. The Content  and Value  properties of this element are bound to the required values of the array element. 

*** 
 Part: ComboBoxItem Control 
  ComboBoxItem Control  All controls Represents a single item of the  dropdown list. 
 Represents a single item of the  ComboBox  dropdown list.  Inherits:  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  String  |  Content property. Text content. 
 Value  |  Object  |  The value associated with the element. 
 Base item properties 
 Name  Type  Description  Content  String  Content property. Text content.  Value  Object  The value associated with the element.  Base item properties 

*** 
 Part: DataGrid Control 
  DataGrid Control  All controls Represents a table with data. Works only with a data source. Displays one row for each element
		of the data source array. Table columns are defined by a collection of nested
		 objects. 
 Represents a table with data. Works only with a data source. Displays one row for each element
		of the data source array. Table columns are defined by a collection of nested  DataGridColumn  objects. Together with the  component,
		the table supports sorting, filtering, pagination, and row grouping. 
 Together with the  CollectionView  component,
		the table supports sorting, filtering, pagination, and row grouping.  Inherits:  Control  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 ItemsSource  |  Array  |  Always a binding - Bind. The source of data to display. 
 Compact  |  Boolean  |  Compact table display style. 
 Hover  |  Boolean  |  Highlighting a row on mouse hover. 
 Striped  |  Boolean  |  Coloring the table "with stripes" with highlighting even and odd rows. 
 FixedHeader  |  Boolean  |  Fix the table header when scrolling. 
 Style  |  DataGridStyle  |  Table display style. Possible values:
Default - (by default) regular style.
Light - light style. 
 Background  |  BackgroundStyle  |  Background color. 
 Mark  |  Object  |  Bind (Bind) only. Table row marking. A marker is a vertical line in the left column and/or a color highlight. Details below. 
 MarkerStyle  |  RowMarkerStyle  |  The style of marking a row in a table. Possible values:
None - (by default) no marking.
Row - background color.
Marker - marker in the form of a line in the first column.
Both - both types of marking. 
 EmptyPanel  |  UIElement  |  The panel that is displayed if the content is empty. Usually an EmptyPanel object. 
 DoubleClick  |  BindCmd  |  The command to be executed when you double-click on a row in the table. Don't forget to pass an argument to the command. 
 ContextMenu  |  DropDownMenu  |  The context menu that will be displayed upon the right mouse-click. 
 RowDetails  |  DataGridRowDetails  |  Detailing for a string. 
 AutoSelect  |  AutoSelectMode  |  Automatically highlight an item after loading or refreshing the list. Only the FirstItem and LastItem values are supported. . 
 Base item properties 
 Name  Type  Description  ItemsSource  Array  Always a binding -  Bind  . The source of data to display.  Compact  Boolean  Compact table display style.  Hover  Boolean  Highlighting a row on mouse hover.  Striped  Boolean  Coloring the table "with stripes" with highlighting even and odd rows.  FixedHeader  Boolean  Fix the table header when scrolling.  Style DataGridStyle  Table display style. Possible values: Default  - (by default) regular style. Light  - light style.  Background  BackgroundStyle  Background color.  Mark  Object  Bind (  Bind  ) only. Table row marking. A marker is 
					a vertical line in the left column and/or a color highlight. Details below.  MarkerStyle RowMarkerStyle  The style of marking a row in a table. Possible values: None  - (by default) no marking. Row  - background color. Marker  - marker in the form of a line in the first column. Both  - both types of marking.  EmptyPanel  UIElement  The panel that is displayed if the content is empty. Usually an  EmptyPanel  object.  DoubleClick  BindCmd  The command to be executed when you double-click on a row in the table. 
					Don't forget to pass an argument to the command.  ContextMenu  DropDownMenu  The context menu that will be displayed upon the right mouse-click.  RowDetails  DataGridRowDetails  Detailing for a string.  AutoSelect  AutoSelectMode  Automatically highlight an item after loading or refreshing the list.
					Only the FirstItem  and LastItem  values are supported.
					.  Base item properties  Marking of the table rows The binding expression for the  property must return a text string, which is an 
		additional CSS class to add to the string. The default theme supports the following row markings: 
 The binding expression for the Mark  property must return a text string, which is an 
		additional CSS class to add to the string. The default theme supports the following row markings: value Mark "Marker" "Row" "danger", "red", "error" #fc7c7c #fff5fa "warning", "yellow" #ffd700 #fffff0 "success", "green" #89e489 #f5fff5 "info", "cyan" #72eaea #f0ffff 

*** 
 Part: DataGridColumn Control 
  DataGridColumn Control  All controls Represents one column of the  table. 
 Represents one column of the  DataGrid  table. Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  Bind  |  Content property. Bind (Bind)only. Table cell content. 
 Header  |  String  |  Column heading. 
 Width  |  Length  |  Column width. 
 Fit  |  Boolean  |  Set column width to content. 
 Wrap  |  WrapMode  |  Wrap mode for cell content and heading. 
 Align  |  TextAlign  |  Horizontal alignment of the cell content. 
 Bold  |  Boolean  |  Display cell content in semi-bold font. 
 Small  |  Boolean  |  Display the cell content in a smaller font. 
 Mark  |  Object  |  Bind (Bind) only. Table cell marking. 
 Icon  |  Icon  |  The icon that will be displayed in the table before the content. 
 Editable  |  Boolean  |  Whether editing of the cell is allowed. 
 ControlType  |  ColumnControlType  |  Type of the control in the table cell. 
 Sort  |  Boolean?  |  Whether sorting is allowed in this column. Allows you to individually override the sorting for each column. The overall sorting resolution is set by the Sort property of the entire DataGrid table. 
 SortProperty  |  String  |  Name of the property in the data source to sort by. If not specified, sorting will be performed by the Content property. 
 If  |  Boolean?  |  Include a column in the render stream. Bind (Bind) is used to display/hide columns depending on conditions.. 
 Command  |  BindCmd  |  Command for a table cell. If a command is specified, the Content will be displayed as a hyperlink with the associated command. 
 Role  |  ColumnRole  |  The role of the column. Sets a specific set of properties for predefined column types. Possible values:
Default - (by default). Nothing is set.
Number - Displaying the identifier. Width to content, right alignment, no wrapping (Fit="True" Align="Right" Wrap="NoWrap").
Number - Number display. Width to content, right alignment, no wrapping (Fit="True" Align="Right" Wrap="NoWrap").
Date - Date display. Width to content, right alignment, no wrapping (Fit="True" Align="Center" Wrap="NoWrap"). 
 Name  Type  Description  Content  Bind  Content property. Bind (  Bind  )only. Table cell content.  Header  String  Column heading.  Width  Length  Column width.  Fit  Boolean  Set column width to content.  Wrap  WrapMode  Wrap mode for cell content and heading.  Align  TextAlign  Horizontal alignment of the cell content.  Bold  Boolean  Display cell content in semi-bold font.  Small  Boolean  Display the cell content in a smaller font.  Mark  Object  Bind (  Bind  ) only. Table cell marking.  Icon  Icon  The icon that will be displayed in the table before the content.  Editable  Boolean  Whether editing of the cell is allowed.  ControlType  ColumnControlType  Type of the control in the table cell.  Sort  Boolean?  Whether sorting is allowed in this column. Allows you to individually override the sorting for each column. The overall sorting resolution
					is set by the Sort  property of the entire  DataGrid  table.  SortProperty  String  Name of the property in the data source to sort by. If not specified, sorting will be
					performed by the Content  property.  If  Boolean?  Include a column in the render stream. Bind  (  Bind  ) is used to display/hide 
				columns depending on conditions..  Command  BindCmd  Command for a table cell. If a command is specified, the Content  will be displayed as a hyperlink with the associated command.  Role ColumnRole  The role of the column. Sets a specific set of properties for predefined column types. Possible values: Default  - (by default). Nothing is set. Number  - Displaying the identifier. Width to content, right alignment, no wrapping
							( Fit="True" Align="Right" Wrap="NoWrap"  ). Number  - Number display. Width to content, right alignment, no wrapping
							( Fit="True" Align="Right" Wrap="NoWrap"  ). Date  - Date display. Width to content, right alignment, no wrapping
							( Fit="True" Align="Center" Wrap="NoWrap"  ). 

*** 
 Part: DataGridRowDetails Control 
  DataGridRowDetails Control  All controls Represents a row detail element for a  table. 
 Represents a row detail element for a  DataGrid  table. Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  UIElementBase  |  Item content. 
 Visible  |  Boolean  |  Whether the item is visible. 
 Activate  |  RowDetailsActivate  |  When to activate detailing. Possible values:
ActiveRow - (by default) display for the selected row.
Cell - display a special cell with the ability to reveal details.
Always - always display. 
 Name  Type  Description  Content  UIElementBase  Item content.  Visible  Boolean  Whether the item is visible.  Activate RowDetailsActivate  When to activate detailing. Possible values: ActiveRow  - (by default) display for the selected row. Cell  - display a special cell with the ability to reveal details. Always  - always display. 

*** 
 Part: DatePicker Control 
  DatePicker Control  All controls Represents a date selector. 
 Represents a date selector.  Inherits:  ValuedControl  :  Control  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Align  |  TextAlign  |  Text alignment. 
 View  |  DatePickerView  |  Type of selector. Possible values:
Day - (by default) date selection.
Month - month and year selection. 
 Placement  |  DropDownPlacement  |  The direction of the selector’s "dropout". Possible values:
BottomLeft - downwards with the left edge fixed.
BottomRight - downwards with the right edge fixed.
TopLeft - upwards with the left edge fixed.
TopRight - upwards with the right edge fixed. 
 Size  |  ControlSize  |  Element size. Possible values:
Default, Normal - (by default) element of normal size.
Large - increased element size.
(other values of the ControlSize listing are not supported). 
 YearCutOff  |  String  |  Only for manual input. Limit for two-digit values of the year. Two-digit number. If it starts with "+" or "-", then the number is considered regarding the current year. If the entered value is less than or equal to the limit, then this is the 21st century, otherwise the 20th. 
 Base item properties 
 Name  Type  Description  Align  TextAlign  Text alignment.  View DatePickerView  Type of selector. Possible values: Day  - (by default) date selection. Month  - month and year selection.  Placement DropDownPlacement  The direction of the selector’s "dropout". Possible values: BottomLeft  - downwards with the left edge fixed. BottomRight  - downwards with the right edge fixed. TopLeft  - upwards with the left edge fixed. TopRight  - upwards with the right edge fixed.  Size ControlSize  Element size. Possible values: Default, Normal  - (by default) element of normal size. Large  -  increased element size.  (other values of the ControlSize  listing are not supported).  YearCutOff String  Only for manual input. Limit for two-digit values of the year. Two-digit number. If it starts with 
						"+" or "-", then the number is considered regarding the current year. If the entered value is less 
						than or equal to the limit, then this is the 21st century, otherwise the 20th.  Base item properties  Example Enter a date Choose a period When the date is changed, the time will not change. This allows you to enter the date and time using the two
			controls -  and . 
 Note!  When the date is changed, the time will not change. This allows you to enter the date and time using the two
			controls -  TimePicker  and DatePicker  .  (function () {
	if (!window.Vue) return;
	var du = require('std:utils').date;
	var vm = new Vue({
		el: "#xaml-datepicker",
		data: {
			Document: {
				Date: du.today()
			}
		},
		created: function () {
		}
	});
})(); 

*** 
 Part: EmptyPanel Control 
  EmptyPanel Control  All controls Represents a panel with an icon that is displayed inside another element if it is empty. 
 Represents a panel with an icon that is displayed inside another element if it is empty. Usually used with the  property of the 
		table or the  . 
 Usually used with the EmptyPanel  property of the  DataGrid  table or the  List  .  Inherits:  ContentControl  :  Control  :  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Icon  |  Icon  |  Panel icon. 
 Base item properties 
 Name  Type  Description  Icon  Icon  Panel icon.  Base item properties  Example XAML 
 XAML <EmptyPanel Content  = "No documents matching the filter conditions" Icon  = "File" /> Result 
 Result No documents matching the filter conditions 

*** 
 Part: FileImage Control 
  FileImage Control  All controls Represents an image with the possibility of binding to data. 
 Represents an image with the possibility of binding to data.  Read more about working with binary objects... Inherits: 
 Inherits:  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Url  |  String  |  Image URL. Must refer to the files section of the model description file. 
 Value  |  Bind  |  Binds to the field that determines the image identifier. 
 Width  |  Length  |  Image width. 
 Height  |  Length  |  Image height. 
 Base properties 
 Name  Type  Description  Url  String  Image URL. Must refer to the  files  section of the model description file.  Value  Bind  Binds to the field that determines the image identifier.  Width  Length  Image width.  Height  Length  Image height.  Base properties  Specific features Most often only one of the properties of  or  
		is set. In this case, the picture will save the proportions. 
 Most often only one of the properties of Width  or Height  is set. In this case, the picture will save the proportions. 

*** 
 Part: Graphics Control 
  Graphics Control  All controls Represents a place to draw graphics. The drawing itself is executed 
		programmatically using a . 
 Represents a place to draw graphics. The drawing itself is executed 
		programmatically using a  delegate  . Inherits: 
 Inherits:  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Delegate  |  String  |  Name of the delegate, which will be called to draw graphics. 
 Argument  |  Object  |  Argument (usually it is Bind), which will be passed to the delegate. 
 CenterContent  |  Boolean  |  Whether to align the content. 
 Watch  |  WatchMode  |  Change tracking mode when changing the value of the argument. Possible values:
None - (by default) do not track.
Watch - call a delegate only when changing the argument.
Deep - call a delegate when changing the argument or when changing in any of its nested properties (recursively) 
 Height  |  Length  |  Element height. By default Auto. 
 Base item properties 
 Name  Type  Description  Delegate  String  Name of the  delegate  , which will be called 
				to draw graphics.  Argument  Object  Argument (usually it is  Bind  ),
					which will be passed to the delegate.  CenterContent  Boolean  Whether to align the content.  Watch WatchMode  Change tracking mode when changing the value of the argument. Possible values: None  - (by default) do not track. Watch  - call a delegate only when changing the argument. Deep  - call a delegate when changing the argument or when 
							changing in any of its nested properties (recursively)  Height  Length  Element height. By default Auto  .  Base item properties  Delegate format  draw  ( this  : IRoot  ,  chart  : object  ,  arg  : any  ,  node  :  DOMElement  )  : void  Arguments: chart  - library object d3.js  . arg  - argument described in the markup. node  - DOM node, associated with the item. Usually it is required to draw graphics executed once. However, in some cases, the element
		associated with graphics may vary.
		
		You can set the change tracking mode using the .
		property. Do not install  mode without need, because this leads to a decrease in the speed 
		of operation. 
 Note!  Usually it is required to draw graphics executed once. However, in some cases, the element
		associated with graphics may vary.  You can set the change tracking mode using the Watch  .
		property. Do not install Deep  mode without need, because this leads to a decrease in the speed 
		of operation. 

*** 
 Part: GridDivider Control 
  GridDivider Control  All controls Represents a visual separator in the  table. 
		The column (or string) to place the separator is recommended to make a 1px width. 
 Represents a visual separator in the  Grid  table. 
		The column (or string) to place the separator is recommended to make a 1px width. Inherits: 
 Inherits:  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Object does not have its own properties. 
 Base item properties 
 Name  Type  Description  Object does not have its own properties.  Base item properties 

*** 
 Part: Header Control 
  Header Control  All controls Represents a header. 
 Represents a header. Inherits:  :  : 
 Inherits:  UIContentElement  :  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Bold  |  Boolean?  |  Semi-bold font. 
 Align  |  TextAlign  |  Horizontal text alignment. 
 Size  |  ControlSize  |  Header size. 
 Badge  |  String  |  Text badge on the title. Certainly, it may be binding. 
 Base item properties 
 Name  Type  Description  Bold  Boolean?  Semi-bold font.  Align  TextAlign  Horizontal text alignment.  Size  ControlSize  Header size.  Badge  String  Text badge on the title. Certainly, it may be binding.  Base item properties  Example XAML 
 XAML <Header Content  = "Large header" Size  = "Large" Badge  = "42" /> <Header Content  = "Medium header" Size  = "Normal" /> <Header Content  = "Small header" Size  = "Small" /> <Header Content  = "Mini header" Size  = "Mini" /> Result 
 Result Large header 42  Medium header  Small header  Mini header 

*** 
 Part: Image Control 
  Image Control  All controls Represents an image with the possibility of binding to data. 
 Represents an image with the possibility of binding to data.  Read more about working with binary objects Inherits: 
 Inherits:  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Base  |  String  |  The URL of the model from which the image will be received. 
 Source  |  Bind  |  Always binding. Binds to the field that defines the identifier of the picture. 
 Width  |  Length  |  Image width. 
 Height  |  Length  |  Image height. 
 ReadOnly  |  Boolean  |  Disable image loading. 
 Limit  |  Int32  |  The maximum size of the loaded image (in KB). 
 Placeholder  |  String  |  Prompt. Displayed if the image is not selected. 
 Icon  |  Icon  |  Icon. Displayed with the Placeholder placeholder if the image is not selected. 
 Base item properties 
 Name  Type  Description  Base  String  The URL of the model from which the image will be received.  Source  Bind  Always binding. Binds to the field that defines the identifier of the picture.  Width  Length  Image width.  Height  Length  Image height.  ReadOnly  Boolean  Disable image loading.  Limit  Int32  The maximum size of the loaded image (in KB).  Placeholder  String  Prompt. Displayed if the image is not selected.  Icon  Icon  Icon. Displayed with the Placeholder  placeholder if the image is not selected.  Base item properties  Specific features Most often, only one of the  or  properties is set.
		In this case, the picture will keep the aspect ratio. 
 Most often, only one of the Width  or Height  properties is set.
		In this case, the picture will keep the aspect ratio.  Example control is used to simultaneously display and load an image using 
		a simplified approach. 
Image  control is used to simultaneously display and load an image using 
		a simplified approach. property must refer to a property of the model, which represents an object with two fields
		( and ).
		The name of this property will define the suffix for the stored procedures that will be 
		called to get or write the actual image bytes. 
Source  property must refer to a property of the model, which represents an object with two fields
		( Id!!Id  and Token!!Token  ).
		The name of this property will define the suffix for the stored procedures that will be 
		called to get or write the actual image bytes. property must refer to the complete model (the one specified in the
		root of the  file). 
Base  property must refer to the complete model (the one specified in the
		root of the model.json  file). XAML markup sample: 
 XAML markup sample: <Image Base  = "/catalog/product" Source  = "{Bind Product.Image}" Height  = "200px" /> File fragment 
 File fragment /catalog/product/model.json  { "schema"  : "a2"  , "model"  : "Product"  } Data model fragment 
 Data model fragment  { "Product"  :  { "Id"  : 42  , "Image"  :  { "Id"  : 112233  , "Token"  : "hXFVVdnZRnZ5HKwNStO2qSSip_ziQ-IEnjVVQzyKzC8"  }  }  }  Getting an image To get the image, the system will call the stored procedure
		, passing the 
		 object ID as the @Id parameter. The Name Image
		in the name of the procedure corresponds to the name of the property. 
		The access token will be verified on the server (it is not passed 
		to the procedure). If it does not match the rules, then the procedure 
		will not be called at all. 
 To get the image, the system will call the stored procedure a2.[Product.Image.Load]  , passing the Image  object ID as the @Id parameter. The Name Image
		in the name of the procedure corresponds to the name of the property. 
		The access token will be verified on the server (it is not passed 
		to the procedure). If it does not match the rules, then the procedure 
		will not be called at all.  Loading an image When the image is uploaded to the server, the system will call the
		stored procedure . The procedure 
		will return an image ID and a new access token, which will be 
		updated in the model. 
 When the image is uploaded to the server, the system will call the
		stored procedure a2.[Product.Image.Update]  . The procedure 
		will return an image ID and a new access token, which will be 
		updated in the model. 

*** 
 Part: Label Control 
  Label Control  All controls Represents the text label of the control (the same one that
		appears in the control with the specified  property). 
 Represents the text label of the control (the same one that
		appears in the control with the specified Label  property). Inherits:  : 
 Inherits:  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  String  |  Content property. Label text. 
 Align  |  TextAlign  |  Text alignment. 
 Required  |  Boolean  |  Required value to enter. Note that this is only a visual representation of the required input in the input field (the specific look depends on the user interface theme). Use the template validators to manage checks. 
 Size  |  ControlSize  |  Item size. Possible values:
Default, Normal - (by default) regular item size.
Large - increased item size.
(the rest of the ControlSize enumeration values are not supported). 
 Base item properties 
 Name  Type  Description  Content  String  Content property. Label text.  Align  TextAlign  Text alignment.  Required  Boolean  Required value to enter. Note that this is only a visual representation
					of the required input in the input field (the specific look depends on the
					user interface theme). Use the  template validators  to manage checks.  Size ControlSize  Item size. Possible values: Default, Normal  - (by default) regular item size. Large  - increased item size.  (the rest of the ControlSize  enumeration values are not supported).  Base item properties 

*** 
 Part: List Control 
  List Control  All controls Represents a list of items (with the possibility of selection). The content is
		usually the  list of the items. 
 Represents a list of items (with the possibility of selection). The content is
		usually the  ListItem  list of the items.  Inherits:  Control  :  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  UIElementCollection  |  Content property. List content. 
 ItemsSource  |  Array  |  Always a binding - Bind. The source of data to display in the list. 
 Style  |  ListStyle  |  List display style. 
 Background  |  BackgroundStyle  |  List background style. 
 Border  |  Boolean  |  Whether to display a frame around the list. 
 BorderStyle  |  BorderStyle  |  The style of the border around the item. 
 Striped  |  Boolean  |  Coloring the list "with stripes" with highlighting of even and non-odd items. 
 Flush  |  Boolean  |  Removes the line after the last item in the list (only for the Underlined style).). 
 AutoSelect  |  AutoSelectMode  |  Automatically highlight items after loading or refreshing the list. 
 Height  |  Length  |  List height. 
 MaxHeight  |  Length  |  The maximum height of the list. If the list is larger, a vertical scrollbar appears. 
 Select  |  Boolean?  |  Whether selection of items in the list is allowed. 
 Mark  |  Object  |  Bind (Bind) only. List item marking. The marker is a vertical line to the left of the element. Details below. 
 MarkerStyle  |  RowMarkerStyle  |  The style of marking an item in the list. Possible values:
None - (by default) no marking.
Row - background color.
Marker - marker in the form of a strip on the left.
Both - both types of marking. 
 EmptyPanel  |  UIElement  |  The panel that is displayed if the content is empty. Usually an EmptyPanel object. 
 DoubleClick  |  BindCmd  |  The command that will be executed when you double-click on an item in the list. Don't forget to pass an argument to the command. 
 Base item properties 
 Name  Type  Description  Content  UIElementCollection  Content property. List content.  ItemsSource  Array  Always a binding -  Bind  . The source of data to display in the list.  Style  ListStyle  List display style.  Background  BackgroundStyle  List background style.  Border  Boolean  Whether to display a frame around the list.  BorderStyle  BorderStyle  The style of the border around the item.  Striped  Boolean  Coloring the list "with stripes" with highlighting of even and non-odd items.  Flush  Boolean  Removes the line after the last item in the list (only for the Underlined  style).).  AutoSelect  AutoSelectMode  Automatically highlight items after loading or refreshing the list.  Height  Length  List height.  MaxHeight  Length  The maximum height of the list. If the list is 
					larger, a vertical scrollbar appears.  Select  Boolean?  Whether selection of items in the list is allowed.  Mark  Object  Bind (  Bind  ) only. List item marking. 
					The marker is a vertical line to the left of the element. Details below.  MarkerStyle RowMarkerStyle  The style of marking an item in the list. Possible values: None  - (by default) no marking. Row  - background color. Marker  - marker in the form of a strip on the left. Both  - both types of marking.  EmptyPanel  UIElement  The panel that is displayed if the content is empty. Usually an  EmptyPanel  object.  DoubleClick  BindCmd  The command that will be executed when you double-click on an item in the list. 
					Don't forget to pass an argument to the command.  Base item properties  List item marking The binding expression for the  property must return a text string, which is an additional 
		CSS class to add to the list item. The by default theme supports the following options for marking list items: 
 The binding expression for the Mark  property must return a text string, which is an additional 
		CSS class to add to the list item. The by default theme supports the following options for marking list items: value Mark "Marker" "Row" "danger", "red", "error" #fc7c7c #fff5fa "warning", "yellow" #ffd700 #fffff0 "success", "green" #89e489 #f5fff5 "info", "cyan" #72eaea #f0ffff 

*** 
 Part: ListItem Control 
  ListItem Control  All controls Represents a single list item. Usually used inside a  container. 
 Represents a single list item. Usually used inside a  List  container. Inherits:  : 
 Inherits:  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  Object  |  Content property. List item text. Can be either plain text or a control (UIElementBase). 
 Header  |  Object  |  List item header. Can be either plain text or a control (UIElementBase). 
 Footer  |  Object  |  List item footer. Can be either plain text or a control (UIElementBase). 
 Icon  |  Icon  |  The icon that will be displayed in the list item. 
 CommandBar  |  CommandBar  |  The command bar associated with the list item. 
 Command  |  BindCmd  |  Command for a list item. It will be executed when clicking on a list item. Please note that using the command in conjunction with the CommandBar does not make sense. It will not be possible to press a button inside the command bar. 
 Base item properties 
 Name  Type  Description  Content  Object  Content property. List item text. Can be either plain 
					text or a control (  UIElementBase  ).  Header  Object  List item header. Can be either plain text or a control
					(  UIElementBase  ).  Footer  Object  List item footer. Can be either plain text or a control
					(  UIElementBase  ).  Icon  Icon  The icon that will be displayed in the list item.  CommandBar  CommandBar  The command bar associated with the list item.  Command  BindCmd  Command for a list item. It will be executed when clicking on a list item.
					Please note that using the command in conjunction with the CommandBar  does not make sense. It will not be possible to press a button inside the command bar.  Base item properties 

*** 
 Part: MenuItem Control 
  MenuItem Control  All controls Represents a menu item. Usually located in a  container. 
 Represents a menu item. Usually located in a  DropDownMenu  container.  Inherits:  CommandControl  :  ContentControl  :  Control  :  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Icon  |  Icon  |  Icon item. 
 Separator  |  SeparatorMode  |  Associated separator. Possible values:
None - (by default) none.
Before - add a separator before the menu item.
After - add a separator after the menu item. 
 Base item properties 
 Name  Type  Description  Icon  Icon  Icon item.  Separator SeparatorMode  Associated separator. Possible values: None  - (by default) none. Before  - add a separator before the menu item. After  - add a separator after the menu item.  Base item properties  Example XAML 
 XAML <Button Content  = "File" Style  = "Primary" > <Button.DropDown> <DropDownMenu Direction  = "DownRight" Separate  = "True" > <MenuItem Content  = "File" Icon  = "File" /> <MenuItem Content  = "Save" Icon  = "Save" /> <MenuItem Content  = "Exit" Icon  = "Exit" Separator  = "Before" /> </DropDownMenu> </Button.DropDown> </Button> Result 
 Result  File Open Save Exit  (function () {
	if (!window.Vue) return;
	var vm = new Vue({
		el: "#xaml-menuitem",
		methods: {
			click() {

			}
		},
		created: function () {
		}
	});
})(); 

*** 
 Part: Pager Control 
  Pager Control  All controls Represents an item for page navigation. Typically used for the entire
		 and set as the  property. 
 Represents an item for page navigation. Typically used for the entire  Page  and set as the Pager  property. The component itself does not use any collections. For this, the 
	 component is always used. 
 The component itself does not use any collections. For this, the  CollectionView  component is always used.  Inherits:  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Source  |  Object  |  Source collection. Always a binding. If used in conjunction with a CollectionView, then the binding will be Source="{Bind Parent.Pager}" 
 Style  |  PagerStyle  |  Display style. Possible values:
Default - (by default) regular buttons.
Rounded - round buttons. 
 EmptyText  |  String  |  The text that will be displayed on the right side of the item if the collection is empty. If not specified, the text "no items" is displayed (based on the current localization). 
 TemplateText  |  String  |  The text to be displayed on the right side of the element. Macros are allowed in the text:
#[Start]	Number of the first item on the page.
#[End]	Number of the last item on the page.
#[Count]	Quantity of the items in the collection.
If the property is not specified, the text "elements #[Start]-#[End] from #[Count]" is displayed (based on the current localization). 
 Base item properties 
 Name  Type  Description  Source  Object  Source collection. Always a binding. If used in conjunction with a  CollectionView  ,
					then the binding will be Source="{Bind Parent.Pager}"  Style PagerStyle  Display style. Possible values: Default  - (by default) regular buttons. Rounded  - round buttons.  EmptyText  String  The text that will be displayed on the right side of the item if the collection is empty.
					If not specified, the text  "no items"  is displayed (based on the current localization).  TemplateText  String  The text to be displayed on the right side of the element. Macros are allowed in the text: 
[Table]
 #[Start]  |  Number of the first item on the page. 
 #[End]  |  Number of the last item on the page. 
 #[Count]  |  Quantity of the items in the collection. 
 #[Start]  Number of the first item on the page.  #[End]  Number of the last item on the page.  #[Count]  Quantity of the items in the collection.  If the property is not specified, the text  "elements #[Start]-#[End] from #[Count]"  is displayed 
					(based on the current localization).  Base item properties  Example Just a display example (non-functional) 
 Just a display example (non-functional)  1  2  3 elements: - from 

*** 
 Part: PeriodPicker Control 
  PeriodPicker Control  All controls Represents a period selector. 
 Represents a period selector. The  property must always be associated with an instance of the  class. 
 The Value  property must always be associated with an instance of the TPeriod  class.  Inherits:  ValuedControl  :  Control  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Align  |  TextAlign  |  Text alignment. 
 Placement  |  DropDownPlacement  |  The direction of the selector’s "dropout". Possible values:
BottomLeft - (by default) downwards with the left edge fixed
BottomRight - downwards with the right edge fixed.
TopLeft - upwards with the left edge fixed.
TopRight - upwards with the right edge fixed. 
 Style  |  PeriodPickerStyle  |  Selector type. Possible values:
Default - (by default) regular selector.
Hyperlink - display as a hyperlink. 
 Display  |  DisplayMode  |  Display the period in the selector’s header. Possible values:
Date - (by default) dates only.
Name - the period name.
NameDate - the period and date name. 
 ShowAllData  |  Boolean  |  Whether to show the "For all time" menu item. 
 Size  |  ControlSize  |  Item size. In the current version, only supported for the Hyperlink style. Possible values::
Default - (by default) regular size hyperlink.
Large - hyperlink size increased.
(the rest of the ControlSize enumeration values are not supported). 
 Base item properties 
 Name  Type  Description  Align  TextAlign  Text alignment.  Placement DropDownPlacement  The direction of the selector’s "dropout". Possible values: BottomLeft  - (by default) downwards with the left edge fixed BottomRight  - downwards with the right edge fixed. TopLeft  - upwards with the left edge fixed. TopRight  - upwards with the right edge fixed.  Style PeriodPickerStyle  Selector type. Possible values: Default  - (by default) regular selector. Hyperlink  - display as a hyperlink.  Display DisplayMode  Display the period in the selector’s header. Possible values: Date  - (by default) dates only. Name  -  the period name. NameDate  - the period and date name.  ShowAllData  Boolean  Whether to show the "For all time" menu item.  Size ControlSize  Item size. In the current version, only supported for the Hyperlink  style. Possible values:: Default  - (by default) regular size hyperlink. Large  - hyperlink size increased.  (the rest of the ControlSize  enumeration values are not supported).  Base item properties  Example Select period 05/28/2025 Selected 05/28/2025  (function () {
			var p = require('std:period');
			var vm = new Vue({
				el: "#xaml-periodpicker",
				data: {
					Document: {
						Period: p.create('today')
					}
				},
				created: function () {
				}
			});
		})(); 

*** 
 Part: PropertyGrid Control 
  PropertyGrid Control  All controls Represents a table of properties. 
 Represents a table of properties. Inherits:  : 
 Inherits:  UIElement  :  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Children  |  PropertyGridItems  |  Content property. Collection of children items PropertyGridItem. 
 ItemsSource  |  Array  |  Always the bind (Bind). Data source for getting children. 
 Style  |  PropertyGridStyle  |  Table display style. Possible values:
Default - plain table.
Compact - compact table (corresponds Compact = "True").
Small - Miniature table. Usually used inside other tables. 
 Compact  |  Boolean  |  Compact table display style. 
 Striped  |  Boolean  |  Coloring the table "with stripes" with highlighting even and odd rows. 
 NoWrapName  |  Boolean  |  Prevent hyphenation of property names. 
 GridLines  |  GridLinesVisibility  |  Grid Displaying. Possible values:
None - by default.
Horizontal - horizontal lines.
Vertical - vertical lines.
Both - grid 
 TestId  |  String  |  Item ID for testing tools. 
 Base item properties 
 Name  Type  Description  Children PropertyGridItems  Content property. Collection of children items  PropertyGridItem  .  ItemsSource  Array  Always the bind (  Bind  ). Data source for getting children.  Style PropertyGridStyle  Table display style. Possible values: Default  - plain table. Compact  - compact table (corresponds Compact = "True"  ). Small  - Miniature table. Usually used inside other tables.  Compact  Boolean  Compact table display style.  Striped  Boolean  Coloring the table "with stripes" with highlighting even and odd rows.  NoWrapName  Boolean  Prevent hyphenation of property names.  GridLines GridLinesVisibility  Grid Displaying. Possible values: None  - by default. Horizontal  - horizontal lines. Vertical  - vertical lines. Both  - grid  TestId  String  Item ID for testing tools.  Base item properties  Example XAML 
 XAML <PropertyGrid GridLines  = "Horizontal" NoWrapName  = "True" > <PropertyGridItem Name  = "Identifier" Content  = "{Bind Document.Id}" /> <PropertyGridItem Name  = "Date Modified" Content  = "{Bind Document.Date, DataType=DateTime}" /> <PropertyGridItem Name  = "User Modified" Content  = "{Bind Document.User.Name}" /> </PropertyGrid> Result: 
 Result: 
[Table]
 Identifier  |  95053 
 Date Modified  |  17.08.2020 15:33 
 User Modified  |  System administrator 
 Identifier  95053  Date Modified  17.08.2020 15:33  User Modified  System administrator 

*** 
 Part: PropertyGridItem Control 
  PropertyGridItem Control  All controls Represents one item of the  property table. 
 Represents one item of the  PropertyGrid  property table. Inherits: 
 Inherits:  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  Object  |  Content property. Value of the property. Can be a string or the UIElementBase item.. 
 Name  |  String  |  Name of the property. 
 Bold  |  Boolean?  |  The value of the property will be displayed in bold. 
 HideEmpty  |  Boolean  |  Hide property strings with empty values. 
 Base item properties 
 Name  Type  Description  Content  Object  Content property. Value of the property. Can be a string or the  UIElementBase  item..  Name  String  Name of the property.  Bold  Boolean?  The value of the property will be displayed in bold.  HideEmpty  Boolean  Hide property strings with empty values.  Base item properties 

*** 
 Part: Radio Control 
  Radio Control  All controls Represents a radio button. 
 Represents a radio button.  Inherits:  CheckBoxBase  :  ValuedControl  :  Control  :  UIElement  :  UIElementBase A set of radio buttons is associated with a single value. Typically, such a set is located inside a
		 container, although this is not obligatory. 
 A set of radio buttons is associated with a single value. Typically, such a set is located inside a  FieldSet  container, although this is not obligatory.  Properties 
[Table]
 Name  |  Type  |  Description 
 CheckedValue  |  Scalar type (String, Number, и т.д.)  |  Obligatory. The value at which the button will be marked. Can be a binding. 
 Style  |  RadioButtonStyle  |  Button type. It can be displayed as a standard radio button or as a check box. Displaying as a checkbox is most commonly used in reports. 
 Base item properties 
 Name  Type  Description  CheckedValue  Scalar type  (String, Number, и т.д.)  Obligatory. The value at which the button will be marked. Can be a binding.  Style  RadioButtonStyle  Button type. It can be displayed as a standard radio button or as a check box. Displaying 
					as a checkbox is most commonly used in reports.  Base item properties  Example Suppose the model has an  item that has the  property. 
 Suppose the model has an Element  item that has the Option  property. XAML 
 XAML <Grid Columns  = "1*, 1*, 1*" AlignItems  = "Top" > <FieldSet> <Radio Label  = "Option 1" Value  = "{Bind Element.Option}" CheckedValue  = "1" /> <Radio Label  = "Option 2" Value  = "{Bind Element.Option}" CheckedValue  = "2" /> <Radio Label  = "Option 3" Value  = "{Bind Element.Option}" CheckedValue  = "3" /> </FieldSet> <FieldSet> <Radio Label  = "Option 1" Value  = "{Bind Element.Option}" Style  = "CheckBox" CheckedValue  = "1" /> <Radio Label  = "Option 2" Value  = "{Bind Element.Option}" Style  = "CheckBox" CheckedValue  = "2" /> <Radio Label  = "Option 3" Value  = "{Bind Element.Option}" Style  = "CheckBox" CheckedValue  = "3" /> </FieldSet> <Text>  Selected: <Span Bold  = "True" >  Option  1 </Span> </Text> </Grid> Result 
 Result Option 1 Option 2 Option 2 Option 1 Option 2 Option 2 Selected:  (function () {
		if (!window.Vue) return;
		var vm = new Vue({
			el: "#xaml-radio",
			data: {
				Option: 1
			}
		});
	})(); 

*** 
 Part: Selector Control 
  Selector Control  All controls Represents the universal selector. 
 Represents the universal selector.  Inherits:  ValuedControl  :  Control  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Delegate  |  String  |  Name of the delegate that will be called when the text is entered into the selector field. 
 SetDelegate  |  String  |  Name of the delegate, that will be called when selecting an item in the drop-down panel. If this delegate is specified, no assignments of the associated item will be performed. 
 TextValue  |  Object  |  Always a binding (Bind). Text binding. If it is specified, then when an item is selected in the list, the text will be passed to it, not the item itself. 
 Align  |  TextAlign  |  Text alignment. 
 Placeholder  |  String  |  Prompt. Displayed in an empty input field. Disappears when the input field receives focus. 
 Style  |  SelectorStyle  |  Selector display style. Possible values:
Default - (by default) regular selector.
ComboBox - selector in the form of a combined drop-down list. Filtering is not supported in this case.
Hyperlink - selector in the form of a hyperlink. Filtering is not supported in this case. 
 Size  |  ControlSize  |  Item size. Possible values:
Default - (by default) regular selector size.
Large - increased selector size.
(Other values of the ControlSize enumeration are not supported). 
 ItemsSource  |  Array  |  Always a binding - Bind. Data source to display in the list. 
 DisplayProperty  |  String  |  Name of the property of the base item that will be displayed in the selector. 
 PanelPlacement  |  DropDownPlacement  |  The direction of the selector selection panel "dropdown". Possible values:
BottomLeft - (by default) downwards with the left edge binding.
BottomRight - downwards with the right edge binding.
TopLeft - upwards with the left edge binding.
TopRight - upwards with the right edge binding. 
 ListSize  |  Size  |  Dimensions of the drop-down selector panel. 
 ItemsPanel  |  UIElementBase  |  Description of the drop-down panel. In the current version, only the DataGrid item is supported as a drop-down panel. If the item is not specified, a simple list of items is used. 
 NewPane  |  UIElementBase  |  Description of the panel for creating a new item. 
 CreateNewCommand  |  BindCmd  |  The command that will be executed when a new item is created. 
 ShowCaret  |  Boolean?  |  Show content opening icon. If the style of the selector is ComboBox, then the value is automatically set to True. 
 ShowClear  |  Boolean  |  Show clear content button. Clicking this button calls the $empty method for the associated item. 
 Base item properties 
 Name  Type  Description  Delegate  String  Name of the  delegate  that will be called when the text is entered into the selector field.  SetDelegate  String  Name of the  delegate  , that will be called when selecting an item in the drop-down panel. If this 
					delegate is specified, no assignments of the associated item will be performed.  TextValue  Object  Always a binding (  Bind  ). Text binding. If it is specified, then when an item is selected
					in the list, the text will be passed to it, not the item itself.  Align  TextAlign  Text alignment.  Placeholder  String  Prompt. Displayed in an empty input field. Disappears when the input field receives focus.  Style SelectorStyle  Selector display style. Possible values: Default  - (by default) regular selector. ComboBox  - selector in the form of a combined drop-down list. Filtering is not supported in this case. Hyperlink  - selector in the form of a hyperlink. Filtering is not supported in this case.  Size ControlSize  Item size. Possible values: Default  - (by default) regular selector size. Large  -  increased selector size.  (Other values of the ControlSize  enumeration are not supported).  ItemsSource  Array  Always a binding -  Bind  . Data source to display in the list.  DisplayProperty  String  Name of the property of the base item that will be displayed in the selector.  PanelPlacement DropDownPlacement  The direction of the selector selection panel "dropdown". Possible values: BottomLeft  - (by default) downwards with the left edge binding. BottomRight  - downwards with the right edge binding. TopLeft  - upwards with the left edge binding. TopRight  - upwards with the right edge binding.  ListSize  Size  Dimensions of the drop-down selector panel.  ItemsPanel  UIElementBase  Description of the drop-down panel. In the current version, only the  DataGrid  item is supported
					as a drop-down panel. If the item is not specified, a simple list of items is used.  NewPane  UIElementBase  Description of the panel for creating a new item.  CreateNewCommand  BindCmd  The command that will be executed when a new item is created.  ShowCaret  Boolean?  Show content opening icon. If the style of the selector is ComboBox  , then the value is automatically set to True  .  ShowClear  Boolean  Show clear content button. Clicking this button calls the $empty  method for the associated item.  Base item properties  Description The selector can work in two modes. Select from the list and search in the list/on the server. 
 The selector can work in two modes. Select from the list and search in the list/on the server. The first simply emulates a combo box ()
		with additional styling options for the selection window. In this case, the collection for selection
		( property) and the name of the property of the associated item
		( property) which should be displayed in the selector are specified. 
 The first simply emulates a combo box (  ComboBox  )
		with additional styling options for the selection window. In this case, the collection for selection
		( ItemsSource  property) and the name of the property of the associated item
		( DisplayProperty  property) which should be displayed in the selector are specified. In the second case, it is necessary to specify a delegate ( property)
		which will be called occasionally when entering text in the selector field. 
 In the second case, it is necessary to specify a delegate ( Delegate  property)
		which will be called occasionally when entering text in the selector field. It is possible to create a new item if nothing is found in the list. To do this, specify the
		 item creation panel and the  command.. 
 It is possible to create a new item if nothing is found in the list. To do this, specify the NewPane  item creation panel and the CreateNewCommand  command..  Search delegate format (Delegate)  fetch  ( this  : IRoot  ,  elem  : IElement  ,  text  : string  ,  all?  : boolean  )  :  [  ]  | Promise  Parameters: this  - data model root. elem  - the item associated with the selector. text  -  the text typed into the input field. all  - a sign that it is necessary to display all values from the list. Will be true  if the ShowCaret  property is set and the user opens the selection window with a button rather than typing in a field.  Returned value: The delegate should return an array of elements, or a  if the elements are fetched from the server. 
 The delegate should return an array of elements, or a Promise  if the elements are fetched from the server. What the delegate returned will be displayed in the selection panel. 
 What the delegate returned will be displayed in the selection panel.  Set delegate format (SetDelegate)  fetch  ( this  : IRoot  ,  elem  : IElement  )  : void  Parameters: this  - data model root. elem  - the set (selected in the list) item. 

*** 
 Part: Separator Control 
  Separator Control  All controls Represents the item separator. 
 Represents the item separator.  Inherits:  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 The object has no properties of its own. 
 Base item properties 
 Name  Type  Description  The object has no properties of its own.  Base item properties  Description The specific type of separator depends on the type of container. 
 The specific type of separator depends on the type of container. For example, in the 
		panel, the separator will be displayed as a vertical line between the buttons. 
 For example, in the  Toolbar  panel, the separator will be displayed as a vertical line between the buttons. And in the  
		panel with a horizontal orientation, inserting a separator will split the content 
		into two blocks. Everything before the separator will be aligned on the left side 
		of the panel, and after the separator - on the right. 
 And in the  StackPanel  panel with a horizontal orientation, inserting a separator will split the content 
		into two blocks. Everything before the separator will be aligned on the left side 
		of the panel, and after the separator - on the right. 

*** 
 Part: StateCard Control 
  StateCard Control  All controls 

*** 
 Part: Static Control 
  Static Control  All controls Represents a static label that looks like a forbidden text element. 
 Represents a static label that looks like a forbidden text element.  Inherits:  ValuedControl  :  Control  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Align  |  TextAlign  |  Text alignment. 
 Size  |  ControlSize  |  Item size. Possible values:
Default, Normal - (by default) regular item size.
Large - increased item size.
(Other ControlSize enumeration values are not supported 
 Base item properties 
 Name  Type  Description  Align  TextAlign  Text alignment.  Size ControlSize  Item size. Possible values: Default, Normal  - (by default) regular item size. Large  - increased item size.  (Other ControlSize  enumeration values are not supported  Base item properties  Example XAML 
 XAML <!-- simple static text --> <TextBox Value  = "Simply text" Label  = "Static text" /> Result 
 Result  Static text Simply text 

*** 
 Part: TabButton Control 
  TabButton Control  All controls Represents a single button in the  panel. 
 Represents a single button in the  TabBar  panel.  Inherits:  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  String | UIElementBase  |  The content (text) of the button. Can be a string or other item. 
 Description  |  String | UIElementBase  |  The content (text) of the button. Can be a string or other item. 
 ActiveValue  |  String  |  Active value. If the Value of the parent panel is equal to this value, then the button will be active (selected). 
 Base item properties 
 Name  Type  Description  Content  String |  UIElementBase  The content (text) of the button. Can be a string or other item.  Description  String |  UIElementBase  The content (text) of the button. Can be a string or other item.  ActiveValue  String  Active value. If the Value  of the parent panel is equal to this value, 
					then the button will be active (selected).  Base item properties 

*** 
 Part: Table Control 
  Table Control  All controls Represents a table. 
 Represents a table.  Inherits:  Control  :  UIElement  :  UIElementBase Content property: 
 Content property: Rows  Properties 
[Table]
 Name  |  Type  |  Description 
 Rows  |  Collection TableRow  |  Table body rows. 
 Header  |  Collection TableRow  |  Table header rows. 
 Footer  |  Collection TableRow  |  Table footer rows. 
 Columns  |  Collection TableColumn  |  Table columns. 
 ItemsSource  |  Array  |  Always a binding (Bind) Data source for retrieving the table body rows. 
 Border  |  Boolean  |  The frame around the table. 
 Compact  |  Boolean  |  Compact table display style. 
 Hover  |  Boolean  |  Highlighting a row upon mouse hover. 
 Striped  |  Boolean  |  Coloring of the table "with stripes" with highlighting of even and odd rows. 
 GridLines  |  GridLinesVisibility  |  Displaying the grid. Possible values:
None - by default.
Horizontal - horizontal lines.
Vertical - vertical lines.
Both - grid. 
 Background  |  TableBackgroundStyle  |  Background color. Possible values:
None - by default. Transparent background.
Paper - the color of the paper.
Yellow - pale yellow.
Cyan - pale blue.
Rose - pale pink.
WhiteSmoke - smoky. 
 CellSpacing  |  CellSpacingMode  |  Distance between cells. If specified, then each cell will be displayed separately. Possible values:
None - by default. None.
Small - small.
Medium - medium.
Large - large. 
 Base item properties 
 Name  Type  Description  Rows  Collection  TableRow  Table body rows.  Header  Collection  TableRow  Table header rows.  Footer  Collection  TableRow  Table footer rows.  Columns  Collection  TableColumn  Table columns.  ItemsSource  Array  Always a binding (  Bind  ) Data source for 
				retrieving the table body rows.  Border  Boolean  The frame around the table.  Compact  Boolean  Compact table display style.  Hover  Boolean  Highlighting a row upon mouse hover.  Striped  Boolean  Coloring of the table "with stripes" with highlighting of even and odd rows.  GridLines GridLinesVisibility  Displaying the grid. Possible values: None  - by default. Horizontal  - horizontal lines. Vertical  - vertical lines. Both  - grid.  Background TableBackgroundStyle  Background color. Possible values: None  - by default. Transparent background. Paper  - the color of the paper. Yellow  - pale yellow. Cyan  - pale blue. Rose  - pale pink. WhiteSmoke  - smoky.  CellSpacing CellSpacingMode  Distance between cells. If specified, then each cell will be displayed separately. Possible values: None  - by default. None. Small  - small. Medium  - medium. Large  - large.  Base item properties 

*** 
 Part: TableCell 
  TableCell  All controls Represents a table cell. 
 Represents a table cell.  Inherits:  UIContentElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 ItemsSource  |  Array  |  Always a binding (Bind). Data source to output multiple cells per row. 
 ColSpan  |  Int32?  |  Columns merging. 
 RowSpan  |  Int32?  |  Rows merging. 
 Bold  |  Boolean?  |  Semi-bold font. If not specified, inherits from the parent row. 
 Gray  |  Boolean  |  Gray text. The certain text color depends on the user interface theme. 
 Italic  |  Boolean?  |  Italic font. If not specified, inherits from the parent row. 
 Align  |  TextAlign  |  Horizontal text alignment. 
 VAlign  |  VerticalAlign  |  Vertical text alignment. 
 Base item properties 
 Name  Type  Description  ItemsSource  Array  Always a binding (  Bind  ). Data source to output multiple cells per row.  ColSpan  Int32?  Columns merging.  RowSpan  Int32?  Rows merging.  Bold  Boolean?  Semi-bold font. If not specified, inherits from the parent row.  Gray  Boolean  Gray text. The certain text color depends on the user interface theme.  Italic  Boolean?  Italic font. If not specified, inherits from the parent row.  Align  TextAlign  Horizontal text alignment.  VAlign  VerticalAlign  Vertical text alignment.  Base item properties 

*** 
 Part: TableColumn 
  TableColumn  All controls Represents one column of a table. 
 Represents one column of a table.  Properties 
[Table]
 Name  |  Type  |  Description 
 Width  |  Length  |  Column width. 
 Fit  |  Boolean  |  Set the width of the column to the content. 
 Background  |  ColumnBackgroundStyle  |  Column background color. 
 If  |  Boolean?  |  Can be a binding. Whether to include the column in the table. Please note that excluding a column also excludes all cells that are in it. 
 Name  Type  Description  Width  Length  Column width.  Fit  Boolean  Set the width of the column to the content.  Background  ColumnBackgroundStyle  Column background color.  If  Boolean?  Can be a binding. Whether to include the column in the table. Please note that excluding a 
				column also excludes all cells that are in it. 

*** 
 Part: TableMarkCell 
  TableMarkCell  All controls 

*** 
 Part: TableRow 
  TableRow  All controls Represents a table row. 
 Represents a table row.  Inherits:  UIElement  :  UIElementBase Content property: 
 Content property: Cells  Properties 
[Table]
 Name  |  Type  |  Description 
 Cells  |  Collection TableCell  |  A collection of cells in a row. 
 Align  |  TextAlign?  |  Horizontal alignment for all cells in the row. Can be redefined in each cell individually. 
 VAlign  |  VerticalAlign  |  Vertical text alignment. Can be redefined in each cell individually. 
 Mark  |  Object  |  Binding only. Row marking. Details below. 
 Base item properties 
 Name  Type  Description  Cells  Collection  TableCell  A collection of cells in a row.  Align  TextAlign?  Horizontal alignment for all cells in the row. Can be redefined in each cell individually.  VAlign  VerticalAlign  Vertical text alignment. Can be redefined in each cell individually.  Mark  Object  Binding only. Row marking. Details below.  Base item properties  Rows marking The binding expression for the property  should return
		a text string, which represents an additional CSS class to add to the line. 
		The default theme supports the following line markings: 
 The binding expression for the property Mark  should return
		a text string, which represents an additional CSS class to add to the line. 
		The default theme supports the following line markings: 
[Table]
 "danger", "error", "red"  |  Row content 
 "warning", "orange"  |  Row content 
 "success", "green"  |  Row content 
 "info", "cyan"  |  Row content 
"danger", "error", "red"  Row content "warning", "orange"  Row content "success", "green"  Row content "info", "cyan"  Row content You can use the  to add an additional marking element. 
 You can use the  TableMarkerCell  to add an additional marking element. Note! Marking is just adding the CSS class to the line. This means that you are not limited to just the options shown.
		For example, if the anchor property returns , then the row will be highlighted with a red 
		background and displayed in bold. 
 Note! Marking is just adding the CSS class to the line. This means that you are not limited to just the options shown.
		For example, if the anchor property returns "danger bold"  , then the row will be highlighted with a red 
		background and displayed in bold. 

*** 
 Part: TextBox 
  TextBox  All controls Represents a field for entering text. 
 Represents a field for entering text.  Inherits:  ValuedControl  :  Control  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Multiline  |  Boolean  |  Multi-line item. 
 AutoSize  |  Boolean  |  Automatically set item height based on content. For multiline elements only. 
 Rows  |  Int32?  |  Number of lines. For multiline items only. 
 Align  |  TextAlign  |  Text alignment 
 Password  |  Boolean  |  Password input field. Placeholders are displayed instead of text. Copying text from the field is not possible. 
 Number  |  Boolean  |  Only numbers and a minus sign ('-') are allowed in the field. 
 Placeholder  |  String  |  Prompt. Displayed in an empty input field. Disappears when the input focus is received by the field. 
 SpellCheck  |  Boolean?  |  Whether to check for spelling errors. By default - depends on browser settings. 
 UpdateTrigger  |  UpdateTrigger  |  The way to update the data model value associated with this item. 
 EnterCommand  |  BindCmd  |  The command that will be executed upon pressing Enter (for a multi-line field - Ctrl+Enter). 
 MaxHeight  |  Length  |  The maximum height of the item. Matters only for multi-line items that have the AutoSize property set. 
 Size  |  ControlSize  |  Item size. Possible values:
Default, Normal - (by default) regular item size.
Large - increased item size.
(Other ControlSize enumeration values are not supported). 
 ShowClear  |  Boolean  |  Show content clear button. Clicking this button clears the associated model value. If the value is empty, the button will be disabled. 
 Accel  |  Accel  |  Accelerator (hot key). When you press this key, the focus will be set on that item. 
 Base item properties 
 Name  Type  Description  Multiline  Boolean  Multi-line item.  AutoSize  Boolean  Automatically set item height based on content. For multiline elements only.  Rows  Int32?  Number of lines. For multiline items only.  Align  TextAlign  Text alignment  Password  Boolean  Password input field. Placeholders are displayed instead of text. Copying 
					text from the field is not possible.  Number  Boolean  Only numbers and a minus sign ('-') are allowed in the field.  Placeholder  String  Prompt. Displayed in an empty input field. Disappears when the input focus is received by the field.  SpellCheck  Boolean?  Whether to check for spelling errors. By default - depends on browser settings.  UpdateTrigger  UpdateTrigger  The way to update the data model value associated with this item.  EnterCommand  BindCmd  The command that will be executed upon pressing  Enter  (for a multi-line field -  Ctrl+Enter  ).  MaxHeight  Length  The maximum height of the item. Matters only for multi-line items that have the AutoSize  property set.  Size ControlSize  Item size. Possible values: Default, Normal  - (by default) regular item size. Large  - increased item size.  (Other ControlSize  enumeration values are not supported).  ShowClear  Boolean  Show content clear button. Clicking this button clears the associated model value. If the value 
					is empty, the button will be disabled.  Accel  Accel  Accelerator (hot key). When you press this key, the focus will be set on that item.  Base item properties  Example XAML 
 XAML <!-- simple input field --> <TextBox Placeholder  = "enter text here" Label  = "Simple field" /> <!-- multiline input field --> <TextBox Multiline  = "True" Rows  = "3" Label  = "Multiline field" /> Result 
 Result  Simple field  Multiline field 

*** 
 Part: TimePicker 
  TimePicker  All controls Represents a time selector. 
 Represents a time selector.  Inherits:  ValuedControl  :  Control  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Align  |  TextAlign  |  Text alignment. 
 Placement  |  DropDownPlacement  |  The direction of the selector "drop-down". Possible values:
BottomLeft - (by default) downwards with the left edge binding.
BottomRight - downwards with the right edge binding.
TopLeft - upwards with the left edge binding.
TopRight - upwards with the right edge binding. 
 Size  |  ControlSize  |  Item size. Possible values:
Default, Normal - (by default) regular item size.
Large - increased item size.
(Other ControlSize enumeration values are not supported). 
 Base item properties 
 Name  Type  Description  Align  TextAlign  Text alignment.  Placement DropDownPlacement  The direction of the selector "drop-down". Possible values: BottomLeft  - (by default) downwards with the left edge binding. BottomRight  - downwards with the right edge binding. TopLeft  - upwards with the left edge binding. TopRight  - upwards with the right edge binding.  Size ControlSize  Item size. Possible values: Default, Normal  - (by default) regular item size. Large  - increased item size.  (Other ControlSize  enumeration values are not supported).  Base item properties  Example Enter the time When the time is changed, the date will not change. This allows you to enter date and
		time using two controls -  and . 
 Note!  When the time is changed, the date will not change. This allows you to enter date and
		time using two controls -  DatePicker  and TimePicker  .  (function () {
			if (!window.Vue) return;
			var du = require('std:utils').date;
			var vm = new Vue({
				el: "#xaml-timepicker",
				data: {
					Document: {
						Date: du.today()
					}
				},
				created: function () {
				}
			});
		})(); 

*** 
 Part: TreeView Control 
  TreeView Control  All controls Represents a hierarchical list (tree). Supports lazy items loading. 
 Represents a hierarchical list (tree). Supports lazy items loading. Note that the item is used to work with . 
 Note that the item is used to work with  hierarchical data models  . Inherits:  :  : 
 Inherits:  Control  :  UIElement  :  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Children  |  TreeViewItem collection  |  Content property. Typically, it consists of one element, the properties of which set the bindings to the tree items. 
 ItemsSource  |  Array  |  Always a binding (Bind). Data source for getting the items of the first-level tree. The binding of the rest of the levels is defined in the TreeViewItem child element. 
 Style  |  TreeViewStyle  |  Tree display style. Possible values:
Normal - by default.
SideBarMenu - looks like a side menu. 
 AutoSelect  |  AutoSelectMode  |  Automatic item selection during loading. Possible values:
None - by default. Don't select anything.
FirstItem - the first item.
LastItem - the last item.
ItemId - item with the specified identifier. This is the identifier of the main object of the model and is usually the last element of the page URL. 
 IconFolder  |  Icon  |  Icon for the folder. Note that this is a "by default" icon. It can be overridden in the TreeViewItem element. 
 IconItem  |  Icon  |  The icon for the item. Note that this is a "by default" icon. It can be overridden in the TreeViewItem item. 
 WrapLabel  |  Boolean  |  Whether the text wrapping of the tree label is allowed. By default - False. 
 FolderSelect  |  Boolean  |  Whether folder selection is allowed. If it is False, then only the tree item can be selected. 
 ExpandFirstItem  |  Boolean  |  Expand the first item of the tree automatically after loading. 
 Height  |  Length  |  Item height. 
 Indent  |  Boolean?  |  Indentations for nested elements. by default - True. 
 DoubleClick  |  BindCmd  |  The command that will be executed when you double-click on an item in the tree. Don't forget to pass an argument to the command. 
 ContextMenu  |  DropDownMenu  |  The context menu that will be displayed upon the right mouse click. 
 Base item properties 
 Name  Type  Description  Children  TreeViewItem  collection  Content property. Typically, it consists of one element, the properties of which set the bindings to the tree items.  ItemsSource  Array  Always a binding (  Bind  ). Data source for getting the items of the
					first-level tree. The binding of the rest of the levels is defined in the  TreeViewItem  child element.  Style TreeViewStyle  Tree display style. Possible values: Normal  - by default. SideBarMenu  - looks like a side menu.  AutoSelect AutoSelectMode  Automatic item selection during loading. Possible values: None  - by default. Don't select anything. FirstItem  - the first item. LastItem  - the last item. ItemId  - item with the specified identifier. 
							This is the identifier of the main object of the model and is usually the last
							element of the page URL.  IconFolder  Icon  Icon for the folder. Note that this is a "by default" icon. It can be overridden in the  TreeViewItem  element.  IconItem  Icon  The icon for the item. Note that this is a "by default" icon.
					It can be overridden in the  TreeViewItem  item.  WrapLabel  Boolean  Whether the text wrapping of the tree label is allowed. By default - False  .  FolderSelect  Boolean  Whether folder selection is allowed. If it is False  , 
				then only the tree item can be selected.  ExpandFirstItem  Boolean  Expand the first item of the tree automatically after loading.  Height  Length  Item height.  Indent  Boolean?  Indentations for nested elements. by default - True  .  DoubleClick  BindCmd  The command that will be executed when you double-click on an item in the tree. 
					Don't forget to pass an argument to the command.  ContextMenu  DropDownMenu  The context menu that will be displayed upon the right mouse click.  Base item properties A more detailed description of working with trees (including with "lazy" loading) is described in the 
		section on . 
 A more detailed description of working with trees (including with "lazy" loading) is described in the 
		section on  working with hierarchical data models  .  Example Folder 1  Item 1.1  Item 1.2 Folder 2  Item 2.1  Item 2.2  (function () {
			if (!window.Vue) return;
			var vm = new Vue({
				el: "#tree-view-sample",
				data: {
				},
				methods: {
					dummy() {

					},
					toggle(id) {
						let el = document.getElementById(id);
						let cl = el.classList;
						cl.toggle('collapsed');
						cl.toggle('expanded');
					}
				}
			});
		})(); 

*** 
 Part: TreeViewItem Control 
  TreeViewItem Control  All controls Represents one element of the  hierarchical list (tree). 
 Represents one element of the  TreeView  hierarchical list (tree). Note that the item is used to work with . 
 Note that the item is used to work with  hierarchical data sources  . Inherits:  : 
 Inherits:  UIElement  :  UIElementBase Content property: 
 Content property: Label  Properties 
[Table]
 Name  |  Type  |  Description 
 ItemsSource  |  Array  |  Always a binding (Bind). Data source for receiving children. 
 Label  |  String  |  Content property. Item text. 
 Icon  |  Icon  |  The icon to be displayed in front of the content. If the icon is not defined, the icon defined in the properties IconFolder (for a folder) or IconItem (for an item) of the parent TreeView item will be displayed.. 
 IsFolder  |  Boolean?  |  Always a binding. Whether the item is a folder. Used to work with dynamically filled trees. 
 IsGroup  |  Boolean?  |  Always a binding. Whether the item is a group. Used to work with dynamically filled trees. 
 Base item properties 
 Name  Type  Description  ItemsSource  Array  Always a binding (  Bind  ). Data source for receiving children.  Label  String  Content property. Item text.  Icon  Icon  The icon to be displayed in front of the content. If the icon is not defined, the icon defined in the properties IconFolder  (for a folder) or IconItem  (for an item) of the parent  TreeView  item will be displayed..  IsFolder  Boolean?  Always a binding. Whether the item is a folder. Used to work with dynamically filled trees.  IsGroup  Boolean?  Always a binding. Whether the item is a group. Used to work with dynamically filled trees.  Base item properties 

*** 
 Part: UploadFile Control 
  UploadFile Control  All controls Represents a control for selecting and downloading files. Supports drag and drop. 
 Represents a control for selecting and downloading files. Supports drag and drop.  More on working with binary objects... Inherits: 
 Inherits:  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Url  |  String  |  The path to the file download command. 
 Argument  |  Object  |  An object, the properties of which will be the parameters of the file download command. 
 Accept  |  String  |  Filter string for the file selection dialog. Mime-types of received files. Support depends on the browser. Corresponds to the accept attribute of the <input type="file"> item. It is possible to specify multiple types separated by commas. For example, to select images in jpg or png format, you can specify Accept="image/png, image/jpeg".
Note that this is only a recommendation to the browser. It is impossible to prevent the user from selecting other files. 
 Limit  |  Int32  |  The maximum allowable size of the uploaded file (in kilobytes). If not specified, you can upload files of any size. 
 Delegate  |  String  |  Name of the delegate which will be called after the file is downloaded. The delegate's argument will be the result received from the server. 
 ErrorDelegate  |  String  |  Name of the delegate, which will be called in case of errors. If not specified, a standard error message is displayed. 
 Base item properties 
 Name  Type  Description  Url  String  The path to the  file download command  .  Argument  Object  An object, the properties of which will be the parameters of the file download command.  Accept  String  Filter string for the file selection dialog.  Mime-types  of received files. Support depends on the browser. Corresponds to the accept  attribute of the <input type="file">  item. It is possible to specify multiple types separated by commas. For example, to select
					images in jpg or png format, you can specify Accept="image/png, image/jpeg"  .  Note that this is only a recommendation to the browser. It is impossible to prevent the user from selecting other files.  Limit  Int32  The maximum allowable size of the uploaded file (in kilobytes). If not specified, you can upload files of any size.  Delegate  String  Name of the  delegate  which will be called after the file is downloaded. The delegate's 
					argument will be the result received from the server.  ErrorDelegate  String  Name of the  delegate  , which will be called in case of errors. If not specified, a standard error 
					message is displayed.  Base item properties 

*** 
 Part: Containers 
  Containers Container elements or just containers are used to place inside
		themselves other elements. 
 Container elements or just containers are used to place inside
		themselves other elements.  Containers  Block  - block.  Card  - card.  CardBody  - the card’s contents.  Case  - one option of the selection element.  CommandBar  - command bar.  Dialog  - dialogue.  DropDownMenu  - drop-down menu.  DropDownMegaMenu  - drop-down menu with sections.  FieldSet  - panel for items.  Flex  - flexbox container.  FlexList  - the list (flexbox) with flexible placement of elements.  FullHeightPanel  - full height panel.  Grid  - grid.  GridGroup  - group of grid elements.  IFrame  -  frame.  Include  - nested content.  InlineDialog  - built-in dialog.  Page  - page.  Panel  - panel.  Partial  - part of the page.  Popup  - pop-up window.  Repeater  - repeating block.  Splitter  - separator.  StackPanel  - panel.  Tab  - one bookmark.  TabBar  - selection bar in the form of bookmarks.  TabPanel  - bookmarks panel.  Taskpad  - tasks panel.  Toolbar  - toolbar.  Wizard  - dialogue in the form of a "wizard".  WizardPage  -  wizard page. 

*** 
 Part: Block Layout Element 
  Block Layout Element  All containers Represents a container that contains other controls or other containers. 
 Represents a container that contains other controls or other containers. Inherits:  : 
 Inherits:  UIElement  :  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Children  |  UIElementCollection  |  Content property. Collection of child items. 
 Align  |  TextAlign  |  Horizontal alignment of the container’s contents 
 Color  |  TextColor  |  Text color. 
 Background  |  BackgroundStyle  |  Background color. 
 Height  |  Length  |  Block height. 
 Width  |  Length  |  Block width. By default the block occupies 100% of the width of a parent element. 
 MaxWidth  |  Length  |  Maximum block width. If the content is wider, it is wrapped. 
 Border  |  Boolean  |  Display a frame for the block. 
 Scroll  |  Boolean?  |  Whether the block allows scrolling. Only makes sense if the height of the block is set. If set to True, a scroll bar will appear. If set to False, the excess content will be truncated. By default the height of the block will be such as to include all nested elements. 
 DropShadow  |  ShadowStyle  |  Type of shadow. 
 Relative  |  Boolean  |  Relative positioning for the block. All child items with the Absolute property set will be positioned relative to this block. 
 Base item properties 
 Name  Type  Description  Children  UIElementCollection  Content property. Collection of child items.  Align  TextAlign  Horizontal alignment of the container’s contents  Color  TextColor  Text color.  Background  BackgroundStyle  Background color.  Height  Length  Block height.  Width  Length  Block width. By default the block occupies 100% of the width of a parent element.  MaxWidth  Length  Maximum block width. If the content is wider, it is wrapped.  Border  Boolean  Display a frame for the block.  Scroll  Boolean?  Whether the block allows scrolling. Only makes sense if the height of the block is set.
					If set to  True  , a scroll bar will appear. If set to  False  , the excess 
					content will be truncated. By default the height of the block will be such as to 
					include all nested elements.  DropShadow  ShadowStyle  Type of shadow.  Relative  Boolean  Relative positioning for the block. All child items with the Absolute  property set will be positioned relative to this block.  Base item properties 

*** 
 Part: Card Layout Element 
  Card Layout Element  All containers Represents a card. 
 Represents a card. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Body  |  Object  |  Contents of the card. Typically, a CardBody item. 
 Header  |  Object  |  Title. Can be a string, a bind, or a (Bind) UIElementBase element. 
 Footer  |  Object  |  Footer. It can be a string, a bind (Bind) or an UIElementBase element. 
 Width  |  Length  |  Card width. 
 Height  |  Length  |  Card height. 
 Compact  |  Boolean  |  Compact card display style. 
 MaxHeight  |  Length  |  Maximum card height. If the size is larger, a vertical scrollbar appears. 
 Align  |  TextAlign  |  Horizontal alignment of content. 
 Hint  |  Popover  |  A tooltip for an item. Displayed as  after the title text. 
 DropShadow  |  ShadowStyle  |  Shadow type. 
 Background  |  BackgroundStyle  |  Background color. 
 Base item properties 
 Name  Type  Description  Body  Object  Contents of the card. Typically, a  CardBody  item.  Header  Object  Title. Can be a string, a bind, or a (  Bind  )  UIElementBase  element.  Footer  Object  Footer. It can be a string, a bind (  Bind  )
					or an  UIElementBase  element.  Width  Length  Card width.  Height  Length  Card height.  Compact  Boolean  Compact card display style.  MaxHeight  Length  Maximum card height. If the size is larger, a vertical scrollbar appears.  Align  TextAlign  Horizontal alignment of content.  Hint  Popover  A tooltip for an item. Displayed as  after the title text.  DropShadow  ShadowStyle  Shadow type.  Background  BackgroundStyle  Background color.  Base item properties 

*** 
 Part: CardBody Layout Element 
  CardBody Layout Element  All containers Represents the contents of the .
		Simply displays content with fields specific to the card. 
 Represents the contents of the  Card  .
		Simply displays content with fields specific to the card. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 The object does not have its own properties. 
 Base item properties 
 Name  Type  Description  The object does not have its own properties.  Base item properties 

*** 
 Part: Case Layout Element 
  Case Layout Element  All containers Represents the container of one of the options of the  item. 
 Represents the container of one of the options of the  Switch  item.  Properties 

*** 
 Part: CommandBar Layout Element 
  CommandBar Layout Element  All containers Represents the command bar. Usually used inside
		 and
		 items. 
 Represents the command bar. Usually used inside  DataGrid  and  ListItem  items. ОThe particularity of this item is that its visibility will be determined by
		the state of the parent container. For example, if you place it in a table column
		and set the property , the command bar will 
		be displayed only for the active row of the table. 
 ОThe particularity of this item is that its visibility will be determined by
		the state of the parent container. For example, if you place it in a table column
		and set the property Visibility = "Active"  , the command bar will 
		be displayed only for the active row of the table.  Inherits:  Container  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Visibility  |  CommandBarVisibility  |  Bar’s visibility. Possible values:
Default - (by default) Always visible.
Active - Visible only for the active item.
Hover - Visible to both the active item and the item on which the mouse cursor is located. 
 Float  |  FloatMode  |  Make the bar "floating".
None - (by default) no.
Left - place on the left.
Right - place on the right. 
 Base item properties 
 Name  Type  Description  Visibility CommandBarVisibility  Bar’s visibility. Possible values: Default  - (by default) Always visible. Active  - Visible only for the active item. Hover  - Visible to both the active item and 
							the item on which the mouse cursor is located.  Float FloatMode  Make the bar "floating". None  - (by default) no. Left  - place on the left. Right  - place on the right.  Base item properties 

*** 
 Part: Dialog Layout Element 
  Dialog Layout Element  All containers Represents a container that contains other 
		controls or other containers. Always used as the root markup element. 
 Represents a container that contains other 
		controls or other containers. Always used as the root markup element. Inherits:  :  :  : 
 Inherits:  RootContainer  :  Container  :  UIElement  :  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Title  |  String  |  The title of the dialog box. 
 HelpUrl  |  String  |  The path to the help page. If specified, a hyperlink to the help page will appear in the title of the dialog box. 
 TitleInfo  |  UIElementBase  |  Additional element in the header. Displayed after the title text. 
 Buttons  |  UIElementCollection  |  The content of the button bar. Usually a set of control buttons. 
 Taskpad  |  UIElementBase  |  Dialog taskbar. Most often this is the Taskpad element. 
 Width  |  Length  |  The width of the dialog box. By default, it is determined by the content. 
 Height  |  Length  |  The height of the dialog box. By default, it is determined by the content. 
 MinWidth  |  Length  |  The window minimum width. 
 Size  |  DialogSize  |  The size of the dialog box. Possible values:
Default - by default.
Small - small.
Medium - regular.
Large - large.
Max - Expanded to full screen. Equivalent to Maximize="True"
The specific size values depend on the user interface theme. If the Width property is specified, then this property is ignored. 
 Maximize  |  Boolean  |  The maximum possible size of the dialogue. Will vary depending on the size of the browser window. 
 ButtonOnTop  |  Boolean  |  Place the button bar at the top of the dialog box. 
 ShowWaitCursor  |  Boolean  |  If the property is set to True, then when making requests to the server, the dialog box will be grayed out and a progress bar will be displayed. 
 TestId  |  String  |  Window identifier. Used for testing. 
 AlwaysOk  |  Boolean  |  If the property is set to True, then when the dialog is closed in any way, it will be considered that the returned result is true. 
 CanCloseDelegate  |  String  |  The name of the delegate that will be called upon an attempt to close the window (in any way). 
 Background  |  BackgroundStyle  |  Dialogue background color. 
 Overflow  |  Boolean  |  Whether a scroll bar can appear in the dialogue. Set this property if you want popups (such as DatePicker) to be able to extend beyond the bounds of the element. In this case, you need to be careful to ensure that the main content does not go beyond the boundaries. The scroll bar will not be displayed. 
 Base item properties 
 Name  Type  Description  Title  String  The title of the dialog box.  HelpUrl  String  The path to the help page. If specified, a hyperlink to the help page will appear in the title of the dialog box.  TitleInfo  UIElementBase  Additional element in the header. Displayed after the title text.  Buttons  UIElementCollection  The content of the button bar. Usually a set of control buttons.  Taskpad  UIElementBase  Dialog taskbar. Most often this is the  Taskpad  element.  Width  Length  The width of the dialog box. By default, it is determined by the content.  Height  Length  The height of the dialog box. By default, it is determined by the content.  MinWidth  Length  The window minimum width.  Size DialogSize  The size of the dialog box. Possible values: Default  - by default. Small  - small. Medium  - regular. Large  - large. Max  - Expanded to full screen. Equivalent to Maximize="True"  The specific size values depend on the user interface theme. If the Width  property is specified, then this property is ignored.  Maximize  Boolean  The maximum possible size of the dialogue. Will vary depending on the size of the browser window.  ButtonOnTop  Boolean  Place the button bar at the top of the dialog box.  ShowWaitCursor  Boolean  If the property is set to True  , then when making requests to the server,
					the dialog box will be grayed out and a progress bar will be displayed.  TestId  String  Window identifier. Used for testing.  AlwaysOk  Boolean  If the property is set to True  , then when the dialog is closed in 
					any way, it will be considered that the returned result is true  .  CanCloseDelegate  String  The name of the  delegate  that will be called upon an attempt to close the window (in any way).  Background  BackgroundStyle  Dialogue background color.  Overflow  Boolean  Whether a scroll bar can appear in the dialogue. Set this property if you want popups (such as DatePicker  )
					to be able to extend beyond the bounds of the element. In this case, you need to be careful to ensure that the main 
					content does not go beyond the boundaries. The scroll bar will not be displayed.  Base item properties  CanCloseDelegate delegate format  canClose  ( this  : IRoot  )  : any  | Promise  Parameters: this  - data model root.  Returned value: Promise  - If Promise Promise  returns a truthy  value,
				then the dialog will close with this result. any  - If the value is truthy  , then the dialog will close with this result. Note:  is any value that is considered to be true. 
 Note: truthy  is any value that is considered to be true. 

*** 
 Part: DropDownMenu Layout Element 
  DropDownMenu Layout Element  All containers Represents a dropdown menu. The content is usually a collection of
		 items. 
 Represents a dropdown menu. The content is usually a collection of  MenuItem  items.  Inherits:  Container  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Direction  |  DropDownDirection  |  The direction of the menu’s "drop-out". Possible values:
DownRight - (by default) downwards, unwraps to the right. Left edge anchor.
DownLeft - downwards, unwraps to the left. Right edge anchor.
UpRight - upwards, unwraps to the right. Left edge anchor.
UpLeft - upwards, unwraps to the left. Right edge anchor. 
 Separate  |  Boolean  |  Display the menu separately from the parent button. In this case, the background of the element will be white. 
 Background  |  BackgroundStyle  |  Background color. 
 Base item properties 
 Name  Type  Description  Direction DropDownDirection  The direction of the menu’s "drop-out". Possible values: DownRight  - (by default) downwards, unwraps to the right. Left edge anchor. DownLeft  - downwards, unwraps to the left. Right edge anchor. UpRight  - upwards, unwraps to the right. Left edge anchor. UpLeft  - upwards, unwraps to the left. Right edge anchor.  Separate  Boolean  Display the menu separately from the parent button. In this case, the background of the element will be white.  Background  BackgroundStyle  Background color.  Base item properties  Example XAML 
 XAML <Toolbar> <Button Content  = "Open" Icon  = "File" > <Button.DropDown> <DropDownMenu> <MenuItem Content  = "Text" Icon  = "FileContent" /> <MenuItem Content  = "Image" Icon  = "FileImage" /> </DropDownMenu> </Button.DropDown> </Button> <Button Icon  = "Save" Content  = "Save" /> </Toolbar> Example 
 Example  Open Text Image  Save  (function () {
			if (!window.Vue) return;
			var vm = new Vue({
				el: "#xaml-menuitem",
				methods: {
					click() {

					}
				},
				created: function () {
				}
			});
		})(); 

*** 
 Part: DropDownMegaMenu Layout Element 
  DropDownMegaMenu Layout Element  All containers Represents a drop-down menu with sections. 
 Represents a drop-down menu with sections. Note that menu grouping is only available for 
		linked data sources. Grouping of static menu items is not supported. 
 Note that menu grouping is only available for 
		linked data sources. Grouping of static menu items is not supported.  Inherits:  Container  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 GroupBy  |  String  |  Name of the property in the data source which the grouping will be performed by. Each menu group will be shown in a separate section. 
 Columns  |  Int32  |  The number of columns in the menu. By default - one column. 
 Width  |  Length  |  Menu width. 
 Direction  |  DropDownDirection  |  The direction of the menu’s "drop-out". Possible values:
DownRight - (by default) downwards, unwraps to the right. Left edge anchor.
DownLeft - downwards, unwraps to the left. Right edge anchor.
UpRight - upwards, unwraps to the right. Left edge anchor.
UpLeft - upwards, unwraps to the left. Right edge anchor. 
 Separate  |  Boolean  |  Display the menu separately from the parent button. In this case, the background of the element will be white. 
 Background  |  BackgroundStyle  |  Background color. 
 Base item properties 
 Name  Type  Description  GroupBy  String  Name of the property in the data source which the grouping will 
					be performed by. Each menu group will be shown in a separate section.  Columns  Int32  The number of columns in the menu. By default - one column.  Width  Length  Menu width.  Direction DropDownDirection  The direction of the menu’s "drop-out". Possible values: DownRight  - (by default) downwards, unwraps to the right. Left edge anchor. DownLeft  - downwards, unwraps to the left. Right edge anchor. UpRight  - upwards, unwraps to the right. Left edge anchor. UpLeft  - upwards, unwraps to the left. Right edge anchor.  Separate  Boolean  Display the menu separately from the parent button. In this case, the background of the element will be white.  Background  BackgroundStyle  Background color.  Base item properties 

*** 
 Part: FieldSet Layout Element 
  FieldSet Layout Element  All containers Represents a container (frame) for the items. 
 Represents a container (frame) for the items. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Orientation  |  Orientation  |  Orientation of the items in the panel. 
 Title  |  String  |  Panel title. 
 Hint  |  Popover  |  Tooltip for the frame. Displayed as the  after the title text. 
 Disabled  |  Boolean  |  All controls inside the panel will be disabled for input. The Bind binding is usually used to manage this field. 
 Base item properties 
 Name  Type  Description  Orientation  Orientation  Orientation of the items in the panel.  Title  String  Panel title.  Hint  Popover  Tooltip for the frame. Displayed as the  after the title text.  Disabled  Boolean  All controls inside the panel will be disabled for input. The  Bind  binding is usually used to manage this field.  Base item properties  Example XAML 
 XAML <Grid Columns  = "1*" AlignItems  = "Top" > <FieldSet Title  = "Check the required boxes" > <CheckBox Label  = "Option 1" Value  = "{Bind Element.Option1}" /> <CheckBox Label  = "Option 2" Value  = "{Bind Element.Option2}" /> <CheckBox Label  = "Option 3" Value  = "{Bind Element.Option3}" /> </FieldSet> </Grid> Result 
 Result  Check the required boxes Option 1 Option 2 Option 3 

*** 
 Part: Flex Layout Element 
  Flex Layout Element  All containers Represents a flexbox container. 
 Represents a flexbox container. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Orientation  |  Orientation  |  Orientation of the items in the panel. 
 JustifyItems  |  JustifyItems  |  The mode of the items aligning along the main axis. 
 Gap  |  GapSize  |  The gaps between the items along the main and perpendicular axis. 
 Base item properties 
 Name  Type  Description  Orientation  Orientation  Orientation of the items in the panel.  JustifyItems  JustifyItems  The mode of the items aligning along the main axis.  Gap  GapSize  The gaps between the items along the main and perpendicular axis.  Base item properties 

*** 
 Part: FlexList Layout Element 
  FlexList Layout Element  All controls Represents a container with the sequential placement of the items. 
 Represents a container with the sequential placement of the items. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Orientation  |  Orientation  |  Orientation of the items in the panel. 
 JustifyItems  |  JustifyItems  |  The mode of the items aligning along the main axis. 
 AlignItems  |  AlignItems  |  The mode of the items aligning along the perpendicular axis. 
 BorderStyle  |  BorderStyle  |  The style of the frame around the item. 
 MinWidth  |  Length  |  Minimum item width. 
 Gap  |  GapSize  |  The gaps between the items along the main and perpendicular axis. 
 The gaps between the items along the main and perpendicular axis. 
 Name  Type  Description  Orientation  Orientation  Orientation of the items in the panel.  JustifyItems  JustifyItems  The mode of the items aligning along the main axis.  AlignItems  AlignItems  The mode of the items aligning along the perpendicular axis.  BorderStyle  BorderStyle  The style of the frame around the item.  MinWidth  Length  Minimum item width.  Gap  GapSize  The gaps between the items along the main and perpendicular axis.  The gaps between the items along the main and perpendicular axis. 

*** 
 Part: FullHeightPanel Layout Element 
  FullHeightPanel Layout Element  All containers Represents a panel whose height is always 100%. 
 Represents a panel whose height is always 100%. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 MinWidth  |  Length  |  Minimum panel width. 
 Base item properties 
 Name  Type  Description  MinWidth  Length  Minimum panel width.  Base item properties  Attached properties 
[Table]
 Name  |  Type  |  Description 
 FullHeightPanel.Fill  |  Boolean  |  Defines a child item whose height will change when the height of the parent container changes.
Only one child element can have the property Fill = True. 
 FullHeightPanel.Skip  |  Boolean  |  Skip this item when creating a container. This property is used when you want one of several elements to be displayed in one container block (for example, using the If binding).
Set Skip = True for all items in the block, except one (any). 
 Name  Type  Description  FullHeightPanel.Fill  Boolean  Defines a child item whose height will change when the height of the parent container changes.  Only one child element can have the property Fill = True  .  FullHeightPanel.Skip  Boolean  Skip this item when creating a container. This property is used when you want one of several
					elements to be displayed in one container block (for example, using the If  binding).  Set Skip = True  for all items in the block, except one (any). To implement the panel, a grid is used (CSS grid). Because of this, when hiding items using an
		 binding, the selection of the item to fill will be incorrect.
		
		This is because the panels are addressed by a sequential number.
		
		If you want to use an  binding, either place the hidden item in an additional
		, or use the attached
		 property. 
 Note!  To implement the panel, a grid is used (CSS grid). Because of this, when hiding items using an If  binding, the selection of the item to fill will be incorrect.  This is because the panels are addressed by a sequential number.  If you want to use an  If  binding, either place the hidden item in an additional  Block  , or use the attached FullHeightPanel.Skip  property. 

*** 
 Part: Grid Layout Element 
  Grid Layout Element  All containers Represents a grid of rows and columns. 
 Represents a grid of rows and columns. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase Note. The  container is used in UI layouts. It is not intended to display data. To display and bind to data, use appropriate controls such as
		 or . 
 Note. The Grid  container is used in UI layouts. It is not intended to display data. To display and bind to data, use appropriate controls such as  Table  or  DataGrid  .  Properties 
[Table]
 Name  |  Type  |  Description 
 Height  |  Length  |  The control height. 
 Gap  |  GapSize  |  Spacings between rows and columns of the grid. 
 DropShadow  |  ShadowStyle  |  Shadow type. 
 Background  |  BackgroundStyle  |  Background color. 
 AutoFlow  |  AutoFlowMode  |  Automatic items placement mode. 
 AlignItems  |  AlignItem  |  Automatic items alignment mode. 
 Rows  |  RowDefinitions  |  Grid rows definitions. 
 Columns  |  ColumnDefinitions  |  Grid columns definitions. 
 Base item properties 
 Name  Type  Description  Height  Length  The control height.  Gap  GapSize  Spacings between rows and columns of the grid.  DropShadow  ShadowStyle  Shadow type.  Background  BackgroundStyle  Background color.  AutoFlow  AutoFlowMode  Automatic items placement mode.  AlignItems  AlignItem  Automatic items alignment mode.  Rows  RowDefinitions  Grid rows definitions.  Columns  ColumnDefinitions  Grid columns definitions.  Base item properties  Attached properties 
[Table]
 Name  |  Type  |  Description 
 Grid.Row  |  Int32  |  Determines the number of the row where the child should be placed. 
 Grid.Col  |  Int32  |  Determines the number of the column where the child should be placed. 
 Grid.RowSpan  |  Int32  |  Determines the quantity of the rows that the child will take. By default - 1. 
 Grid.ColSpan  |  Int32  |  Determines the quantity of the columns that the child will take. By default - 1. 
 Grid.VAlign  |  AlignItem  |  Determines the vertical alignment of the child of the table. by default - Top. 
 Name  Type  Description  Grid.Row  Int32  Determines the number of the row where the child should be placed.  Grid.Col  Int32  Determines the number of the column where the child should be placed.  Grid.RowSpan  Int32  Determines the quantity of the rows that the child will take. By default - 1.  Grid.ColSpan  Int32  Determines the quantity of the columns that the child will take. By default - 1.  Grid.VAlign  AlignItem  Determines the vertical alignment of the child of the table. by default - Top  . 

*** 
 Part: GridGroup Layout Element 
  GridGroup Layout Element  All containers Represents a group of items within a . The element has no external
		representation and is intended to make it convenient to hide/show groups of items using the ,
		,  properties. 
 Represents a group of items within a  Grid  . The element has no external
		representation and is intended to make it convenient to hide/show groups of items using the If  , Show  , Hide  properties. The  Element is transparent in terms of attached properties. This means that the attached properties
		(such as, for example, , ) of the children will refer not to the ,
		but to the parent  container. 
 The  GridGroup  Element is transparent in terms of attached properties. This means that the attached properties
		(such as, for example, Grid.Row  , Grid.Col  ) of the children will refer not to the  GridGroup  ,
		but to the parent  Grid  container. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase Element does not contain its own properties.
		. 
 Element does not contain its own properties.  Base item properties.  . Note! Since the element does not have its own representation, from all the properties of the base item it is allowed to use only the properties associated with the display
		(, , ). It makes no sense to specify any other properties. 
 Note! Since the element does not have its own representation, from all the properties of the base item it is allowed to use only the properties associated with the display
		( If  , Show  , Hide  ). It makes no sense to specify any other properties. 

*** 
 Part: Group Layout Element 
  Group Layout Element  All containers Represents a group of items. The element has no external representation and is
		intended to place multiple items in a place where only one item is allowed, as
		well as to control the visibility / presence of all items in a group at the same time
		(using the ,  properties). 
 Represents a group of items. The element has no external representation and is
		intended to place multiple items in a place where only one item is allowed, as
		well as to control the visibility / presence of all items in a group at the same time
		(using the If  , Show  properties). Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase Element does not contain its own properties.
		. 
 Element does not contain its own properties.  Base item properties.  . 

*** 
 Part: IFrame Layout Element 
  IFrame Layout Element  All containers Represents a frame for loading and displaying an external independent document.
		Rendered in html  tag. 
 Represents a frame for loading and displaying an external independent document.
		Rendered in html <irame>  tag. Inherits: 
 Inherits:  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Source  |  String  |  URL of the page that will be loaded into the frame. 
 Size  |  Size  |  The frame size. By default - "100% 100%". 
 Base item properties 
 Name  Type  Description  Source  String  URL of the page that will be loaded into the frame.  Size  Size  The frame size. By default  - "100% 100%".  Base item properties 

*** 
 Part: Include Layout Element 
  Include Layout Element  All containers Represents a container that displays a complete independent page. It is most often
		used to dynamically select a page depending on the properties of a certain object.
		The root item of such a page will usually be the  item. 
 Represents a container that displays a complete independent page. It is most often
		used to dynamically select a page depending on the properties of a certain object.
		The root item of such a page will usually be the  Partial  item. Inherits: 
 Inherits:  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Source  |  String  |  URL of the page content. Can be a binding. 
 Argument  |  Object  |  An argument (typically, a Bind binding) to form an object identifier in the URL. 
 Data  |  Object  |  An object whose properties will be passed to the URL as the parameters. 
 FullHeight  |  Boolean  |  If the property is set to True, then the container will occupy the entire height of the parent page. 
 Base item properties 
 Name  Type  Description  Source  String  URL of the page content. Can be a binding.  Argument  Object  An argument (typically, a  Bind  binding) to form an object identifier in the URL.  Data  Object  An object whose properties will be passed to the URL as the parameters.  FullHeight  Boolean  If the property is set to True  , then the container will occupy the entire height of the parent page.  Base item properties 

*** 
 Part: InlineDialog Layout Element 
  InlineDialog Layout Element  All containers Represents a dialog that works with the current model and does not require additional download from the server. 
 Represents a dialog that works with the current model and does not require additional download from the server. Each of such dialogs must have a unique (within the current page) text identifier. 
 Each of such dialogs must have a unique (within the current page) text identifier. The dialog works within the current page. In fact, it is a simple block that is displayed upon command in the form
		of a dialogue. Such features as undoing an action must be implemented independently. 
 The dialog works within the current page. In fact, it is a simple block that is displayed upon command in the form
		of a dialogue. Such features as undoing an action must be implemented independently. You can open or close the dialog using the  ,
		 passing them the dialog ID. 
 You can open or close the dialog using the  controller $inlineOpen  , $inlineClose  passing them the dialog ID. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Id  |  String  |  The unique (within the page) dialog identifier. 
 Title  |  String  |  The dialog box heading. 
 Width  |  Length  |  The dialog box width. by default determined by the content. 
 Buttons  |  UIElementCollection  |  The content of the button bar. Typically, a set of control buttons. 
 NoClose  |  Boolean  |  Disable closing the dialog with the Escape key and the button in the box heading. It can be useful for dialogs displaying long-running operations that are not controlled by the user, but by the system. For example, a dialogue of payment by card through an acquiring terminal. 
 ShowWaitCursor  |  Boolean  |  If the property is set to True, then when making requests to the server, the dialog box will be grayed out and a progress bar will be displayed. 
 Base item properties 
 Name  Type  Description  Id  String  The unique (within the page) dialog identifier.  Title  String  The dialog box heading.  Width  Length  The dialog box width. by default determined by the content.  Buttons  UIElementCollection  The content of the button bar. Typically, a set of control buttons.  NoClose  Boolean  Disable closing the dialog with the  Escape  key and the button in the box heading. It can 
					be useful for dialogs displaying long-running operations that are not controlled by the user, but 
					by the system. For example, a dialogue of payment by card through an acquiring terminal.  ShowWaitCursor  Boolean  If the property is set to True  , then when making requests to the server, the dialog 
					box will be grayed out and a progress bar will be displayed.  Base item properties 

*** 
 Part: Page Layout Element 
  Page Layout Element  All containers Represents a page. 
 Represents a page. The page has its own URL address and gets into the navigation context of the browser. 
 The page has its own URL address and gets into the navigation context of the browser. Inherits:  :  :  : 
 Inherits:  RootContainer  :  Container  :  UIElement  :  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Title  |  String  |  The title of the page window. 
 Taskpad  |  UIElementBase  |  Page taskbar. Typically, this is the Taskpad element. 
 Toolbar  |  UIElementBase  |  Page toolbar. Typically, this is the Toolbar element. 
 CollectionView  |  CollectionView  |  A view of the collection to be displayed on the page. This is usually a server-side collection. The property is required to take control of the collection "outside the parentheses" of the page content. 
 Pager  |  Pager  |  Pager for the collection to be displayed on the page. The property is required to take control of the collection "outside the parentheses" of the page content. 
 Background  |  BackgroundStyle  |  The page background color. 
 Base item properties 
 Name  Type  Description  Title  String  The title of the page window.  Taskpad  UIElementBase  Page taskbar. Typically, this is the  Taskpad  element.  Toolbar  UIElementBase  Page toolbar. Typically, this is the  Toolbar  element.  CollectionView  CollectionView  A view of the collection to be displayed on the page. This is usually a server-side collection. The property is required
					to take control of the collection "outside the parentheses" of the page content.  Pager  Pager  Pager for the collection to be displayed on the page. The property is required to take control of the collection 
					"outside the parentheses" of the page content.  Background  BackgroundStyle  The page background color.  Base item properties 

*** 
 Part: Panel Layout Element 
  Panel Layout Element  All containers Represents a panel. 
 Represents a panel. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Style  |  PaneStyle  |  Panel display styles. Possible values:
Default - regular panel.
Danger, Error, Red - error (red).
Warning, Yellow - warning (yellow).
Success, Green - success (green).
Info, Cyan - information (blue).
Cut - collapsible panel with a link title. 
 Compact  |  Boolean  |  Compact panel display style. 
 Collapsible  |  Boolean  |  Whether the panel can be collapsed. 
 Collapsed  |  Boolean?  |  Whether the panel is collapsed in its original state. 
 Header  |  Object  |  Heading. Can be a string, bind (Bind), or UIElementBase item. 
 Icon  |  Icon  |  Icon. Displays on the left side of the header. 
 Hint  |  Popover  |  Tooltip for the panel. It is displayed  after the header text. 
 Height  |  Length  |  Panel height. 
 DropShadow  |  ShadowStyle  |  Shadow type. 
 Background  |  BackgroundStyle  |  Background color. 
 TestId  |  String  |  Item ID for testing tools. 
 Base item properties 
 Name  Type  Description  Style  PaneStyle  Panel display styles. Possible values: Default  - regular panel. Danger, Error, Red  - error (red). Warning, Yellow  - warning (yellow). Success, Green  - success (green). Info, Cyan  - information (blue). Cut  - collapsible panel with a link title.  Compact  Boolean  Compact panel display style.  Collapsible  Boolean  Whether the panel can be collapsed.  Collapsed  Boolean?  Whether the panel is collapsed in its original state.  Header  Object  Heading. Can be a string, bind (  Bind  ),
					or  UIElementBase  item.  Icon  Icon  Icon. Displays on the left side of the header.  Hint  Popover  Tooltip for the panel. It is displayed  after the header text.  Height  Length  Panel height.  DropShadow  ShadowStyle  Shadow type.  Background  BackgroundStyle  Background color.  TestId  String  Item ID for testing tools.  Base item properties  Examples  Default  Default style  Red  Red, Danger, Error  Yellow  Warning, Yellow  Green  Success, Green  Cyan  Info, Cyan  Cut  Style "Cut". Panel content  (function () {
			if (!window.Vue) return;
			var vm = new Vue({
				el: "#panel-sample",
				data: {
				}
			});
		})(); 

*** 
 Part: Partial Layout Element 
  Partial Layout Element  All containers Represents a part of a page. Used when you want to display
		a frame with your own model and template as part of another page. 
 Represents a part of a page. Used when you want to display
		a frame with your own model and template as part of another page. Inherits:  :  :  : 
 Inherits:  RootContainer  :  Container  :  UIElement  :  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Background  |  BackgroundStyle  |  Background color of the page. 
 Base item properties 
 Name  Type  Description  Background  BackgroundStyle  Background color of the page.  Base item properties  Example For example, there is a page with two columns. In the left column there is the list
	of entities, and in the right ― the properties of the selected entity. 
 For example, there is a page with two columns. In the left column there is the list
	of entities, and in the right ― the properties of the selected entity. In the left column we display the list of entities, in the right ― the
		 element. We associate
		the  of this element with the property (possibly calculated) of the
		list item which should represent the  to the right side of the page. 
 In the left column we display the list of entities, in the right ― the  Include  element. We associate
		the Source  of this element with the property (possibly calculated) of the
		list item which should represent the  URL  to the right side of the page. Using the generated , we place views with  layout elements
		as a root with our own model and our own template. 
 Using the generated  URLs  , we place views with Partial  layout elements
		as a root with our own model and our own template. Please note that the models themselves and their views on the right side can be completely
		arbitrary and not related to each other in any way. 
 Please note that the models themselves and their views on the right side can be completely
		arbitrary and not related to each other in any way. 

*** 
 Part: Popup Layout Element 
  Popup Layout Element  All containers Represents a popup that should be loaded from the server.
		This element will always be the root markup element. 
 Represents a popup that should be loaded from the server.
		This element will always be the root markup element. Inherits:  :  :  : 
 Inherits:  RootContainer  :  Container  :  UIElement  :  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Width  |  Length  |  Window width. By default it is determined by the content. 
 MinWidth  |  Length  |  The popup window minimum width. 
 Base item properties 
 Name  Type  Description  Width  Length  Window width. By default it is determined by the content.  MinWidth  Length  The popup window minimum width.  Base item properties 

*** 
 Part: Repeater Layout Element 
  Repeater Layout Element  All containers Has no external representation and no framing tag. Used to display 
		duplicate content. In other words, multiple elements are simply included
		in the markup according to the data source. 
 Has no external representation and no framing tag. Used to display 
		duplicate content. In other words, multiple elements are simply included
		in the markup according to the data source. Inherits:  : 
 Inherits:  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  UIElementBase  |  The element to be repeated for each value from the ItemsSource. Note that the bindings within the content will be relative. The root of the binding will be one item from the ItemsSource array. 
 ItemsSource  |  Array  |  Always a binding - Bind. Data source for displaying items. 
 Base item properties 
 Name  Type  Description  Content  UIElementBase  The element to be repeated for each value from the ItemsSource  .
					Note that the bindings within the content will be relative. The root of the binding
					will be one item from the ItemsSource  array.  ItemsSource  Array  Always a binding -  Bind  .
					Data source for displaying items.  Base item properties 

*** 
 Part: Splitter Layout Element 
  Splitter Layout Element  All containers Represents a container containing two resizable panels. 
 Represents a container containing two resizable panels. Note that an element must always contain exactly TWO child elements. 
 Note that an element must always contain exactly TWO child elements. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Orientation  |  Orientation  |  Container orientation. 
 Height  |  Length  |  Element height. 
 MinWidth  |  Length  |  Element minimum width. 
 Base item properties 
 Name  Type  Description  Orientation  Orientation  Container orientation.  Height  Length  Element height.  MinWidth  Length  Element minimum width.  Base item properties  Attached Properties 
[Table]
 Name  |  Type  |  Description 
 Splitter.Width  |  GridLength  |  Determines the panel width. 
 Splitter.MinWidth  |  Length  |  Determines the minimal panel width. 
 Name  Type  Description  Splitter.Width  GridLength  Determines the panel width.  Splitter.MinWidth  Length  Determines the minimal panel width. 

*** 
 Part: StackPanel Layout Element 
  StackPanel Layout Element  All containers Represents a container in which children are aligned
		in one line oriented vertically or horizontally. 
 Represents a container in which children are aligned
		in one line oriented vertically or horizontally. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Orientation  |  Orientation  |  Arrangement of the items in the panel. 
 AlignItems  |  AlignItems  |  Alignment of the children. 
 JustifyItems  |  JustifyItems  |  Distribution of the children. 
 Inline  |  Boolean  |  Inline element (not block). 
 Gap  |  GapSize  |  The gaps between the items along the main and perpendicular axis. 
 Base item properties 
 Name  Type  Description  Orientation  Orientation  Arrangement of the items in the panel.  AlignItems  AlignItems  Alignment of the children.  JustifyItems  JustifyItems  Distribution of the children.  Inline  Boolean  Inline element (not block).  Gap  GapSize  The gaps between the items along the main and perpendicular axis.  Base item properties  Separators Child panel elements can include a . 
 Child panel elements can include a  Separator  . Inserting a separator will cause the content to be split into two blocks. Everything before the separator
		will be aligned on the left (or top) side of the panel, and everything after the separator - on the right (or bottom). 
 Inserting a separator will cause the content to be split into two blocks. Everything before the separator
		will be aligned on the left (or top) side of the panel, and everything after the separator - on the right (or bottom).  For example: XAML 
 XAML <StackPanel Orientation  = "Horizontal" > <Button>  Button  1 </Button> <Button>  Button  2 </Button> <Separator / > <Button>  Button  3 </Button> </StackPanel> Result 
 Result  Button 1  Button 2  Button 3 

*** 
 Part: Tab Layout Element 
  Tab Layout Element  All containers Represents one tab of the  container. 
 Represents one tab of the  TabPanel  container. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Header  |  Object  |  Header. Can be a string or a binding (Bind). 
 Badge  |  String  |  The text badge on the header. Can be a binding. 
 FullHeight  |  Boolean  |  The tab full height. 
 Height  |  Length  |  The tab height. 
 Base item properties 
 Name  Type  Description  Header  Object  Header. Can be a string or a binding (  Bind  ).  Badge  String  The text badge on the header. Can be a binding.  FullHeight  Boolean  The tab full height.  Height  Length  The tab height.  Base item properties 

*** 
 Part: TabBar Layout Element 
  TabBar Layout Element  All containers It is a panel for selecting an item. In fact, it is just a container with the
		 buttons where
		the currently selected button is associated with a value. When the buttons are 
		pressed, the associated value is changed and vice versa, when the value is changed,
		the required button is selected. 
 It is a panel for selecting an item. In fact, it is just a container with the  TabButton  buttons where
		the currently selected button is associated with a value. When the buttons are 
		pressed, the associated value is changed and vice versa, when the value is changed,
		the required button is selected. In order to control, for example, the visibility of panels, you can use the
		 element. 
 In order to control, for example, the visibility of panels, you can use the  Switch  element. Inherits:  : 
 Inherits:  UIElement  :  UIElementBase Content property: 
 Content property: Buttons  Properties 
[Table]
 Name  |  Type  |  Description 
 Buttons  |  TabButtonCollection  |  The buttons collection (элементы TabButton items). 
 ItemsSource  |  Array  |  Always a binding - Bind. Data source for the buttons. 
 Value  |  Object  |  A value determining the active button. 
 Style  |  TabBarStyle  |  Panel display style. Possible values:
Default - (by default) Standard display.
MainMenu - in the form of the main menu of the system.
Tab - in the form of the tab bar.
Wizard - in the form of the Wizard.
ButtonGroup - in the form of the buttons group. 
 DropShadow  |  ShadowStyle  |  Shadow type. 
 Description  |  String | UIElementBase  |  The text (or item) that will be displayed to the right of the buttons. For some styles, it does not make sense, so it will not be displayed. 
 Base item properties 
 Name  Type  Description  Buttons TabButtonCollection  The buttons collection (элементы  TabButton  items).  ItemsSource  Array  Always a binding -  Bind  . Data source for the buttons.  Value Object  A value determining the active button.  Style TabBarStyle  Panel display style. Possible values: Default  - (by default) Standard display. MainMenu  - in the form of the main menu of the system. Tab  - in the form of the tab bar. Wizard  - in the form of the Wizard. ButtonGroup  - in the form of the buttons group.  DropShadow  ShadowStyle  Shadow type.  Description  String |  UIElementBase  The text (or item) that will be displayed to the right of the buttons. For some styles, it does not make 
					sense, so it will not be displayed.  Base item properties  Example XAML 
 XAML <TabBar Value  = "{Bind Root.Value}" > <TabBar.Description>  Selected: <Span Content  = "{Bind Root.Value}" /> </TabBar.Description> <TabButton ActiveValue  = "1" Content  = "First button" /> <TabButton ActiveValue  = "2" Content  = "Second button" /> </TabBar> Result 
 Result  First button  Second button  Selected: 1  (function () {
		if (!window.Vue) return;
		var vm = new Vue({
			el: "#xaml-tabbar",
			data: {
				value: '1'
			},
			methods: {
				click(val) {
					this.value = val;
				},
				isActive(val) {
					return this.value == val;
				}
			},
			created: function () {
				console.dir('created');
			}
		});
	})(); 

*** 
 Part: TabPanel Layout Element 
  TabPanel Layout Element  All containers A bar with tabs. The content is represented by the  items. 
 A bar with tabs. The content is represented by the  Tab  items.  Inherits:  UIElement  :  UIElementBase Content property: 
 Content property: Tabs  Properties 
[Table]
 Name  |  Type  |  Description 
 Tabs  |  TabCollection  |  The set of tabs (Tab items). 
 ItemsSource  |  Array  |  Always a binding - Bind. Data source for the tabs. The content of the item will repeat according to the content of the ItemsSource. 
 Header  |  Object  |  The bar header. Displayed on the right side of the bars tab. Can be a string, a binding, or an UIElementBase. 
 Border  |  Boolean  |  Whether to display a border around the bar. 
 FullPage  |  Boolean  |  The bar will occupy the entire page (it is the root item). 
 MinHeight  |  Length  |  The bar minimum height. 
 Overflow  |  Boolean  |  Whether a scroll-bar can appear in the bar. Set this property if you want pop-up windows (such as DatePicker) to be able to extend beyond the borders of the element. In this case, you need to be careful to ensure that the main content does not go beyond the borders. The scroll bar will not be displayed. 
 TabPosition  |  TabPosition  |  The tab bar position. Possible values:
Top - (by default) Above.
Bottom - Below. 
 Base item properties 
 Name  Type  Description  Tabs TabCollection  The set of tabs (  Tab  items).  ItemsSource  Array  Always a binding -  Bind  . Data
					source for the tabs. The content of the item will repeat according to the
					content of the ItemsSource  .  Header Object  The bar header. Displayed on the right side of the bars tab. Can be a string, 
					a binding, or an  UIElementBase  .  Border  Boolean  Whether to display a border around the bar.  FullPage  Boolean  The bar will occupy the entire page (it is the root item).  MinHeight  Length  The bar minimum height.  Overflow  Boolean  Whether a scroll-bar can appear in the bar. Set this property if
					you want pop-up windows (such as DatePicker  ) to be 
					able to extend beyond the borders of the element. In this case, 
					you need to be careful to ensure that the main content does not 
					go beyond the borders. The scroll bar will not be displayed.  TabPosition TabPosition  The tab bar position. Possible values: Top  - (by default) Above. Bottom  - Below.  Base item properties  Example XAML 
 XAML <TabPanel Header  = "The bar header" Border  = "True" > <Tab Header  = "Tab 1" > <Grid> <Text>  The  content  of  the  first  tab </Text> </Grid> </Tab> <Tab Header  = "Tab 2" > <Grid> <Text>  The  content  of  the  second  tab </Text> </Grid> </Tab> </TabPanel> Result 
 Result Tab 1 Tab 2  The bar header  The content of the first tab  The content of the Second tab  (function () {
		if (!window.Vue) return;
		var vm = new Vue({
			el: "#xaml-tabpanel",
			data: {
			},
			created: function () {
				console.dir('created');
			}
		});
	})(); 

*** 
 Part: Taskpad Layout Element 
  Taskpad Layout Element  All containers Represents a container - a taskbar. Displayed on the right
		side of a page or a dialog. Set by the 
		property of the Page ()
		or the Dialog (). 
 Represents a container - a taskbar. Displayed on the right
		side of a page or a dialog. Set by the Taskpad  property of the Page (  Page  )
		or the Dialog (  Dialog  ). Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Title  |  String  |  Taskbar title. 
 Overflow  |  Boolean  |  Whether a scroll-bar can appear in the taskbar. 
 Collapsible  |  Boolean  |  Whether it is possible to minimize the taskbar. 
 Collapsed  |  Boolean?  |  Whether the taskbar is minimized in its initial state. 
 Width  |  Length  |  The taskbar width. 
 Background  |  BackgroundStyle  |  Background color. 
 Base item properties 
 Name  Type  Description  Title  String  Taskbar title.  Overflow  Boolean  Whether a scroll-bar can appear in the taskbar.  Collapsible  Boolean  Whether it is possible to minimize the taskbar.  Collapsed  Boolean?  Whether the taskbar is minimized in its initial state.  Width  Length  The taskbar width.  Background  BackgroundStyle  Background color.  Base item properties 

*** 
 Part: Toolbar Layout Element 
  Toolbar Layout Element  All containers Represents a toolbar. 
 Represents a toolbar. Any item can be placed in the toolbar, but most often, simple
		 buttons,
		 text boxes,
		etc. are placed there. The 
		element is used to visually separate the buttons. 
 Any item can be placed in the toolbar, but most often, simple  Button  buttons,  TextBox  text boxes,
		etc. are placed there. The  Separator  element is used to visually separate the buttons. To split button blocks into two parts - left and right, the 
		attached property is used. 
 To split button blocks into two parts - left and right, the Toolbar.Align  attached property is used. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Style  |  ToolbarStyle  |  Toolbar display style. Possible values:
Default - (by default) standard display.
Transparent - transparent toolbar.
Light - light style.
The exact display type depends on the user interface theme. 
 Border  |  ToolbarBorderStyle  |  Frame. Possible values:
None - (by default) no frame.
Bottom - frame bottom only.
BottomShadow - bottom frame with shadow.
The exact display type depends on the user interface theme. 
 AlignItems  |  AlignItems  |  Items alignment mode. 
 Base item properties 
 Name  Type  Description  Style ToolbarStyle  Toolbar display style. Possible values: Default  - (by default) standard display. Transparent  - transparent toolbar. Light  - light style.  The exact display type depends on the user interface theme.  Border ToolbarBorderStyle  Frame. Possible values: None  - (by default) no frame. Bottom  - frame bottom only. BottomShadow  - bottom frame with shadow.  The exact display type depends on the user interface theme.  AlignItems  AlignItems  Items alignment mode.  Base item properties  Attached properties 
[Table]
 Name  |  Type  |  Description 
 Toolbar.Align  |  ToolbarAlign  |  Where to place the item. Possible values:
Left - (by default) To the left block of buttons.
Right - To the right block of buttons. 
 Name  Type  Description  Toolbar.Align ToolbarAlign  Where to place the item. Possible values: Left  - (by default) To the left block of buttons. Right  - To the right block of buttons.  Example XAML 
 XAML <Toolbar> <Button Content  = "Open" Icon  = "File" /> <Button Icon  = "Save" Content  = "Save" /> <Button Icon  = "Close" Content  = "Close" /> <Separator / > <Button Icon  = "Help" Content  = "Help" Toolbar.Align  = "Right" /> </Toolbar> Result 
 Result  Open  Save  Close  Help 

*** 
 Part: Wizard Layout Element 
  Wizard Layout Element  All containers Represents a Wizard consisting of several separate
		 pages. 
 Represents a Wizard consisting of several separate  WiazrdPage  pages. Inherits:  :  :  :  : 
 Inherits:  Dialog  :  RootContainer  :  Container  :  UIElement  :  UIElementBase Content property: .
		Will always be a collection of the . 
 Content property: Children  .
		Will always be a collection of the  WiazrdPage  .  Properties 
[Table]
 Name  |  Type  |  Description 
 FinishCommand  |  BindCmd  |  The command which will be executed when the Finish button is pressed. 
 Base item properties 
 Name  Type  Description  FinishCommand  BindCmd  The command which will be executed when the Finish  button is pressed.  Base item properties  Specific features Navigation buttons (, ,  and  buttons)
		are displayed and controlled automatically. When you press the  button, the
		command specified by the  property will be executed. 
 Navigation buttons (  Back  ,  Next  ,  Done  and  Cancel  buttons)
		are displayed and controlled automatically. When you press the  Done  button, the
		command specified by the FinishCommand  property will be executed. 

*** 
 Part: [NO H1] 
  Warning  /sata1/home/users/a2dnua/www/docs-en.a2v10.com/root.php  16  A2v10:SDK version 10 A2v10 Platform documentation  UK  Content  Index  Search 

*** 
 Part: Text Elements 
  Text Elements Text elements (inlines) are used to display text/images. 
 Text elements (inlines) are used to display text/images.  Abstract Elements  Inline  - inline element  Text elements  Badge  - badge.  Break  - line break.  Html  - HTML-text.  Hyperlink  - link.  Line  - horizontal line.  Paragraph  - paragraph of text.  Popover  - link for the popup element.  Span  - inline element.  SpanIcon  -  icon in text.  SpanSum  - inline element for amount.  StaticImage  - image in text.  TagLabel  - label - tag.  Text  - text. 

*** 
 Part: Badge Element 
  Badge Element  All text elements Represents a badge with additional text (for example, the number of elements). 
 Represents a badge with additional text (for example, the number of elements). Inherits:  :  : 
 Inherits:  Inline  :  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  String  |  Content property. Badge text. 
 Small  |  Boolean  |  Reduced font. The specific font size depends on the user interface theme. 
 Basic element properties 
 Name  Type  Description  Content  String  Content property. Badge text.  Small  Boolean  Reduced font. The specific font size depends on the user interface theme.  Basic element properties Some elements, such as  or
		,  have a  property that
		actually inserts the  element to the correct place. 
 Note!  Some elements, such as  Header  or  Tab  ,  have a Badge  property that
		actually inserts the Badge  element to the correct place.  Example XAML 
 XAML <Text>  Total  elements: <Badge>  25 </Badge> </Text> Result 
 Result  Total elements: 25 

*** 
 Part: Break Element 
  Break Element  All text elements Represents text wrapping to the next line. Usually located inside a  element. 
 Represents text wrapping to the next line. Usually located inside a  Text  element. Inherits:  :  : 
 Inherits:  Inline  :  UIElement  :  UIElementBase The element does not contain its own properties.
		. 
 The element does not contain its own properties.  Basic element properties  . 

*** 
 Part: Hyperlink Element 
  Hyperlink Element  All text elements Represents a hyperlink. 
 Represents a hyperlink. Inherits:  :  : 
 Inherits:  Inline  :  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  String  |  Link text. 
 Command  |  BindCmd  |  The command to be executed when the hyperlink is clicked. 
 Icon  |  Icon  |  Icon 
 Size  |  ControlSize  |  Link size. Possible values:
Default - by default (Normal).
Small - reduced.
Normal - regular.
Large - increased 
 Style  |  HyperlinkStyle  |  Link style. Possible values:
Default - by default. Regular link.
Popover - link for tooltip. Underlined by a dotted line. Its specific look depends on the user interface theme. 
 DropDown  |  UIElementBase  |  The dropdown element associated with the link. This is typically the DropDownMenu element. 
 HideCaret  |  Boolean  |  Hide dropdown expand icon. 
 Highlight  |  Boolean  |  Highlight the icon with the color of the active hyperlink when you hover the mouse cursor. It makes sense only for certain icons (e. g. Send). 
 TestId  |  String  |  Item ID for testing tools. 
 Hint  |  Popover  |  Tooltip for the link. It is displayed as an icon specified in the Icon property of the Popover object. If the icon is not specified,  is displayed. 
 Basic element properties 
 Name  Type  Description  Content  String  Link text.  Command  BindCmd  The command to be executed when the hyperlink is clicked.  Icon  Icon  Icon  Size ControlSize  Link size. Possible values: Default  - by default (Normal). Small  - reduced. Normal  -  regular. Large  -  increased  Style HyperlinkStyle  Link style. Possible values: Default  - by default. Regular link. Popover  - link for tooltip. Underlined by 
							a dotted line. Its specific look depends on the user interface theme.  DropDown  UIElementBase  The dropdown element associated with the link. This is typically the  DropDownMenu  element.  HideCaret  Boolean  Hide dropdown expand icon.  Highlight  Boolean  Highlight the icon with the color of the active hyperlink when you hover the mouse 
					cursor. It makes sense only for certain icons (e. g. Send  ).  TestId  String  Item ID for testing tools.  Hint  Popover  Tooltip for the link. It is displayed as an icon specified in the Icon  property of the Popover  object.
					If the icon is not specified,  is displayed.  Basic element properties 

*** 
 Part: HTML Element 
  HTML Element  All text elements Represents a piece of text that displays html markup. 
 Represents a piece of text that displays html markup. Inherits:  :  : 
 Inherits:  Inline  :  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  String  |  Content property. Text content. HTML tags are allowed. 
 Basic element properties 
 Name  Type  Description  Content  String  Content property. Text content. HTML tags are allowed.  Basic element properties  Description It is inconvenient to use html markup when working directly with xaml. All
		html tags have to be escaped. For example, if you want to display text in
		bold, you have to write code like this: 
 It is inconvenient to use html markup when working directly with xaml. All
		html tags have to be escaped. For example, if you want to display text in
		bold, you have to write code like this: <Html>  This  is  &lt;b&gt;semibold&lt;/b&gt;  text </Html>  Instead, it is much more convenient to use XAML elements: <Text>  This  is <Span Bold  = "True" >  semibold </Span>  text </Text>  Or to use a CDATA element: <Html> <![CDATA[
      This is
    <b>semibold</b> font
      ]]> </Html>  Most often this element is used to display html-text obtained, for example, from a database. Note!  try to display html code entered by the user or received from an external 
		source. Although the system excludes potentially dangerous fragments such as scripts or frames 
		from such code, the markup may be irreversibly corrupted. 
 Note!  Never  try to display html code entered by the user or received from an external 
		source. Although the system excludes potentially dangerous fragments such as scripts or frames 
		from such code, the markup may be irreversibly corrupted. 

*** 
 Part: Line Element 
  Line Element  All text elements Represents a simple horizontal line across the full width of the container.
		The color of the line depends on the container where it is located. 
 Represents a simple horizontal line across the full width of the container.
		The color of the line depends on the container where it is located. Inherits:  :  : 
 Inherits:  Inline  :  UIElement  :  UIElementBase The element does not contain its own properties.
		. 
 The element does not contain its own properties.  Basic element properties.  . 

*** 
 Part: Paragraph Element 
  Paragraph Element  All text elements Represents a paragraph of text. 
 Represents a paragraph of text. Inherits:  : 
 Inherits:  UIElement  :  UIElementBase Content property: 
 Content property: Inlines  Properties 
[Table]
 Name  |  Type  |  Description 
 Inlines  |  InlineCollection  |  Content property. Collection of strings or Inline elements. 
 Small  |  Boolean  |  Reduced font. The specific font size depends on the user interface theme. 
 Color  |  TextColor  |  Text color. 
 Basic element properties 
 Name  Type  Description  Inlines  InlineCollection  Content property. Collection of strings or  Inline  elements.  Small  Boolean  Reduced font. The specific font size depends on the user interface theme.  Color  TextColor  Text color.  Basic element properties  Description The content of the  element can be formed from other elements (e. g.,
		 or ),
		or from simple text strings. The text string is simply moved to the markup (no additional tags are added). 
 The content of the Paragraph  element can be formed from other elements (e. g.,  Span  or  Hyperlink  ),
		or from simple text strings. The text string is simply moved to the markup (no additional tags are added). 

*** 
 Part: Popover Element 
  Popover Element  All text elements Represents a link that, when clicked (or hovered over),
		displays a popover window. The popover can contain either 
		plain text or another element, or link to another . 
 Represents a link that, when clicked (or hovered over),
		displays a popover window. The popover can contain either 
		plain text or another element, or link to another url  . Inherits:  :  : 
 Inherits:  Inline  :  UIElement  :  UIElementBase Content property: 
 Content property: Content Converter: conversion from a string of text and from any element that inherits the  is supported. 
 Converter: conversion from a string of text and from any element that inherits the  UIElement  is supported.  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  Object  |  Content property. Can be a plain text or any element. 
 Url  |  String  |  Url for getting content from the server. In this case, the popover will contain its own data model, its own template, and of course the markup itself. 
 Text  |  String  |  Link text. 
 Icon  |  Icon  |  Icon for link. 
 ShowOnHover  |  Boolean  |  Display a prompt not upon click, but upon mouse hover. Not compatible with the external content. 
 Badge  |  String  |  Text badge on the element. Usually displayed on an icon. 
 Width  |  Length  |  Popover width. 
 Placement  |  PopupPlacement  |  Popover position. Possible values:
TopRight - (by default) top, expands to the right.
TopLeft - top, expands to the left.
RightBottom - right, expands downwards.
RightTop - right, expands upwards.
BottomRight - bottom, expands to the right.
BottomLeft - bottom, expands to the left.
LeftBottom - left, expands downwards.
LeftTop - left, expands upwards. 
 Underline  |  PopoverUnderlineMode  |  The style of the link underlining upon the mouse hover. Possible values:
Enable - (by default) underline.
Disable - do not underline.
ShowOnHover - underline upon the mouse hover. 
 Background  |  PopoverBackgroundStyle  |  The popover background color. Possible values (note that specific colors depend on the current UI theme):
#fffce9 Default - by default.
#fffce9 Yellow - yellow.
#edfcfe Cyan - cyan.
#f4ffd8 Green - green.
#fedbdb Red - red.
#e5f1fe Blue - blue.
#ffffff White - white. 
 OffsetX  |  Length  |  The popover horizontal offset. Can be negative. 
 Basic element properties 
 Name  Type  Description  Content  Object  Content property. Can be a plain text or any element.  Url  String  Url for getting content from the server. In this case, the 
					popover will contain its own data model, its own template, 
					and of course the markup itself.  Text  String  Link text.  Icon  Icon  Icon for link.  ShowOnHover  Boolean  Display a prompt not upon click, but upon mouse hover.
				Not compatible with the external content.  Badge  String  Text badge on the element. Usually displayed on an icon.  Width  Length  Popover width.  Placement  PopupPlacement  Popover position. Possible values: TopRight  - (by default) top, expands to the right. TopLeft  - top, expands to the left. RightBottom  - right, expands downwards. RightTop  - right, expands upwards. BottomRight  - bottom, expands to the right. BottomLeft  - bottom, expands to the left. LeftBottom  - left, expands downwards. LeftTop  -  left, expands upwards.  Underline  PopoverUnderlineMode  The style of the link underlining upon the mouse hover. Possible values: Enable  - (by default) underline. Disable  - do not underline. ShowOnHover  - underline upon the mouse hover.  Background  PopoverBackgroundStyle  The popover background color. Possible values (note that specific colors depend on the current UI theme): Default  - by default. Yellow  - yellow. Cyan  - cyan. Green  - green. Red  - red. Blue  - blue. White  - white.  OffsetX  Length  The popover horizontal offset. Can be negative.  Basic element properties Note! If the  property is set, then it makes no sense to place other controls inside
		the control element. In any case, you will not be able to access them. In fact, as soon as you remove
		the mouse cursor from the text, the pop-over window will disappear.
		
		
		In addition, the  property is not compatible with the ability to retrieve the contents 
		of a window from the server (external Url). This is done for performance reasons so as not to access the
		server with every mouse movement. 
 Note! If the  ShowOnHover  property is set, then it makes no sense to place other controls inside
		the control element. In any case, you will not be able to access them. In fact, as soon as you remove
		the mouse cursor from the text, the pop-over window will disappear.  In addition, the  ShowOnHover  property is not compatible with the ability to retrieve the contents 
		of a window from the server (external Url). This is done for performance reasons so as not to access the
		server with every mouse movement.  Example XAML 
 XAML <FlexList> <Popover Text  = "TopRight..." Icon  = "Help" >  Top,  expands  to  the  right </Popover> <Popover Text  = "TopLeft..." Underline  = "Hover" Background  = "Cyan" >  Top,  expands  to  the  left </Popover> <Popover Text  = "RightBottom..." Underline  = "Disable" Background  = "Red" Icon  = "HelpOutline" >  Right,  expands  downwards </Popover> <Popover Text  = "LeftTop..." Background  = "Green" Hover  = "True" Icon  = "Report" >  Left,  expands  upwards </Popover> </FlexList> Result 
 Result  Top, expands to the right  Top, expands to the left  Right, expands downwards  Left, expands upwards  (function () {
			if (!window.Vue) return;
			var vm = new Vue({
				el: "#popover-control",
				data: {
				}
			});
		})(); 

*** 
 Part: Span Element 
  Span Element  All text elements Represents a piece of text. 
 Represents a piece of text. Inherits:  :  : 
 Inherits:  Inline  :  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  String  |  Content property. Text content. 
 Small  |  Boolean  |  Reduced font. The specific font size depends on the user interface theme. 
 Big  |  Boolean  |  Enlarged font. The specific font size depends on the user interface theme. 
 Space  |  SpaceMode  |  Add a space before or after an element. Possible values:
None - (by default) no spaces.
Before - space before element.
After - space after element.
Both - space before and after element. 
 MaxChars  |  Int32  |  The maximum number of characters in an element. Works only for bound values. If there are more characters in the value, then the text is cut off and an ellipsis is added to the end. Don’t forget to provide the user with the full text (for example, using a prompt - Tip). 
 Basic element properties 
 Name  Type  Description  Content  String  Content property. Text content.  Small  Boolean  Reduced font. The specific font size depends on the user interface theme.  Big  Boolean  Enlarged font. The specific font size depends on the user interface theme.  Space  SpaceMode  Add a space before or after an element. Possible values: None  - (by default) no spaces. Before  - space before element. After  - space after element. Both  - space before and after element.  MaxChars  Int32  The maximum number of characters in an element. Works only for bound values. If there 
					are more characters in the value, then the text is cut off and an ellipsis is added to 
					the end. Don’t forget to provide the user with the full text (for example, using a prompt - Tip  ).  Basic element properties 

*** 
 Part: SpanIcon Element 
  SpanIcon Element  All text elements Represents an icon in the text. 
 Represents an icon in the text. Inherits:  :  : 
 Inherits:  Inline  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Icon  |  Icon  |  Displayed icon. 
 Size  |  Length  |  Icon font size. 
 Gray  |  Boolean  |  Display the icon in gray. The specific color depends on the UI theme. 
 Basic element properties 
 Name  Type  Description  Icon  Icon  Displayed icon.  Size  Length  Icon font size.  Gray  Boolean  Display the icon in gray. The specific color depends on the UI theme.  Basic element properties 

*** 
 Part: SpanSum Element 
  SpanSum Element  All text elements Represents an inline text element for displaying the amount. Displays
		the amount in green or red) and the income/expense symbol in the form of an icon. 
 Represents an inline text element for displaying the amount. Displays
		the amount in green or red) and the income/expense symbol in the form of an icon. Inherits:  :  : 
 Inherits:  Inline  :  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  Object  |  Displayed amount. 
 Dir  |  Int32  |  Income/expense attribute. If the value is greater than zero - income, less than zero - expense, equal to zero - income/expense. 
 Basic element properties 
 Name  Type  Description  Content  Object  Displayed amount.  Dir  Int32  Income/expense attribute. If the value is greater than zero - 
				income, less than zero - expense, equal to zero - income/expense.  Basic element properties  Amount display example  (function () {
			if (!window.Vue) return;
			var du = require('std:utils').date;
			var vm = new Vue({
				el: "#xaml-control",
				data: {
					sums: [
						{ val: '4 000.00', dir: 1 },
						{ val: '3 000.00', dir: -1 },
						{val: '5 000.00', dir: 0}
					]
				}
			});
		})(); 

*** 
 Part: StaticImage Element 
  StaticImage Element  All text elements Represents a picture in a text. 
 Represents a picture in a text. Inherits:  :  : 
 Inherits:  Inline  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Url  |  String  |  The path to the image file relative to the application folder. Can be the bind (Bind). 
 Height  |  Length  |  Picture height. 
 Basic element properties 
 Name  Type  Description  Url  String  The path to the image file relative to the  application folder  .
					Can be the bind (  Bind  ).  Height  Length  Picture height.  Basic element properties 

*** 
 Part: TagLabel Element 
  TagLabel Element  All text elements Represents a text label-marker. Most commonly used 
		to display the status of something. 
 Represents a text label-marker. Most commonly used 
		to display the status of something. Inherits:  :  : 
 Inherits:  Inline  :  UIElement  :  UIElementBase Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  String  |  Content property. The text content of the label. 
 Style  |  Enum  |  The display style of the label. Possible values:
Default Green Success Warning Orange Info Cyan
Error Danger Red Purple Pink Gold Blue
Salmon Seagreen Tan Magenta LightGray 
 Basic element properties 
 Name  Type  Description  Content  String  Content property. The text content of the label.  Style  Enum  The display style of the label. Possible values: Default Green Success Warning Orange Info Cyan Error Danger Red Purple Pink Gold Blue Salmon Seagreen Tan Magenta LightGray  Basic element properties 

*** 
 Part: Text Element 
  Text Element  All text elements Represents a piece of text. Supports the possibility to insert additional inline elements
		(e. g. ) directly into the text. 
 Represents a piece of text. Supports the possibility to insert additional inline elements
		(e. g.  Span  ) directly into the text. Inherits:  : 
 Inherits:  UIElement  :  UIElementBase Content property: 
 Content property: Inlines  Properties 
[Table]
 Name  |  Type  |  Description 
 Inlines  |  InlineCollection  |  Content property. Text content. A line of text that can include other inline elements. 
 Align  |  TextAlign  |  Text alignment. 
 Block  |  Boolean  |  Display text as a block element, not as an inline element. 
 Small  |  Boolean  |  Reduced font. The specific font size depends on the user interface theme. 
 Big  |  Boolean  |  Enlarged font. The specific font size depends on the user interface theme. 
 Size  |  TextSize  |  The text size. Possible values:
Normal - (by default) normal text size.
Big - enlarged (same as Small="True")
Small - reduced (same as Big="True") 
 Gray  |  Boolean  |  Gray text color. The specific color depends on the user interface theme. 
 Color  |  TextColor  |  Text color. 
 Basic element properties 
 Name  Type  Description  Inlines InlineCollection  Content property. Text content. A line of text that can include other inline elements.  Align  TextAlign  Text alignment.  Block  Boolean  Display text as a block element, not as an inline element.  Small  Boolean  Reduced font. The specific font size depends on the user interface theme.  Big  Boolean  Enlarged font. The specific font size depends on the user interface theme.  Size TextSize  The text size. Possible values: Normal  - (by default) normal text size. Big  - enlarged (same as Small="True"  ) Small  - reduced (same as Big="True"  )  Gray  Boolean  Gray text color. The specific color depends on the user interface theme.  Color  TextColor  Text color.  Basic element properties 

*** 
 Part: Elements of the Sheets 
  Elements of the Sheets  Elements of the Sheets  Sheet  - sheet  SheetCell  - sheet cell.  SheetCellGroup  -  group of the sheet cells.  SheetColumn  -  sheet column.  SheetColumnGroup  - group of the sheet columns.  SheetGroupCell  - sheet cell for grouping elements.  SheetPage  - printed page.  SheetRow  - sheet row.  SheetSection  - sheet section.  SheetTreeSection  - table section for hierarchical data.  SheetAutoGenerate  - description of automatic generation. 

*** 
 Part: Sheet Element 
  Sheet Element  All elements of the sheets Represents a spreadsheet-style table.
		The table is optimized for easy export to Excel. 
 Represents a spreadsheet-style table.
		The table is optimized for easy export to Excel.  Inherits:  UIElement  :  UIElementBase Content property: 
 Content property: Sections  Properties 
[Table]
 Name  |  Type  |  Description 
 Sections  |  SheetSections  |  A set of sheet sections. (SheetSection) 
 Columns  |  SheetColumnCollection  |  Sheet columns. (SheetColumn) 
 Header  |  SheetRows  |  Header lines. (SheetRow) 
 Footer  |  SheetRows  |  Footer lines. (SheetRow) 
 Compact  |  Boolean  |  Compact sheet display style. 
 Hover  |  Boolean  |  Highlighting a line upon mouse hover. 
 Striped  |  Boolean  |  Coloring the sheet "with stripes" with highlighting even and odd rows. 
 GridLines  |  GridLinesVisibility  |  Displaying the grid. Possible values:
None - by default.
Horizontal - horizontal lines.
Vertical - vertical lines.
Both - grid. 
 AutoGenerate  |  SheetAutoGenerate  |  Sheet auto generation. Allows to generate a sheet according to the current data. 
 Basic element properties 
 Name  Type  Description  Sections SheetSections  A set of sheet sections. (  SheetSection  )  Columns SheetColumnCollection  Sheet columns. (  SheetColumn  )  Header SheetRows  Header lines. (  SheetRow  )  Footer SheetRows  Footer lines. (  SheetRow  )  Compact  Boolean  Compact sheet display style.  Hover  Boolean  Highlighting a line upon mouse hover.  Striped  Boolean  Coloring the sheet "with stripes" with highlighting even and odd rows.  GridLines GridLinesVisibility  Displaying the grid. Possible values: None  - by default. Horizontal  - horizontal lines. Vertical  - vertical lines. Both  - grid.  AutoGenerate  SheetAutoGenerate  Sheet auto generation. Allows to generate a sheet according to the current data.  Basic element properties 

*** 
 Part: SheetCell Element 
  SheetCell Element  All elements of the sheets Represents a sheet cell. 
 Represents a sheet cell.  Inherits:  UIContentElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 ColSpan  |  Int32?  |  Merging of the columns. 
 RowSpan  |  Int32?  |  Merging of the lines. 
 Bold  |  Boolean?  |  Semibold font. If not specified, inherited from the parent string. 
 Italic  |  Boolean?  |  Italic font. If not specified, inherited from the parent string. 
 Underline  |  Boolean  |  Underlined text. 
 Vertical  |  Boolean  |  Vertical orientation of the text in the cell. Auto wrapping is not supported. To break to another line, include "\n" in the text. 
 Align  |  TextAlign  |  Horizontal text alignment. 
 VAlign  |  VerticalAlign  |  Vertical text alignment. 
 GroupIndent  |  Boolean  |  Indentation for hierarchical members. Used if the cell is in the SheetTreeSection section. 
 DataType  |  DataType  |  Data type. It is used if there is no binding in the cell, and when exporting, you need to set the specified data type. 
 MinWidth  |  Length  |  The cell minimum width. 
 CssClass  |  String  |  The css classes which should be added to the cell. 
 Fill  |  Bind  |  Always binding. The color to fill the background of the cell. Used to fill with a background color that depends on the data. Uses background-color css property background-color. Not compatible with the CssStyle. 
 CssStyle  |  Bind  |  Always binding. Cell css rules. The property should return an object. Property name is css property, value is corresponding value. You can use camelCase notation in property names, for example, the background-color property can be represented as backgroundColor. Not compatible with the Fill property. 
 Basic element properties 
 Name  Type  Description  ColSpan  Int32?  Merging of the columns.  RowSpan  Int32?  Merging of the lines.  Bold  Boolean?  Semibold font. If not specified, inherited from the parent string.  Italic  Boolean?  Italic font. If not specified, inherited from the parent string.  Underline  Boolean  Underlined text.  Vertical  Boolean  Vertical orientation of the text in the cell. Auto wrapping is not supported. 
					To break to another line, include "\n" in the text.  Align  TextAlign  Horizontal text alignment.  VAlign  VerticalAlign  Vertical text alignment.  GroupIndent  Boolean  Indentation for hierarchical members. Used if the cell is in the  SheetTreeSection  section.  DataType  DataType  Data type. It is used if there is no binding in the cell, and when 
					exporting, you need to set the specified data type.  MinWidth  Length  The cell minimum width.  CssClass  String  The css classes which should be added to the cell.  Fill  Bind  Always binding. The color to fill the background of the cell. Used
					to fill with a background color that depends on the data. Uses background-color  css property background-color. 
					Not compatible with the CssStyle  .  CssStyle  Bind  Always binding. Cell css rules. The property should return an object.
					Property name is css property, value is corresponding value. You can use camelCase  notation in property names, for example, the background-color  property can be represented as backgroundColor  .
					Not compatible with the Fill  property.  Basic element properties 

*** 
 Part: SheetCellGroup Element 
  SheetCellGroup Element  All elements of the sheets Represents a collection of table cells. Can be used anywhere where the
		 element is allowed to be used. 
 Represents a collection of table cells. Can be used anywhere where the  SheetCell  element is allowed to be used. Content property: 
 Content property: Cells  Properties 
[Table]
 Name  |  Type  |  Description 
 Cells  |  Collection SheetCell  |  Collection of cells in a row. 
 ItemsSource  |  Array  |  Always binding (Bind) Data source for obtaining child cells. 
 Name  Type  Description  Cells  Collection  SheetCell  Collection of cells in a row.  ItemsSource  Array  Always binding (  Bind  ) Data source for obtaining child cells.  Description  Typically this element is used for  cross-data model  collaboration. 

*** 
 Part: SheetColumn Element 
  SheetColumn Element  All elements of the sheets Represents one column of a table. 
 Represents one column of a table.  Properties 
[Table]
 Name  |  Type  |  Description 
 Width  |  Length  |  Column width. 
 Fit  |  Boolean  |  Set column width according to content. 
 Background  |  ColumnBackgroundStyle  |  Column background color. 
 Name  Type  Description  Width  Length  Column width.  Fit  Boolean  Set column width according to content.  Background  ColumnBackgroundStyle  Column background color. 

*** 
 Part: SheetColumnGroup Element 
  SheetColumnGroup Element  All elements of the sheets Represents a collection of sheet columns. Can be used anywhere where the
		 element is valid. 
 Represents a collection of sheet columns. Can be used anywhere where the  SheetColumn  element is valid. Content property: 
 Content property: Columns  Properties 
[Table]
 Name  |  Type  |  Description 
 Columns  |  Collection SheetColumn  |  Collection of columns in a row. 
 ItemsSource  |  Array  |  Always binding (Bind). Data source for obtaining child columns. 
 Name  Type  Description  Columns  Collection  SheetColumn  Collection of columns in a row.  ItemsSource  Array  Always binding (  Bind  ). Data source for obtaining child columns.  Description  Typically this element is used for с  cross-data model  collaboration. 

*** 
 Part: SheetGroupCell Element 
  SheetGroupCell Element  All elements of the sheets Represents a cell for displaying grouping controls in a sheet. 
 Represents a cell for displaying grouping controls in a sheet. The cell has no content, instead it displays the grouping controls in the sheet. 
		The appearance depends on the theme of the user interface. 
 The cell has no content, instead it displays the grouping controls in the sheet. 
		The appearance depends on the theme of the user interface. The use of such a cell only makes sense for rows in hierarchical
		. sections. 
		In all other cases, the cell will simply be empty. 
 The use of such a cell only makes sense for rows in hierarchical  SheetTreeSection  . sections. 
		In all other cases, the cell will simply be empty.  Inherits:  SheetCell  :  UIContentElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 The object has no properties of its own 
 Base item properties 
 Name  Type  Description  The object has no properties of its own  Base item properties 

*** 
 Part: SheetPage Element 
  SheetPage Element  All elements of the sheets Represents a printable page for a .
		Used to visually display printed pages on the screen. 
 Represents a printable page for a  Sheet  .
		Used to visually display printed pages on the screen. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Orientation  |  PageOrientation  |  Page orientation. Possible values:
Portrait - by default. Portrait.
Landscape - by default. Portrait.
If the PrintPage property is specified, then the property is ignored. 
 PageSize  |  Size?  |  Page size. If not specified, then format A4. Please note that it can be problematic to print at the specified sizes. The properties of a printed page can be controlled more flexibly by using the PrintPage property. 
 PrintPage  |  PrintPage  |  Printed page description. 
 Base item properties 
 Name  Type  Description  Orientation PageOrientation  Page orientation. Possible values: Portrait  - by default. Portrait. Landscape  - by default. Portrait.  If the PrintPage  property is specified, then the property is ignored.  PageSize  Size  ?  Page size. If not specified, then format A4. Please note that it can be problematic
					to print at the specified sizes. The properties of a printed page can be controlled
					more flexibly by using the PrintPage  property.  PrintPage  PrintPage  Printed page description.  Base item properties 

*** 
 Part: SheetRow Element 
  SheetRow Element  All elements of the sheets Represents a sheet row. 
 Represents a sheet row.  Inherits:  UIElement  :  UIElementBase Content property: 
 Content property: Cells  Properties 
[Table]
 Name  |  Type  |  Description 
 Cells  |  SheetCell collection  |  A collection of cells in a row. 
 RowStyle  |  RowStyle  |  Row display style. Possible values:
Default - (by default) regular row.
Title - Report title.
Parameter - Report parameter.
LastParameter - The last parameter in the parameters list.
Header - Header row.
LightHeader - Other style header row.
Footer - Footer row.
Total - Totals row.
NoBorder - Row with cells without borders. 
 Align  |  TextAlign?  |  Horizontal alignment for all cells in the row. Can be redefined in each cell individually. 
 Mark  |  Object  |  Binding only. Row marking. Details below. 
 Base item properties 
 Name  Type  Description  Cells  SheetCell  collection  A collection of cells in a row.  RowStyle RowStyle  Row display style. Possible values: Default  - (by default) regular row. Title  - Report title. Parameter  - Report parameter. LastParameter  - The last parameter in the parameters list. Header  - Header row. LightHeader  - Other style header row. Footer  - Footer row. Total  - Totals row. NoBorder  - Row with cells without borders.  Align  TextAlign?  Horizontal alignment for all cells in the row. Can be redefined in each cell individually.  Mark  Object  Binding only. Row marking. Details below.  Base item properties  Row marking The binding expression for the  property must return a text string, which represents an 
		additional css class to add to the string. The default theme supports the following options of line markings: 
 The binding expression for the Mark  property must return a text string, which represents an 
		additional css class to add to the string. The default theme supports the following options of line markings: 
[Table]
 "danger", "error", "red"  |  Row content 
 "warning", "orange"  |  Row content 
 "success", "green"  |  Row content 
 "info", "cyan"  |  Row content 
 "gray"  |  Row content 
"danger", "error", "red"  Row content "warning", "orange"  Row content "success", "green"  Row content "info", "cyan"  Row content "gray"  Row content Note! The marking simply adds the css class to the row. This means that you
		are not limited to just the options specified. For example, if the property
		of the binding returns , then the row will be 
		highlighted with a red background and displayed in a semibold font. 
 Note! The marking simply adds the css class to the row. This means that you
		are not limited to just the options specified. For example, if the property
		of the binding returns "danger bold"  , then the row will be 
		highlighted with a red background and displayed in a semibold font. 

*** 
 Part: SheetSection Element 
  SheetSection Element  All elements of the sheets Represents the sheet section. 
 Represents the sheet section. The section is used when you need to bind data to a data source.
		The source is specified by the . binding.
		The section rows will be repeated for each element of the source array. 
 The section is used when you need to bind data to a data source.
		The source is specified by the ItemsSource  . binding.
		The section rows will be repeated for each element of the source array. If rows are directly specified in the body of the sheet, then they fall 
	into the section, which is created implicitly. It is impossible to specify
	a data source for such a section. 
 If rows are directly specified in the body of the sheet, then they fall 
	into the section, which is created implicitly. It is impossible to specify
	a data source for such a section.  Inherits:  UIElement  :  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Children  |  SheetRow Collection  |  A collection of rows in a section. 
 ItemsSource  |  Array  |  Always binding (Bind). Data source for obtaining children. 
 Base item properties 
 Name  Type  Description  Children  SheetRow  Collection  A collection of rows in a section.  ItemsSource  Array  Always binding (  Bind  ). 
				Data source for obtaining children.  Base item properties 

*** 
 Part: SheetTreeSection Element 
  SheetTreeSection Element  All elements of the sheets Represents a section for placing hierarchical data. 
		Binds to a data source recursively. 
 Represents a section for placing hierarchical data. 
		Binds to a data source recursively. Designated for binding to  or .
		Such models are in fact recursive. 
 Designated for binding to  hierarchical models  or  models with grouping  .
		Such models are in fact recursive.  Inherits:  SheetSection  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 The object has no properties of its own. 
 Base item properties 
 Name  Type  Description  The object has no properties of its own.  Base item properties To display a hierarchy control in a sheet, use the  element. 
 To display a hierarchy control in a sheet, use the  SheetGroupCell  element. 

*** 
 Part: SheetAutoGenerate Element 
  SheetAutoGenerate Element  All elements of the sheets An object that describes the rules for generating a table from data. 
 An object that describes the rules for generating a table from data. Converter: conversion from a string of text to an object is supported,
		where the given string is a , and . 
 Converter: conversion from a string of text to an object is supported,
		where the given string is a PropertyName  , and Mode = FromDataModel  .  Properties 
[Table]
 Name  |  Type  |  Description 
 Mode  |  SheetAutoGenerateMode  |  Auto-generation mode. Possible values:
FromDataModel - by default. From the data model. The PropertyName property should be set. 
 PropertyName  |  String  |  Name of the model property that should represent the collection to generate the table. 
 Name  Type  Description  Mode SheetAutoGenerateMode  Auto-generation mode. Possible values: FromDataModel  - by default. From the data model.
							The PropertyName  property should be set.  PropertyName  String  Name of the model property that should represent the collection to generate the table. 

*** 
 Part: Bindings 
  Bindings Bindings are used to organize the interaction of the user interface with model
		objects. Most commonly (although not obligatory) are set using 
		. 
 Bindings are used to organize the interaction of the user interface with model
		objects. Most commonly (although not obligatory) are set using  markup extensions  .  Bindings  Bind  - element binding.  BindCmd  - command binding.  StyleResource  - style binding. 

*** 
 Part: Bind Binding 
  Bind Binding  All bindings Represents a special object that describes the relationship between a property and a data item. 
		Almost always specified as a . 
 Represents a special object that describes the relationship between a property and a data item. 
		Almost always specified as a  markup extensions  . The binding is always two-way. This means that when the value in the model changes, 
		the associated property changes automatically and vice versa. 
 The binding is always two-way. This means that when the value in the model changes, 
		the associated property changes automatically and vice versa. It is possible to bind almost any properties of any element. Note that binding 
		properties, in turn, can also be bindings. 
 It is possible to bind almost any properties of any element. Note that binding 
		properties, in turn, can also be bindings.  Properties 
[Table]
 Name  |  Type  |  Description 
 Path  |  String  |  By default. An expression describing the path to the model property. 
 DataType  |  DataType  |  Data type. 
 Format  |  String  |  Display format. 
 Mask  |  String  |  Value display mask. 
 HideZeros  |  Boolean  |  Hide null values. This makes sense only for number formats. 
 NegativeRed  |  Boolean  |  Show negative values in red. This makes sense only for number formats. 
 Filters  |  FilterCollection  |  Filters to process the associated value after the update. Represents a comma-separated list of enumerations. Possible values:
Trim - trim spaces at the beginning and at the end of the text.
Upper - convert characters to uppercase.
Lower - convert characters to lowercase.
Barcode - used for alphanumeric codes. Replaces Cyrillic letters with Latin letters according to the keyboard layout. 
 Name  Type  Description  Path  String  By default. An expression describing the path to the model property.  DataType  DataType  Data type.  Format  String  Display format.  Mask  String  Value display mask.  HideZeros  Boolean  Hide null values. This makes sense only for number formats.  NegativeRed  Boolean  Show negative values in red. This makes sense only for number formats.  Filters FilterCollection  Filters to process the associated value after the update. Represents a comma-separated 
					list of enumerations. Possible values: Trim  - trim spaces at the beginning and at the end of the text. Upper  - convert characters to uppercase. Lower  - convert characters to lowercase. Barcode  - used for alphanumeric codes. Replaces Cyrillic 
						letters with Latin letters according to the keyboard layout.  Example Binding the Model  element to a text field and displaying it as an amount (with thousands separators) 
 Binding the Model Document.Sum  element to a text field and displaying it as an amount (with thousands separators) XAML 
 XAML <!-- binding via markup extension --> <TextBox Value  = "{Bind Document.Sum, DataType=Currency}" /> <!-- object binding --> <TextBox> <TextBox.Value> <Bind Path  = "Document.Sum" DataType  = "Currency" /> </TextBox.Value> </TextBox> 

*** 
 Part: BindCmd Binding 
  BindCmd Binding  All bindings Represents a special object that describes a command that will be executed in response to some 
		user action (for example, pressing an on-screen button). Almost always specified as a 
		. 
 Represents a special object that describes a command that will be executed in response to some 
		user action (for example, pressing an on-screen button). Almost always specified as a  markup extensions  . Note that an object has quite a lot of properties, but many of them are only used for a specific command. 
 Note that an object has quite a lot of properties, but many of them are only used for a specific command.  Properties 
[Table]
 Name  |  Type  |  Description 
 Command  |  Command  |  By default. The command being executed. Possible commands are described below. 
 Argument  |  Object  |  Command argument. Almost always binding (Bind). 
 Data  |  Object  |  Additional data for the command. Almost always binding (Bind). 
 Url  |  String  |  URL for external command. 
 CommandName  |  String  |  Only for the Execute command. Command name in template (template.commands). 
 SaveRequired  |  Boolean  |  Save the model before executing the command. 
 ValidRequired  |  Boolean  |  The command requires the model to be in a valid state. 
 Confirm  |  Confirm  |  Ask the user for confirmation before executing the command. 
 NewWindow  |  Boolean  |  Open in a new window. 
 UpdateAfter  |  Object  |  Always binding. An object or array to update after performing any actions. 
 ReloadAfter  |  Boolean  |  Refresh the model after executing the command. 
 Export  |  Boolean  |  Whether to export instead of display. Not compatible with Print. 
 Print  |  Boolean  |  Whether to print instead of display. 
 FileAction  |  Enum  |  Action for the File command. 
 Action  |  Enum  |  Action for the Dialog command. 
 Name  Type  Description  Command Command  By default. The command being executed. Possible commands are described below.  Argument  Object  Command argument. Almost always binding (  Bind  ).  Data  Object  Additional data for the command. Almost always binding (  Bind  ).  Url  String  URL for external command.  CommandName  String  Only for the  Execute  command. Command name in template (  template.commands  ).  SaveRequired  Boolean  Save the model before executing the command.  ValidRequired  Boolean  The command requires the model to be in a valid state.  Confirm  Confirm  Ask the user for confirmation before executing the command.  NewWindow  Boolean  Open in a new window.  UpdateAfter  Object  Always binding. An object or array to update after performing any actions.  ReloadAfter  Boolean  Refresh the model after executing the command.  Export  Boolean  Whether to export instead of display. Not compatible with Print  .  Print  Boolean  Whether to print instead of display.  FileAction  Enum  Action for the File  command.  Action  Enum  Action for the Dialog  command.  Commands  Open  - open the form Navigates to the specified URL with the specified argument. 
 Navigates to the specified URL with the specified argument.  Arguments: Url  - The path to the form. Required. Argument  - Command argument. Required. NewWindow  - Open in a new window. UpdateAfter  - Binding to an element that will 
			probably be updated when performing any actions. It only makes 
			sense if the form is opened in a new window.  Clear  - clear Clears the argument object. 
 Clears the argument object.  Arguments: Argument  - Binding to an array or an object to be cleared. In fact, the
				command just calls the  $empty  method of the associated object or array. Note that the control associated with this command will not be displayed if the object or array
			is already empty. Additional binding of the  property is not required. 
 Note that the control associated with this command will not be displayed if the object or array
			is already empty. Additional binding of the If  property is not required.  Close  - close Closes the current form or dialog. The command has no arguments. 
 Closes the current form or dialog. The command has no arguments.  CloseOk  - close For dialogues only. Closes the current dialog with the answer 
			. The command has no arguments. 
 For dialogues only. Closes the current dialog with the answer true  . The command has no arguments.  Reload  ,  Refresh  - refresh Updates the current model or its part. If an argument is set, then
			only the part of the model is updated. Updating part of the model is
			used for . 
 Updates the current model or its part. If an argument is set, then
			only the part of the model is updated. Updating part of the model is
			used for  "lazy arrays"  .  Arguments: Argument  - Binding to the array to update. Not required.  Requery  - refresh Reloads the entire form from the server (including reloading the markup). 
			The command has no arguments. 
 Reloads the entire form from the server (including reloading the markup). 
			The command has no arguments.  Print  - print Prints the current page. The command has no arguments. Note that the current
			page image is actually printed. Some elements (for example
			) are not printed.
			You can use the  property of the
			 object to further 
			control the visibility of elements when printing. 
 Prints the current page. The command has no arguments. Note that the current
			page image is actually printed. Some elements (for example  Taskpad  ) are not printed.
			You can use the Print  property of the  UIElement  object to further 
			control the visibility of elements when printing.  Dialog  - dialog Displays the dialog and performs the specified action. 
 Displays the dialog and performs the specified action.  Arguments: Action  - action. Possible values: Edit  - edit the item specified by the 
						argument. After the dialog is closed, the item will be updated. EditSelected  - edit the selected collection
						item. The collection is specified by the command argument. After the dialog 
						is closed, the selected item will be refreshed. Show  - display the item set by the argument. ShowSelected  - show the selected item of the collection.
						The collection is specified by the command argument. Browse  - select the item given by the argument. 
						The item is replaced with the one selected in the dialog. Append  - create a new item and add it to the collection. The collection is specified by an argument. New  - create a new item. Copy  - create a copy of the given item. The item is specified by an argument. Argument  - Binding to an item or collection. Data  - Additional data for calling the dialog. They will be parameters of the procedure for loading the dialog model. URL  - URL to the dialog from the  dialogs  section of the model.json  description file. SaveRequired  , ValidRequired  , ReloadAfter  -
				additional command conditions.  File  - working with files (binary objects, blobs) Displays, downloads, or prints an attachment (blob). It can be a card, a file, etc. 
 Displays, downloads, or prints an attachment (blob). It can be a card, a file, etc.  Learn more about working with binary objects.  Arguments: FileAction  - action with the file. Possible values: Show  - display data on the page. Download  - load data as a file. Print  - print file data. Argument  - Binding to a property that will set the ID of the blob. URL  - The URL to the action from the  files  section of the model.json  file.  Download  - download Allows the user to upload a static file. Static files associated with the application must be placed in 
			a special folder called . 
 Allows the user to upload a static file. Static files associated with the application must be placed in 
			a special folder called  _files  .  Arguments: Url  - path to the static file. The path is specified relative to the  _files  . 

*** 
 Part: StyleResource 
  StyleResource 

*** 
 Part: Components 
  Components Components have no external representation and are used to change the behavior of other components. 
 Components have no external representation and are used to change the behavior of other components.  Components  CollectionView  - collection view.  Confirm  - confirmation.  FilterDescription  - defining the filter.  Slot  - block with binding to an item.  SortDescription  - defining the sorting.  Switch  - selection of markup depending on the condition.  Validator  - validator view. 

*** 
 Part: CollectionView Component 
  CollectionView Component  All components Represents an element that allows you to manipulate collections. Provides pagination,
		sorting and filtering. The collection can be processed both on the server and on the client. 
 Represents an element that allows you to manipulate collections. Provides pagination,
		sorting and filtering. The collection can be processed both on the server and on the client. Inside the element, the processed collection is accessed by the  link. 
		Server-side processing requires special . 
 Inside the element, the processed collection is accessed by the Parent  link. 
		Server-side processing requires special  support at the data model level  . Inherits: 
 Inherits:  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Children  |  UIElementCollection  |  Content property. A collection of children. 
 ItemsSource  |  Array  |  Always binding - Bind. Data source for working with the collection. 
 RunAt  |  RunMode  |  Collection operation mode. Possible values:
Client - (by default). The collection is processed on the client.
Server - the collection is processed on the server.
ServerUrl - the collection is processed on the server. Additionally, the request parameters are added to the url for collection processing. 
 Filter  |  FilterDescription  |  Defining filters. 
 PageSize  |  Int32?  |  Page size. For work by the client only. 
 Sort  |  SortDescription  |  Defining the sorting. For work by the client only. 
 FilterDelegate  |  String  |  Delegate for filtering. For work by the client only. 
 Base item properties 
 Name  Type  Description  Children  UIElementCollection  Content property. A collection of children.  ItemsSource  Array  Always binding -  Bind  . Data source for working with the collection.  RunAt RunMode  Collection operation mode. Possible values: Client  - (by default). The collection is processed on the client. Server  - the collection is processed on the server. ServerUrl  - the collection is processed on the server. Additionally, the
							request parameters are added to the url for collection processing.  Filter  FilterDescription  Defining filters.  PageSize  Int32?  Page size. For work by the client only.  Sort  SortDescription  Defining the sorting. For work by the client only.  FilterDelegate  String  Delegate for filtering. For work by the client only.  Base item properties A component has properties that child components can access. Such a call 
		is made through the  prefix. 
 A component has properties that child components can access. Such a call 
		is made through the Parent  prefix.  External Properties 
[Table]
 Name  |  Type  |  Description 
 ItemsSource  |  Array  |  Part of the collection being displayed. Contains the data of the selected page in a properly sorted form. 
 Filter  |  Object  |  Collection filter. Object structure matches the FilterDescription filter definition. 
 Pager  |  Object  |  The source to bind to the Source property of the Pager object. 
 Name  Type  Description  ItemsSource  Array  Part of the collection being displayed. Contains the data of the selected page in a properly sorted form.  Filter  Object  Collection filter. Object structure matches the  FilterDescription  filter definition.  Pager  Object  The source to bind to the Source  property of the  Pager  object. The  component interacts very closely with objects that
		support working with collections (in particular, the ).
		For example, clicking on a column heading automatically changes the sorting in the parent component. No 
		additional actions are required. 
 Please note!  The CollectionView  component interacts very closely with objects that
		support working with collections (in particular, the  DataGrid  ).
		For example, clicking on a column heading automatically changes the sorting in the parent component. No 
		additional actions are required.  Example XAML: 
 XAML: <CollectionView ItemsSource  = "{Bind Documents}" RunAt  = "ServerUrl" > <DataGrid ItemsSource  = "{Bind Parent.ItemsSource}" Sort  = "True" > <DataGridColumn Content  = "{Bind Id}" Header  = "Id" /> <DataGridColumn Content  = "{Bind Name}" Header  = "Name" /> </DataGrid> <Pager Source  = "{Bind Parent.Pager}" /> </CollectionView> 

*** 
 Part: Confirm Component 
  Confirm Component  All components 

*** 
 Part: Defining a filter for a collection 
  Defining a filter for a collection  All components 

*** 
 Part: Slot Component 
  Slot Component  All components Represents an element that sets the data context and scope for nested components. 
 Represents an element that sets the data context and scope for nested components. Inherits: 
 Inherits:  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Children  |  UIElementCollection  |  Content property. A collection of children. 
 Scope  |  Object  |  Always binding (Bind). Data context. 
 Fallback  |  UIElementBase  |  The element that will be displayed if the data context is empty. 
 Base item properties 
 Name  Type  Description  Children  UIElementCollection  Content property. A collection of children.  Scope  Object  Always binding (  Bind  ). Data context.  Fallback  UIElementBase  The element that will be displayed if the data context is empty.  Base item properties  Example XAML: 
 XAML: <!--Binding to the selected item of the collection --> <List ItemsSource  = "{Bind Agents}" >  ... </List> <Slot Scope  = "{Bind Agents.$selected}" > <!--actually: Agents.$selected.Documents--> <DataGrid ItemsSource  = "{Bind Documents}" >  ... </DataGrid> <Slot.Fallback> <Text>  No  selected  items </Text> </Slot.Fallback> </Slot> 

*** 
 Part: Defining sorting for a collection 
  Defining sorting for a collection  All components Specifies the property name and sort order for the collection. Has a 
		meaning only useful for collections that are processed by the client. 
 Specifies the property name and sort order for the collection. Has a 
		meaning only useful for collections that are processed by the client.  Properties 
[Table]
 Name  |  Type  |  Description 
 Property  |  String  |  The name of the property to be sorted 
 Dir  |  SortDirection  |  Sorting direction. Possible values:
Asc - (by default). Ascending.
Desc - descending. 
 Name  Type  Description  Property  String  The name of the property to be sorted  Dir SortDirection  Sorting direction. Possible values: Asc  - (by default). Ascending. Desc  - descending. 

*** 
 Part: Switch Component 
  Switch Component  All components 

*** 
 Part: Validator Component 
  Validator Component  All components 

*** 
 Part: Simple Elements 
  Simple Elements Simple markup elements generally support converting from a string. This allows for a significant reduction in the markup code. 
 Simple markup elements generally support converting from a string. This allows for a significant reduction in the markup code.  Simple elements  Length  - length.  Size  - size.  Thickness  - size of rectangular area.  GapSize  - gap.  PrintPage  - description of the print page.  Accel  - accelerator (hotkey).  AccelCommand  - accelerator command.  Collections  AccelCommandCollection  - collection of accelerators.  UIElementCollection  - collection of elements.  ResourceDictionary  - resource dictionary. 

*** 
 Part: Accel Elements 
  Accel Elements  All simple elements Represents the description of the accelerator (hotkey). 
 Represents the description of the accelerator (hotkey). Used by:
		,
		. 
 Used by:  TextBox  ,  AccelCommand  .  Properties 
[Table]
 Name  |  Type  |  Description 
 Key  |  String  |  Accelerator (hot key). It is set in the form of a key name and optional (one or more) modifiers. Modifiers and key names are separated by a "+" sign. 
 Name  Type  Description  Key  String  Accelerator (hot key). It is set in the form of a key name and optional 
					(one or more) modifiers. Modifiers and key names are separated by a "+" sign.  Key names 
[Table]
 Unit  |  Description 
 A..Z, 0..9  |  Alphanumeric keys. 
 F0..F12  |  Functional keys. 
 Left, Right, Up, Down  |  Arrow keys. 
 PageUp, PageDown, Insert, Delete,
Enter, Escape, Tab, Home, End,
Backspace, Delete  |  Control keys. 
 Unit  Description  A..Z, 0..9  Alphanumeric keys.  F0..F12  Functional keys.  Left, Right, Up, Down  Arrow keys.  PageUp, PageDown, Insert, Delete,  Enter, Escape, Tab, Home, End,  Backspace, Delete  Control keys.  Modifiers 
[Table]
 Unit  |  Description 
 Control, Ctrl  |  Control key. 
 Shift  |  Shift key. 
 Alt  |  Alt key. 
 Meta  |  Windows - key ⊞ Windows.
Mac - key ⌘ Command.
Please note, may not work in all browsers. 
 Unit  Description  Control, Ctrl  Control key.  Shift  Shift key.  Alt  Alt key.  Meta  Windows - key  ⊞ Windows  .  Mac - key  ⌘ Command  .  Please note, may not work in all browsers.  Converter Conversion from text string is supported. The string will simply be the value of the  property. 
 Conversion from text string is supported. The string will simply be the value of the Key  property.  Example XAML 
 XAML <TextBox Accel  = "Ctrl+Shift+F7" >  ... </TextBox> 

*** 
 Part: AccelCommand Element 
  AccelCommand Element  All simple elements Represents an object that connects a command and an accelerator (hot key). Pressing 
		this key executes the command. 
 Represents an object that connects a command and an accelerator (hot key). Pressing 
		this key executes the command.  Properties 
[Table]
 Name  |  Type  |  Description 
 Accel  |  Accel  |  Accelerator (hot key). 
 Command  |  BindCmd  |  Command. It will be executed when the accelerator key is pressed. 
 Name  Type  Description  Accel  Accel  Accelerator (hot key).  Command  BindCmd  Command. It will be executed when the accelerator key is pressed. 

*** 
 Part: GapSize Element 
  GapSize Element  All simple elements Specifies the gap size along the primary (X) and auxiliary (Y) axes. Primary and auxiliary
		axes can be swapped based on the orientation of the component. Although an element is an 
		object, most often the value is set using a converter from a text string. 
 Specifies the gap size along the primary (X) and auxiliary (Y) axes. Primary and auxiliary
		axes can be swapped based on the orientation of the component. Although an element is an 
		object, most often the value is set using a converter from a text string.  Properties 
[Table]
 Name  |  Type  |  Description 
 X  |  Length  |  Primary axis gap. 
 Y  |  Length  |  Auxiliary axis gap. 
 Name  Type  Description  X  Length  Primary axis gap.  Y  Length  Auxiliary axis gap.  Converter Converting from a text string is supported. The X and Y values are separated by commas. If 
		only one value is specified, then it will be used as both X and Y. 
 Converting from a text string is supported. The X and Y values are separated by commas. If 
		only one value is specified, then it will be used as both X and Y. 

*** 
 Part: Length Element 
  Length Element  All simple elements Sets length. Specified as a number with optional units of measurement, or as multiple literal values. The units 
		of measure correspond to the units in css. 
 Sets length. Specified as a number with optional units of measurement, or as multiple literal values. The units 
		of measure correspond to the units in css.  Measurement units 
[Table]
 Unit  |  Description 
 %  |  Percents. 
 px  |  Pixels (1px = 1/96in). This is the value by default and is used if no measurement unit is specified. 
 mm  |  Millimeters. 
 cm  |  Centimeters. 
 pt  |  Points (1pt = 1/72in). 
 in  |  Inches (1in = 2.54cm). 
 ch  |  Characters (using the "0" character width). 
 em  |  The width of the "m" character in the current font. 
 rem  |  The width of the "m" character of the root element (the one specified in the <html>) tag. 
 ex  |  The x-height in the current font. 
 vh  |  1% of the window height (viewport). 
 vw  |  1% of the window width (viewport). 
 vmin  |  Lesser of vh, vw. 
 vmin  |  Greater of vh, vw. 
 Unit  Description  %  Percents.  px  Pixels (1px = 1/96in). This is the value by default and is used if no measurement unit is specified.  mm  Millimeters.  cm  Centimeters.  pt  Points (1pt = 1/72in).  in  Inches (1in = 2.54cm).  ch  Characters (using the "0" character width).  em  The width of the "m" character in the current font.  rem  The width of the "m" character of the root element (the one 
				
				specified in the <html>) tag.  ex  The x-height in the current font.  vh  1% of the window height (viewport).  vw  1% of the window width (viewport).  vmin  Lesser of  vh  ,  vw  .  vmin  Greater of  vh  ,  vw  .  Literal values 
[Table]
 Value  |  Description 
 Auto  |  Automatically. Corresponds to auto css. 
 Fit  |  The minimum content value. Corresponds to fit-content css value. 
 Value  Description  Auto  Automatically. Corresponds to  auto  css.  Fit  The minimum content value. Corresponds to  fit-content  css value.  Example XAML 
 XAML <Block Width  = "25%" Height  = "50rem" >  ... </Block> 

*** 
 Part: Size Element 
  Size Element  All simple elements Sets the size horizontally (Width) and vertically (Height). Although the item 
		represents an object, most often the value is specified using a text-string converter. 
 Sets the size horizontally (Width) and vertically (Height). Although the item 
		represents an object, most often the value is specified using a text-string converter.  Properties 
[Table]
 Name  |  Type  |  Description 
 Width  |  Length  |  Width. 
 Height  |  Length  |  Height. 
 Name  Type  Description  Width  Length  Width.  Height  Length  Height.  Converter Conversion from text string is supported. The width and height values are separated by commas. 
		If only one value is specified, it will be used as both width and height. 
 Conversion from text string is supported. The width and height values are separated by commas. 
		If only one value is specified, it will be used as both width and height.  Example XAML 
 XAML <!--Using the converter--> <Selector ListSize  = "25rem,10rem" >  ... </Selector> <!--direct property assignment--> <Selector> <Selector.ListSize> <Size Width  = "25rem" Height  = "10rem" /> </Selector.ListSize> </Selector> 

*** 
 Part: Thickness Element 
  Thickness Element  All simple elements 

*** 
 Part: PrintPage Element 
  PrintPage Element  All simple elements Represents the rules for the generation of a print page. 
 Represents the rules for the generation of a print page.  Properties 
[Table]
 Name  |  Type  |  Description 
 Orientation  |  PageOrientation  |  Page orientation. Possible values:
Portrait - by default. Portrait.
Landscape - landscape. 
 Margin  |  Thickness  |  Fields for the page. 
 Zoom  |  ZoomValue  |  Scale. Possible values:
Auto - Auto. The system is attempting to print the content on one page.
Value - Value. 1 - 100%. 
 Name  Type  Description  Orientation PageOrientation  Page orientation. Possible values: Portrait  - by default. Portrait. Landscape  - landscape.  Margin  Thickness  Fields for the page.  Zoom ZoomValue  Scale. Possible values: Auto  - Auto. The system is attempting to print the content on one page. Value  - Value. 1 - 100%. 

*** 
 Part: AccelCommandCollection Element 
  AccelCommandCollection Element  All simple elements Represents a simple collection of the  objects. 
 Represents a simple collection of the  AccelCommand  objects. The object does not contain any additional properties. 
 The object does not contain any additional properties. 

*** 
 Part: UIElementCollection Element 
  UIElementCollection Element  All simple elements Represents a simple collection of  objects (or their descendants). 
 Represents a simple collection of  UIElement  objects (or their descendants). The object does not contain any additional properties. 
 The object does not contain any additional properties. 

*** 
 Part: ResourceDictionary Element 
  ResourceDictionary Element  All simple elements 

*** 
 Part: Listings 
  Listings  Listings  AlignItem  - vertical alignment in the container.  AlignItems  - alignment of children.  AutoFlowMode  -  automatic filling mode.  AutoSelectMode  - automatic selection of an element.  BackgroundStyle  - background style.  BorderStyle  - frame style.  ButtonStyle  - command button style.  ColumnBackgroundStyle  - background color for the column.  ColumnControlType  - control type for the column.  ControlSize  - control size.  DataType  - data type.  Icon  - icons.  JustifyItems  - distribution of children.  ListStyle  - list display style.  Orientation  - the direction in which elements are placed.  RadioButtonStyle  - radio button display mode.  ShadowStyle  - element shadow style.  TextAlign  - horizontal alignment.  TextColor  - text color.  UpdateTrigger  - model update mode.  VerticalAlign  - vertical alignment.  WrapMode  - wrap mode. 

*** 
 Part: AlignItem Listing 
  AlignItem Listing  All listings Sets the alignment inside the container. 
 Sets the alignment inside the container. Used by: 
 Used by:  Grid  Values 
[Table]
 Value  |  Description 
 Default  |  By default. Not specified. Behavior depends on the container 
 Start  |  From the beginning (along the main axis of the container) 
 End  |  From the end (along the main axis of the container) 
 Top  |  Align top 
 Bottom  |  Align bottom 
 Middle  |  Center 
 Center  |  Center 
 Stretch  |  Stretch to the full width/height of the container 
 Baseline  |  Along the baseline of the text 
 Value  Description  Default  By default. Not specified. Behavior depends on the container  Start  From the beginning (along the main axis of the container)  End  From the end (along the main axis of the container)  Top  Align top  Bottom  Align bottom  Middle  Center  Center  Center  Stretch  Stretch to the full width/height of the container  Baseline  Along the baseline of the text 

*** 
 Part: AlignItems Listing 
  AlignItems Listing  All listings Sets the alignment of the items. 
 Sets the alignment of the items. Used by:
		,
		,
		. 
 Used by:  StackPanel  ,  Toolbar  ,  FlexList  .  Values 
[Table]
 Value  |  Description 
 Default  |  By default. Baseline 
 Baseline  |  Along the text baseline 
 Center  |  Center 
 Start  |  By the beginning of the axis (left for horizontal panels, top for vertical) 
 End  |  By the end of the axis (right for horizontal panels, bottom for vertical). 
 Stretch  |  Stretch to the full width/height of the container. 
 Value  Description  Default  By default. Baseline  Baseline  Along the text baseline  Center  Center  Start  By the beginning of the axis (left for horizontal panels, top for vertical)  End  By the end of the axis (right for horizontal panels, bottom for vertical).  Stretch  Stretch to the full width/height of the container. 

*** 
 Part: AutoFlowMode Listing 
  AutoFlowMode Listing  All listings Sets the auto-fill mode for the grid. 
 Sets the auto-fill mode for the grid.  Values 
[Table]
 Value  |  Description 
 Default  |  By default. Not specified 
 Row  |  By rows 
 Column  |  By columns 
 RowDense  |  By rows with compaction (the order of the items can be changed) 
 ColumnDense  |  By columns with compaction (the order of the items can be changed) 
 Value  Description  Default  By default. Not specified  Row  By rows  Column  By columns  RowDense  By rows with compaction (the order of the items can be changed)  ColumnDense  By columns with compaction (the order of the items can be changed) 

*** 
 Part: AutoSelect Listing 
  AutoSelect Listing  All listings Sets the automatic selection of items in the container after loading/updating. 
 Sets the automatic selection of items in the container after loading/updating. Used by:
		,
		,
		. 
 Used by:  DataGrid  ,  List  ,  TreeView  .  Values 
[Table]
 Value  |  Description 
 None  |  Default. Do not highlight the item. 
 FirstItem  |  Highlight the first item. 
 LastItem  |  Highlight the last item. 
 ItemId  |  Highlight an item with a given identifier (the identifier is taken from the url of the page). Not supported for DataGrid. 
 Value  Description  None  Default. Do not highlight the item.  FirstItem  Highlight the first item.  LastItem  Highlight the last item.  ItemId  Highlight an item with a given identifier (the identifier is taken from the url of the 
					page). Not supported for  DataGrid  . 

*** 
 Part: BackgroundStyle Listing 
  BackgroundStyle Listing  All listings Sets the background of the item. 
 Sets the background of the item. Used by:
		,
		,
		,
		,
		,
		,
		. 
 Used by:  Block  ,  List  ,  Grid  ,  Page  ,  Panel  ,  Partial  ,  Taskpad  .  Values 
[Table]
 Value  |  Description 
 None  |  Default. Not set. In fact, this is a transparent background, that is, the background of the parent item will be displayed. 
 LightGray  |  Light-grey: #e9e9e9 
 WhiteSmoke  |  Smoky: #f9f9f9 
 White  |  White: #ffffff 
 LightYellow  |  Light-yellow: #fffff0 
 Value  Description  None  Default. Not set. In fact, this is a transparent background, that is, the background of the parent item will be displayed.  LightGray  Light-grey: #e9e9e9  WhiteSmoke  Smoky: #f9f9f9  White  White: #ffffff  LightYellow  Light-yellow: #fffff0 Please note! The specific background colors will depend on the UI theme.
		The colors above are used in the “default” theme. 
 Please note! The specific background colors will depend on the UI theme.  The colors above are used in the “default” theme. 

*** 
 Part: ButtonStyle Listing 
  ButtonStyle Listing  All listings Sets the style of the command button. The exact look and color of the button depends on the user interface theme. 
 Sets the style of the command button. The exact look and color of the button depends on the user interface theme. Used by:
		. 
 Used by:  Button  .  Values 
[Table]
 Value  |  Description 
 Default  |  By default. Gray. 
 Primary  |  Main button. Dark blue. 
 Danger, Error, Red  |  Error. Red. 
 Success, Green  |  Success. Green. 
 Warning, Orange  |  Warning. Orange. 
 Info, Cyan  |  Information. Light-blue. 
 Outline  |  Outline only. 
 Value  Description  Default  By default. Gray.  Primary  Main button. Dark blue.  Danger, Error, Red  Error. Red.  Success, Green  Success. Green.  Warning, Orange  Warning. Orange.  Info, Cyan  Information. Light-blue.  Outline  Outline only. 

*** 
 Part: BorderStyle Listing 
  BorderStyle Listing  All listings Sets the alignment of the items. 
 Sets the alignment of the items. Used by:
		,
		. 
 Used by:  List  ,  FlexList  .  Values 
[Table]
 Value  |  Description 
 None  |  By default. No frame. 
 Top  |  Frame only on top. 
 TopBottom  |  Frame on top and bottom. 
 All  |  All frames. 
 Value  Description  None  By default. No frame.  Top  Frame only on top.  TopBottom  Frame on top and bottom.  All  All frames. 

*** 
 Part: ColumnBackgroundStyle Listing 
  ColumnBackgroundStyle Listing  All listings Sets the background of a table column. 
 Sets the background of a table column. Used by:
		, 
 Used by:  SheetColumn  ,  TableColumn  Values 
[Table]
 Value  |  Description 
 None  |  By default. Not set. In fact, this is a transparent background. 
 Yellow  |  Yellow: rgba(255,255,164, 0.25) 
 Green  |  Green: rgba(220,255,220, 0.25) 
 Red  |  Red: rgba(255,220,237, 0.25) 
 Blue  |  Blue: rgba(196,237,255, 0.25) 
 Gray  |  Gray: rgba(240,240,240, 0.25) 
 Value  Description  None  By default. Not set. In fact, this is a transparent background.  Yellow  Yellow:  Green  Green:  Red  Red:  Blue  Blue:  Gray  Gray: Please note! The specific background colors will depend on the user interface theme.
		The colors above are used in the default theme. 
 Please note! The specific background colors will depend on the user interface theme.  The colors above are used in the default theme. 

*** 
 Part: ColumnControlType Listing 
  ColumnControlType Listing  All listings 

*** 
 Part: ControlSize Listing 
  ControlSize Listing  All listings 

*** 
 Part: DataType Listing 
  DataType Listing  All listings Sets the data type. 
 Sets the data type. Used by: 
 Used by:  Bind  Values 
[Table]
 Value  |  Description 
 String  |  By default. Row. 
 Date  |  Date (without time). 
 DateTime  |  Date and time. 
 Number  |  Number. 
 Currency  |  Amount. 
 Boolean  |  Boolean value. 
 Object  |  Object. 
 Period  |  Period. A special object consisting of two dates: the beginning and the end of the period. 
 Value  Description  String  By default. Row.  Date  Date (without time).  DateTime  Date and time.  Number  Number.  Currency  Amount.  Boolean  Boolean value.  Object  Object.  Period  Period. A special object consisting of two dates: the beginning and the end of the period. 

*** 
 Part: Icon Listing 
  Icon Listing  All listings Sets the icon (sign) to display inside the item. 
 Sets the icon (sign) to display inside the item. Used by:
		,
		,
		,
		,
		,
		,
		,
		,
		,
		,
		, 
 Used by:  Alert  ,  Button  ,  DataGridColumn  ,  Hyperlink  ,  ListItem  ,  MenuItem  ,  TreeView  ,  TreeViewItem  ,  Panel  ,  Popover  ,  SpanIcon  ,  StateCard  Image  Possible values and type of icon Access Account AccountFolder Add AddressBook AddressCard Alert Approve ArrowDown ArrowDownRed ArrowLeft ArrowLeftRight ArrowRight ArrowUp ArrowUpGreen ArrowExport ArrowOpen ArrowSort Attach Ban Bank BankAccount BankUah Bell BrandExcel Calc Calendar Call Camera ChartArea ChartBar ChartColumn ChartPie ChartPivot ChartStackedArea ChartStackedBar ChartStackedLine Check CheckBold Checkbox CheckboxChecked ChevronDown ChevronLeft ChevronDoubleLeft ChevronLeftEnd ChevronRight ChevronDoubleRight ChevronRightEnd ChevronUp Circle CircleSmall Clear Close Cloud CloudOutline Copy Cut Comment CommentAdd CommentDiscussion CommentLines CommentNext CommentOutline CommentPrevious CommentUrgent Company Confirm CurrencyEur CurrencyOther CurrencyUah CurrencyUsd Delete DeleteBox DeleteRed Dashboard DashboardOutline Database Devices Disapprove Dot DotBlue DotGreen DotRed Download Edit Ellipsis EllipsisBottom EllipsisVertical Error ErrorOutline Exit Export ExportExcel External Eye EyeDisabled EyeDisabledRed Failure FailureRed FailureOutline Flag FlagBlue FlagGreen FlagRed FlagYellow Flag2 File FileContent FileError FileFailure FileImage FileImport FileLink FilePreview FileSignature FileSuccess FileUser FileWarning Filter FilterOutline Flame Folder FolderOutline FolderQuery Gear GearOutline Grid Help HelpOutline HelpBlue History Home Info InfoBlue InfoOutline Image Import Items Link List ListBullet Lock LockOutline Log Menu Message MessageOutline Minus MinusBox MinusCircle Package PackageOutline PaneLeft PaneRight Paste Pencil PencilOutline Pin PinOutline Pinned PinnedOutline Play PlayOutline Plus PlusBox PlusCircle Policy Power Print Process Query Queue Refresh Reload Rename Report Requery Save SaveAs SaveOutline SaveClose SaveCloseOutline Search Security Send SendOutline Server Share Smile SmileSad Square Star StarOutline StarYellow Step Steps Storyboard Success SuccessGreen SuccessOutline Switch Table Tag TagBlue TagGreen TagOutline TagRed TagYellow TaskComplete Trash TriangleLeft TriangleRight Unlock UnlockOutline Unpin UnpinOutline Upload Upload2 User UserImage UserMinus UserPlus Users Waiting WaitingOutline Warehouse Warning WarningOutline WarningYellow Workflow1 Wrench 

*** 
 Part: ListStyle Listing 
  ListStyle Listing  All listings Sets the style of the  item. 
 Sets the style of the  List  item.  Values 
[Table]
 Value  |  Description 
 List  |  By default. Items are placed from top to bottom. 
 TwoColumnsGrid  |  Items are placed in a table with two columns of equal width. 
 ThreeColumnsGrid  |  Items are placed in a table with three columns of equal width. 
 Underlined  |  Items are placed from top to bottom. A horizontal line is displayed after each item. 
 Chat  |  Items are placed in the form of a chat. The list items in this case will most often be the ChatItem items. 
 Value  Description  List  By default. Items are placed from top to bottom.  TwoColumnsGrid  Items are placed in a table with two columns of equal width.  ThreeColumnsGrid  Items are placed in a table with three columns of equal width.  Underlined  Items are placed from top to bottom. A horizontal line is displayed after each item.  Chat  Items are placed in the form of a chat. The list items in this case will most often be the  ChatItem  items. 

*** 
 Part: Orientation Listing 
  Orientation Listing  All listings Sets the direction/orientation for the items/content. 
 Sets the direction/orientation for the items/content.  Values 
[Table]
 Value  |  Description 
 Vertical  |  By default. Items are placed from top to bottom. 
 Horizontal  |  Items are placed from left to right. 
 Value  Description  Vertical  By default. Items are placed from top to bottom.  Horizontal  Items are placed from left to right. 

*** 
 Part: RadioButtonStyle Listing 
  RadioButtonStyle Listing  All listings Sets how the radio button is displayed. 
 Sets how the radio button is displayed. Used by: 
 Used by:  Radio  Values 
[Table]
 Value  |  Description  |  Appearance 
 Default  |  Default. Standard display.  |   
 CheckBox  |  Display as a checkbox.  |   
 Value  Description  Appearance  Default  Default. Standard display.  CheckBox  Display as a checkbox. 

*** 
 Part: ShadowStyle Listing 
  ShadowStyle Listing  All listings Sets the style of the shadow projected by the item. 
 Sets the style of the shadow projected by the item. Used by:
		,
		,
		,
		, 
 Used by:  Alert  ,  Block  ,  Grid  ,  Panel  ,  StateCard  Possible values 
[Table]
 Value  |  Description 
 None  |  By default. No shadow. 
 Shadow1-Shadow5  |  Options 1-5. The larger the number, the denser the shadow. 
 Value  Description  None  By default. No shadow.  Shadow1-Shadow5  Options 1-5. The larger the number, the denser the shadow.  Examples  Shadow1  Shadow2  Shadow3  Shadow4  Shadow5 Please note! The exact types of the shadows will depend on the theme of the user interface theme.
		The specified shadow options are used in the default theme. 
 Please note! The exact types of the shadows will depend on the theme of the user interface theme.  The specified shadow options are used in the default theme. 

*** 
 Part: TextAlign Listing 
  TextAlign Listing  All listings Sets the horizontal alignment of text or items in the container. 
 Sets the horizontal alignment of text or items in the container.  Values 
[Table]
 Value  |  Description 
 Default  |  By default. To the left. 
 Left  |  To the left. 
 Center  |  Center. 
 Right  |  To the right. 
 Value  Description  Default  By default. To the left.  Left  To the left.  Center  Center.  Right  To the right. 

*** 
 Part: TextColor Listing 
  TextColor Listing  All listings 

*** 
 Part: UpdateTrigger Listing 
  UpdateTrigger Listing  All listings Sets the update mode for the model value. 
 Sets the update mode for the model value.  Values 
[Table]
 Value  |  Description 
 Default  |  By default. Blur 
 Blur  |  The value in the model is updated only when the item loses focus or when the Enter key is pressed. 
 Input  |  The value is updated as you enter characters in the input field. 
 Value  Description  Default  By default. Blur  Blur  The value in the model is updated only when the item loses focus or when the  Enter  key is pressed.  Input  The value is updated as you enter characters in the input field. 

*** 
 Part: VerticalAlign Listing 
  VerticalAlign Listing  All listings Sets the vertical alignment of the text in the container. 
 Sets the vertical alignment of the text in the container.  Values 
[Table]
 Value  |  Description 
 Default  |  By default. Not specified. Behavior depends on the item. 
 Top  |  Top 
 Middle  |  Center. 
 Bottom  |  Bottom. 
 Value  Description  Default  By default. Not specified. Behavior depends on the item.  Top  Top  Middle  Center.  Bottom  Bottom. 

*** 
 Part: WrapMode Listing 
  WrapMode Listing  All listings 

*** 
 Part: Abstract Elements 
  Abstract Elements Abstract elements are intended to be inherited by other items. They cannot be created directly in the markup. 
 Abstract elements are intended to be inherited by other items. They cannot be created directly in the markup.  Abstract Elements  CheckBoxBase  - control to be checked.  Control  - generalized control.  CommandControl  - command control.  Container  - generalized container.  ContentControl  - control that supports content.  Inline  - inline element.  RootContainer  - root container.  ValuedControl  - control that supports value.  UIContentElement  - base UI element with content.  UIElementBase  - base UI element.  UIElement  - UI element. 

*** 
 Part: CheckBoxBase Abstract Element 
  CheckBoxBase Abstract Element  All abstract elements Represents the base control to be checked. 
 Represents the base control to be checked.  Inherits:  ValuedControl  :  Control  :  UIElement  :  UIElementBase Derived elements:
		, 
 Derived elements:  CheckBox  ,  Radio Content property: 
 Content property: Label  Properties 
[Table]
 Name  |  Type  |  Description 
 Color  |  TextColor  |  The text color of the control's label. 
 Base item properties 
 Name  Type  Description  Color  TextColor  The text color of the control's label.  Base item properties 

*** 
 Part: Control Abstract Element 
  Control Abstract Element  All abstract elements Represents an abstract control. 
 Represents an abstract control. Inherits:  : 
 Inherits:  UIElement  :  UIElementBase Derived elements: ,
		,
		,
		,
		, 
 Derived elements:  ValuedControl  ,  ContentControl  ,  List  ,  DataGrid  ,  TreeView  ,  Table  Properties 
[Table]
 Name  |  Type  |  Description 
 Block  |  Boolean  |  Render the control as a block element rather than an inline element. 
 Label  |  String  |  The text control for the item. Usually displayed above or on the left of the input field. 
 Description  |  String  |  Description for the control. Typically displayed below the input field. 
 Required  |  Boolean  |  Required value to enter. Please note that this is only a visual representation of the required input in the input field (the specific look depends on the user interface theme). Use template validators to manage checks. 
 Disabled  |  Boolean  |  The control is not available for input. Typically the Bind binding is used to control this field. 
 Width  |  Length  |  The control width. By default, an element occupies 100% of the width of the parent element. For some containers (e.g. Toolbar) the width of the nested elements will be set to a certain default value. 
 TabIndex  |  Int32  |  The control’s ordinal number in the chain of transitions by the Tab key. A value of "-1" excludes the item from the navigation chain. 
 TestId  |  String  |  The control’s ID for testing tools. 
 Popover  |  Popover  |  The tooltip for the control. Displayed as a link  on the right of the control. 
 Hint  |  Popover  |  The tooltip for the control. It is displayed as  after the mark. The icon can be replaced by specifying the Icon property of the Popover object. 
 Validator  |  Validator  |  Allows to set properties of the control’s validator, such as position or width. 
 AddOns  |  UIElementCollection  |  Additional controls. Usually these are hyperlinks that execute some additional commands. 
 Link  |  UIElement  |  Additional link associated with the control. Displays in the upper right corner of the control. This is typically a hyperlink. 
 Base item properties 
 Name  Type  Description  Block  Boolean  Render the control as a block element rather than an inline element.  Label  String  The text control for the item. Usually displayed above or on the left of the input field.  Description  String  Description for the control. Typically displayed below the input field.  Required  Boolean  Required value to enter. Please note that this is only a visual representation of the 
				required input in the input field (the specific look depends on the user interface theme).
				Use  template validators  to manage checks.  Disabled  Boolean  The control is not available for input. Typically the  Bind  binding is used to control this field.  Width  Length  The control width. By default, an element occupies 100% of the width of the parent element.
					For some containers (e.g.  Toolbar  ) 
					the width of the nested elements will be set to a certain default value.  TabIndex  Int32  The control’s ordinal number in the chain of transitions by the  Tab  key. A value of "-1" excludes the item from the navigation chain.  TestId  String  The control’s ID for testing tools.  Popover  Popover  The tooltip for the control. Displayed as a link  on the right of the control.  Hint  Popover  The tooltip for the control. It is displayed as  after the mark. The icon can be replaced by specifying the Icon  property of the Popover  object.  Validator  Validator  Allows to set properties of the control’s validator, such as position or width.  AddOns  UIElementCollection  Additional controls. Usually these are hyperlinks that execute some additional commands.  Link  UIElement  Additional link associated with the control. Displays in the upper right corner of the control.
				This is typically a hyperlink.  Base item properties  Example XAML 
 XAML <!-- the control example --> <TextBox Label  = "Control’s label" Description  = "Control’s description" Hint  = "The tooltip text for the editor" > <TextBox.AddOns> <Hyperlink Icon  = "Search" /> </TextBox.AddOns> <TextBox.Link> <Hyperlink Content  = "more..." /> </TextBox.Link> </TextBox> Result 
 Result Control’s label Editor tooltip text  more... Control’s description  (function () {
		if (!window.Vue) return;
		var du = require('std:utils').date;
		var vm = new Vue({
			el: "#xaml-control",
			data: {
				Agent: {
					Name: ''
				}
			}
		});
	})(); 

*** 
 Part: CommandControl Abstract Element 
  CommandControl Abstract Element  All abstract elements Represents an abstract control with a command. 
 Represents an abstract control with a command. Inherits:  :  :  : 
 Inherits:  ContentControl  :  Control  :  UIElement  :  UIElementBase Derived elements: , 
 Derived elements:  Button  ,  MenuItem  Properties 
[Table]
 Name  |  Type  |  Description 
 Command  |  BindCmd  |  The command associated with the control. 
 Base item properties 
 Name  Type  Description  Command  BindCmd  The command associated with the control.  Base item properties 

*** 
 Part: Container Abstract Element 
  Container Abstract Element  All abstract elements The  element represents an abstract container. The  property specifies a list of the children. 
 The Container  element represents an abstract container. The Children  property specifies a list of the children. Inherits:  : 
 Inherits:  UIElement  :  UIElementBase Derived elements:
		
		,
		,
		,
		,
		,
		,
		,
		,
		,
		,
		,
		,
		,
		,
		,
		,
		,
		, 
 Derived elements:  CardBody  Toolbar  ,  StackPanel  ,  Splitter  ,  DropDownMenu  ,  DropDownMegaMenu  ,  FieldSet  ,  Flex  ,  Case  ,  TaskPad  ,  Group  ,  GridGroup  ,  Tab  ,  FullHeightPanel  ,  CommandBar  ,  FlexList  ,  Panel  ,  Grid  ,  Card  ,  SheetPage Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Children  |  UIElementCollection  |  Content property. Collection of the children. 
 ItemsSource  |  Array  |  Always binding (Bind). Data source for obtaining children. 
 Base item properties 
 Name  Type  Description  Children  UIElementCollection  Content property. Collection of the children.  ItemsSource  Array  Always binding (  Bind  ). Data source for obtaining children.  Base item properties 

*** 
 Part: ContentControl Abstract Element 
  ContentControl Abstract Element  All controls Represents an abstract control with content. 
 Represents an abstract control with content. Inherits:  :  : 
 Inherits:  Control  :  UIElement  :  UIElementBase Derived elements: , 
 Derived elements:  CommandControl  ,  Code Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  Object  |  Control content. 
 Base item properties 
 Name  Type  Description  Content  Object  Control content.  Base item properties 

*** 
 Part: Inline Abstract Element 
  Inline Abstract Element  All abstract elements Represents a text element (inline element). 
 Represents a text element (inline element). Inherits:  : 
 Inherits:  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Block  |  Boolean  |  Display element as block. 
 Float  |  FloatMode  |  Make the element "floating".
None - (by default) no.
Left - place on the left.
Right - place on the right. 
 Color  |  TextColor  |  Text color. 
 Base item properties 
 Name  Type  Description  Block  Boolean  Display element as block.  Float FloatMode  Make the element "floating". None  - (by default) no. Left  - place on the left. Right  - place on the right.  Color  TextColor  Text color.  Base item properties  Characteristic properties All elements that use the Inline collection as content (such as  or
		) can include both child elements and simple text strings. 
		The text lines are simply taken into the markup (no additional tags are added). 
 All elements that use the Inline collection as content (such as  Text  or  Paragraph  ) can include both child elements and simple text strings. 
		The text lines are simply taken into the markup (no additional tags are added). 

*** 
 Part: RootContainer Abstract Element 
  RootContainer Abstract Element  All abstract elements Represents a top-level abstract container. The  property specifies a list of children. 
 Represents a top-level abstract container. The Children  property specifies a list of children. Inherits:  :  : 
 Inherits:  Container  :  UIElement  :  UIElementBase Content property: 
 Content property: Children  Properties 
[Table]
 Name  |  Type  |  Description 
 Resources  |  ResourceDictionary  |  Resources. 
 AccelCommands  |  AccelCommandCollection  |  Accelerators (hotkeys). 
 Base item properties 
 Name  Type  Description  Resources  ResourceDictionary  Resources.  AccelCommands  AccelCommandCollection  Accelerators (hotkeys).  Base item properties 

*** 
 Part: ValuedControl Abstract Element 
  ValuedControl Abstract Element  All controls Represents an abstract control that contains a value. 
 Represents an abstract control that contains a value.  Inherits:  Control  :  UIElement  :  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Value  |  Object  |  Binding (Bind) only. Binding to a data model value. 
 ValidateValue  |  Object  |  Binding (Bind) only. Binding to a value for validation. It is specified only if the validator needs to be associated not with the value in the element, but with some other property of the model. 
 Base item properties 
 Name  Type  Description  Value  Object  Binding (  Bind  ) only. Binding to a data model value.  ValidateValue  Object  Binding (  Bind  ) only. Binding to a value for validation. 
					It is specified only if the validator needs to be associated not with the value in the element, but with 
					some other property of the model.  Base item properties 

*** 
 Part: UContentElement Abstract Element 
  UContentElement Abstract Element  All abstract elements Represents an abstract user interface element with the content. 
 Represents an abstract user interface element with the content. Inherits: 
 Inherits:  UIElementBase Derived elements: ,
		,
		,
		, 
 Derived elements:  Header  ,  StateCard  ,  SheetCell  ,  TableCell  ,  TableMarkCell Content property: 
 Content property: Content  Properties 
[Table]
 Name  |  Type  |  Description 
 Content  |  Object  |  Element content. 
 Base item properties 
 Name  Type  Description  Content  Object  Element content.  Base item properties 

*** 
 Part: UIElement Abstract Element 
  UIElement Abstract Element  All abstract elements Represents an abstract user interface element. 
 Represents an abstract user interface element. Inherits: 
 Inherits:  UIElementBase  Properties 
[Table]
 Name  |  Type  |  Description 
 Bold  |  Boolean?  |  Semi-bold font. 
 Italic  |  Boolean?  |  Italic font. 
 CssClass  |  String  |  The css classes to add to the element. 
 UserSelect  |  Boolean?  |  Allow or forbid selection of the text of the element with the help of the mouse. 
 Print  |  Boolean?  |  Allow or forbid to print the element. 
 Base item properties 
 Name  Type  Description  Bold  Boolean?  Semi-bold font.  Italic  Boolean?  Italic font.  CssClass  String  The css classes to add to the element.  UserSelect  Boolean?  Allow or forbid selection of the text of the 
				element with the help of the mouse.  Print  Boolean?  Allow or forbid to print the element.  Base item properties 

*** 
 Part: UIElementBase Abstract Element 
  UIElementBase Abstract Element  All abstract elements Represents the user interface basic element. 
 Represents the user interface basic element.  Properties 
[Table]
 Name  |  Type  |  Description 
 If  |  Boolean?  |  Include the element in the render stream. 
 Show  |  Boolean?  |  Display the element. Inversion of the Hide property. 
 Hide  |  Boolean?  |  Hide the element. Inversion of the Show property. 
 Margin  |  Thickness  |  Padding for the element. 
 Padding  |  Thickness  |  Fields for the element. 
 Wrap  |  WrapMode  |  Text wrapping. 
 Absolute  |  Thickness  |  The element absolute positioning. 
 Tip  |  String  |  Tooltip for the element. 
 Render  |  RenderMode?  |  Whether to include the element in the final markup and how exactly to do that. Unlike the If property, this property works on the server at the moment the markup is generated. 
 HtmlId  |  String  |  The identifier (id html attribute) for the element. Typically used for testing or for navigating between the elements using the $focus method of the IController. 
 XamlStyle  |  StyleDescriptor  |  The style of the element. Should always be a StyleResource binding. 
 Name  Type  Description  If  Boolean?  Include the element in the render stream.  Show  Boolean?  Display the element. Inversion of the Hide  property.  Hide  Boolean?  Hide the element. Inversion of the Show  property.  Margin  Thickness  Padding for the element.  Padding  Thickness  Fields for the element.  Wrap  WrapMode  Text wrapping.  Absolute  Thickness  The element absolute positioning.  Tip  String  Tooltip for the element.  Render  RenderMode?  Whether to include the element in the final markup and how exactly to do that.
					Unlike the If  property, this property works on the server at the 
					moment the markup is generated.  HtmlId  String  The identifier ( id  html attribute) for the element. Typically
					used for testing or for navigating between the elements using the $focus  method of the  IController  .  XamlStyle  StyleDescriptor  The style of the element. Should always be a  StyleResource  binding. 

*** 
 Part: Charts 
  Charts The charts are used to display graphical information. 
 The charts are used to display graphical information.  Charts items  Diagram  - chart  Group  - group of items  Path  - line 

*** 
 Part: Diagram Item 
  Diagram Item  All charts items 

*** 
 Part: Group Item 
  Group Item  All charts items 

*** 
 Part: Path Item 
  Path Item  All charts items 

*** 
 Part: Programming on the Client 
  Programming on the Client  General diagram of the client's operation  Description 

*** 
 Part: Controller 
  Controller The controller is responsible for the interaction between the model and the view. Any data object has a
		 property that returns a reference to the current controller. The controller is a 
		regular JavaScript object that implements the following interface: 
 The controller is responsible for the interaction between the model and the view. Any data object has a $ctrl  property that returns a reference to the current controller. The controller is a 
		regular JavaScript object that implements the following interface: interface IController  { // properties readonly  $isDirty  : boolean  ; readonly  $isPristine  : boolean  ; // methods  $invoke  (  command  : string  ,  arg  : object  ,  path?  : string  ,  opts?  :  {  catchError  : boolean  }  )  : Promise  < object  >  ;  $requery  (  )  : void  ;  $reload  (  args?  : any  )  : Promise  < void  >  ;  $modalClose  (  result?  : any  )  : void  ;  $msg  (  msg  : string  ,  title?  : string  ,  style?  : CommonStyle  )  : Promise  < boolean  >  ;  $alert  (  msg  : string  | IMessage  )  : Promise  < boolean  >  ;  $confirm  (  msg  : string  | IConfirm  )  : Promise  < boolean  >  ;  $toast  (  text  : string  ,  style?  : CommonStyle  )  : void  ;  $toast  (  toast  :  {  text  : string  ,  style?  : CommonStyle  }  )  : void  ;  $defer  (  func  :  (  )  =  > void  )  : void  ;  $showDialog  (  url  : string  ,  data?  : object  ,  query?  : object  )  : Promise  < object  >  ;  $asyncValid  (  cmd  : string  ,  arg  : object  )  : any  | Promise  < any  >  ;  $saveModified  (  message?  : string  ,  title?  : string  )  : boolean  ;  $setFilter  (  target  : object  ,  prop  : string  ,  value  : any  )  : void  ;  $inlineOpen  (  id  : string  )  : void  ;  $inlineClose  (  id  : string  ,  result  : any  )  : void  ;  $focus  (  htmlid  : string  )  : void  ;  } declare const enum CommonStyle  {  error  = 'error'  ,  warning  = 'warning'  ,  info  = 'info'  ,  success  = 'success'  } declare const enum MessageStyle  {  confirm  = 'confirm'  ,  alert  = 'alert'  ,  info  = 'info'  } interface IMessage  {  msg  : string  ;  style?  : MessageStyle  ;  list?  : any  ;  } interface IConfirm  {  msg  : string  ;  style?  : MessageStyle  ;  }  Controller methods  $invoke  (  command  : string  ,  arg  : object  ,  path?  : string  ,  opts?  :  {  catchError  : boolean  }  )  : Promise Calls a server command. 
 Calls a server command.  Arguments: command  -  the name of the server command (from the  commands  section of the  model.json  ) file. arg  - an arbitrary argument object. The Properties of this object will be the arguments to the command. path?  - optional. URL for the endpoint. If not specified, will be executed at the current endpoint. opts  - options object. In the current version, it contains a single property, catchError  .
				If it is set, then when errors occur, the promise will be canceled and the error can be caught in the code using the catch  method (or in the try... catch  statement for async ... await  ) of the promise). 
				By default, the system just displays an error message and does not execute the promise.  Returns: Promise  .  $reload  (  array?  : object  [  ]  )  : Promise  < void  > Updates a model or its part. 
 Updates a model or its part.  Arguments: array  - optional. The  "lazy array"  being updated. If an argument is specified, then the data of the lazy array is updated, otherwise, the data
			of the entire model is updated. Some Properties of a model can be "protected" from being updated
			using the  template option. 
 If an argument is specified, then the data of the lazy array is updated, otherwise, the data
			of the entire model is updated. Some Properties of a model can be "protected" from being updated
			using the  bindOnce  template option.  $msg  (  msg  : string  ,  title?  : string  ,  style?  : string  )  : Promise  < object  > The method displays a message in a modal window. 
 The method displays a message in a modal window.  Arguments: msg  - the message text. May include html markup. title  - the title of the message box. By default: the  "Сообщение"  string (in the current localization). {Enum:['info', 'alert', 'confirm']} style  - style. By default: 'info'  .  Returns: Promise<any>  which will be executed after the window is closed. The buttons that will be placed in the window depend on the message style. 
 The buttons that will be placed in the window depend on the message style.  $asyncValid  (  command  : string  ,  arg  : object  )  : any  | Promise Performs an asynchronous check. To do this, it calls a command on the server, passing it the specified arguments. The command
			is always executed at the current endpoint. 
 Performs an asynchronous check. To do this, it calls a command on the server, passing it the specified arguments. The command
			is always executed at the current endpoint. Please note that the results of this command can be cached to prevent unnecessary server calls. 
 Please note that the results of this command can be cached to prevent unnecessary server calls.  Arguments: command  - the name of the server command (from the  commands  section of the  model.json  file. arg  - an arbitrary argument object. The Properties of this object will be the arguments to the command.  Returns: Promise  . It is typically the return value for an  asynchronous validator  .  $saveModified  (  message?  : string  ,  title?  : string  )  : boolean Checks if the model has changed and displays a message indicating that the model needs to be saved. 
 Checks if the model has changed and displays a message indicating that the model needs to be saved.  Arguments: message  - message. If not specified ( undefined  ), the default message  "Item has been changed. Save changes?"  (in the current localization). title  - the title of the message box. If not specified ( undefined  ), the standard  "Close Confirmation"  header (in the current localization) will be used.  Returns: true  - if the object has not been modified ( $isDirty = false  ), false  otherwise.  Description: If the data model has not changed, then the method simply returns , if it has changed, it displays a close
			confirmation dialog with three buttons ,  and  (in the current localization)
			and returns . 
 If the data model has not changed, then the method simply returns true  , if it has changed, it displays a close
			confirmation dialog with three buttons  "Save"  ,  "Do not save"  and  "Cancel"  (in the current localization)
			and returns false  . After the user makes a selection, the controller will perform the desired action (for example, save the model) and close the current window. 
 After the user makes a selection, the controller will perform the desired action (for example, save the model) and close the current window. The most common use of this method is in the  delegate of the  object. 
 The most common use of this method is in the CanCloseDelegate  delegate of the  Dialog  object.  $setFilter  (  target  : object  ,  prop  : string  ,  value  : any  )  : void  Description Because filters interact very closely with markup and system behavior, you cannot simply set the filter value from code. To do this, you
			need to use the  method. After setting the value, the system will perform all the necessary actions, update the 
			interface, execute server requests, etc. 
 Because filters interact very closely with markup and system behavior, you cannot simply set the filter value from code. To do this, you
			need to use the $setFilter  method. After setting the value, the system will perform all the necessary actions, update the 
			interface, execute server requests, etc.  Arguments: target  - the object for which it is necessary to set the filter. prop  - the name of the filter item property. value  -  the new value.  $inlineOpen  (  id  : string  )  : void Opens an inline dialog (). 
 Opens an inline dialog (  InlineDialog  ).  Arguments: id  - dialog ID. The built-in dialog has full access to the current model. Behavior management falls entirely upon the programmer. 
 The built-in dialog has full access to the current model. Behavior management falls entirely upon the programmer.  $inlineClose  (  id  : string  ,  result  : any  )  : void Closes an inline dialog (). 
 Closes an inline dialog (  InlineDialog  ).  Arguments: id  - dialog ID. result  - reserved. Not used in the current version.  $focus  (  htmlid  : string  )  : void Sets the cursor to an element with the given htmlid. 
 Sets the cursor to an element with the given htmlid.  Arguments: htmlid  - item ID (can be set using the HtmlId  property of the  UIElementBase  object). 

*** 
 Part: Model on the Client 
  Model on the Client  Properties of the object Each object is expanded with the following service properties and methods: 
 Each object is expanded with the following service properties and methods: interface IElement  { // properties readonly  $root  : IRoot  ; readonly  $parent  : IElement  | IElementArray  < IElement  >  ; readonly  $id  : any  ; readonly  $name  : any  ; readonly  $isNew  : boolean  ; readonly  $isEmpty  : boolean  ; readonly  $valid  : boolean  ; readonly  $invalid  : boolean  ; readonly  $ctrl  : IController  ; // methods  $empty  (  )  : IElement  ;  $merge  (  src  : Object  )  : IElement  ;  }  More about the objects  Additional properties of the root object Root object (TRoot) in addition to the main properties,
	it is expanded with the following additional service properties and methods: 
 Root object (TRoot) in addition to the main properties,
	it is expanded with the following additional service properties and methods: interface IRoot extends IElement  { // properties readonly  $readOnly  : boolean  ; readonly  $stateReadOnly  : boolean  ; readonly  $isCopy  : boolean  ; readonly  $ready  : boolean  ; readonly  $template  :  Template  ; // methods  $defer  (  handler  :  (  )  =  > any  )  : void  ;  $emit  (  event  : string  ,  ...params  : any  [  ]  )  : void  ;  $forceValidate  (  )  : void  ;  $setDirty  (  dirty  : boolean  ,  path?  : string  )  : void  ;  }  More about the root object  Additional properties of an array item Any object, which is an array item, is expanded with the following additional service properties and methods: 
 Any object, which is an array item, is expanded with the following additional service properties and methods: interface IArrayElement extends IElement  { // properties readonly  $parent  : IElementArray  < IElement  >  ;  $selected  : boolean  ;  $checked  : boolean  ; // methods  $remove  (  )  : void  ;  }  More about the array items  Additional properties of a tree item Any object, which is a tree item, is expanded with the following additional service properties and methods: 
 Any object, which is a tree item, is expanded with the following additional service properties and methods: interface ITreeElement extends IArrayElement  { // properties readonly  $expanded  : boolean  ;  }  More about the tree items  Properties of the array Each array is expanded with the following additional service properties and methods: 
 Each array is expanded with the following additional service properties and methods: interface IElementArray  <  T  > extends Array  <  T  >  { readonly  Count  : number  ; readonly  $parent  : IElement  ; readonly  $vm  : IViewModel  ; readonly  $root  : IRoot  ; readonly  $ctrl  : IController  ; readonly  $isEmpty  : boolean  ; readonly  $hasSelected  : boolean  ; readonly  $checked  : IElementArray  <  T  >  ; readonly  $selected  :  T  ; readonly  $selectedIndex  : number  ; readonly  $cross  :  {  [  prop  : string  ]  : string  [  ]  }  ; readonly  $ModelInfo  : IModelInfo  ; readonly  $loaded  : boolean  ;  Selected  (  prop  : string  )  : IElementArray  <  T  >  ;  $new  (  src?  : object  )  :  T  ;  $append  (  src?  : object  )  :  T  ;  $prepend  (  src?  : object  )  :  T  ;  $insert  (  src  : object  ,  to  : InsertTo  ,  ref?  :  T  )  :  T  ;  $clearSelected  (  )  : IElementArray  <  T  >  ;  $reload  (  )  : Promise  < IElementArray  <  T  >  >  ;  $lockUpdate  (  lock  : boolean  )  : void  ;  $isLazy  (  )  : boolean  ;  $load  (  )  : void  ;  $loadLazy  (  )  : Promise  < IElementArray  <  T  >  >  ;  $resetLazy  (  )  : IElementArray  <  T  >  ;  $find  (  callback  :  ( this  : any  ,  elem  :  T  ,  index?  : number  ,  array?  : IElementArray  <  T  >  )  =  > boolean  ,  thisArg?  : any  )  :  T  ;  $remove  (  elem  :  T  )  : IElementArray  <  T  >  ;  $empty  (  )  : IElementArray  <  T  >  ;  $renumberRows  (  )  : IElementArray  <  T  >  ;  $copy  (  src  : any  [  ]  )  : IElementArray  <  T  >  ;  $sum  (  fn  :  (  item  :  T  )  =  > number  )  : number  ;  }  More about the arrays 

*** 
 Part: Object Properties and Methods 
  Object Properties and Methods  Model on the Client Each object is expanded with the following additional service properties and methods: 
 Each object is expanded with the following additional service properties and methods: interface IElement  { // properties readonly  $root  : IRoot  ; readonly  $parent  : IElement  | IElementArray  < IElement  >  ; readonly  $id  : any  ; readonly  $name  : any  ; readonly  $isNew  : boolean  ; readonly  $isEmpty  : boolean  ; readonly  $valid  : boolean  ; readonly  $invalid  : boolean  ; readonly  $ctrl  : IController  ; // methods  $empty  (  )  : IElement  ;  $merge  (  src  : Object  )  : IElement  ;  }  Properties readonly  $root  : IRoot Root object reference . 
 Root object reference  (IRoot)  . readonly  $ctrl  : IController Controller object reference  . 
 Controller object reference  (IController)  .  Methods  $empty  (  )  : IElement  Description Cleans up an object. Cleaning up an object means setting all of its properties to their default
			values. Cleaning is recursive. This means that all nested objects will be cleaned up as well. 
 Cleans up an object. Cleaning up an object means setting all of its properties to their default
			values. Cleaning is recursive. This means that all nested objects will be cleaned up as well.  Returns:  Reference to itself 

*** 
 Part: Properties and methods of the root object 
  Properties and methods of the root object  Model on the Client The root object is expanded with the following additional service properties and methods: 
 The root object is expanded with the following additional service properties and methods: interface IRoot extends IElement  { // properties readonly  $readOnly  : boolean  ; readonly  $stateReadOnly  : boolean  ; readonly  $isCopy  : boolean  ; readonly  $ready  : boolean  ; readonly  $template  :  Template  ; // methods  $defer  (  handler  :  (  )  =  > any  )  : void  ;  $emit  (  event  : string  ,  ...params  : any  [  ]  )  : void  ;  $forceValidate  (  )  : void  ;  $setDirty  (  dirty  : boolean  ,  path?  : string  )  : void  ;  }  Properties readonly  $ready  : boolean if no server requests are currently being made. Can be used to 
			disable/enable interface elements when executing server commands. 
true  if no server requests are currently being made. Can be used to 
			disable/enable interface elements when executing server commands. readonly  $template  :  Template Reference to the . 
 Reference to the  template object (Template)  .  Methods  $defer  (  handler  :  (  )  =  > any  )  : void Executes a (handler) function after the end of the current event loop. 
 Executes a (handler) function after the end of the current event loop. 

*** 
 Part: Properties and methods of the array item 
  Properties and methods of the array item  Model on the Client Each array item is expanded with the following additional service properties and methods: 
 Each array item is expanded with the following additional service properties and methods: interface IArrayElement extends IElement  { // properties readonly  $parent  : IElementArray  < IElement  >  ;  $selected  : boolean  ;  $checked  : boolean  ; // methods  $remove  (  )  : void  ;  }  Properties readonly  $parent  : IElementArray Reference to the parent array . 
 Reference to the parent array  (IElementArray)  .  $selected  : boolean The item is highlighted. 
 The item is highlighted.  $checked  : boolean The item is checked. The collection of checked items can be retrieved
			using the  property of the parent array. 
 The item is checked. The collection of checked items can be retrieved
			using the $checked  property of the parent array.  Methods  $remove  (  )  : void Removes an item from the parent array. 
 Removes an item from the parent array. 

*** 
 Part: Properties and Methods of the Tree Item 
  Properties and Methods of the Tree Item  Model on the Client Each tree item is expanded with the following additional service properties and methods: 
 Each tree item is expanded with the following additional service properties and methods: interface ITreeElement extends IArrayElement  { // properties readonly  $expanded  : boolean  ; // methods  $expand  <  T  >  ( this  :  T  )  : Promise  < IElementArray  <  T  >  >  ;  $selectPath  <  T  >  ( this  :  T  ,  path  : Array  < any  >  ,  predicate  :  (  item  :  T  ,  val  : any  )  =  > boolean  )  : Promise  <  T  >  ;  }  Properties readonly  $expanded  : boolean Item is expanded. 
 Item is expanded.  Methods  $expand  <  T  >  ( this  :  T  )  : Promise  < IElementArray  <  T  >  >  Description Expands the tree item (if it was collapsed). Works for both static and dynamic trees. 
 Expands the tree item (if it was collapsed). Works for both static and dynamic trees.  Returns:  A promise with a reference to an array of expanded children.  Methods  $selectPath  <  T  >  ( this  :  T  ,  path  : Array  < any  >  ,  predicate  :  (  item  :  T  ,  val  : any  )  =  > boolean  )  : Promise  <  T  >  Arguments: path  - an array that defines the path in the tree, starting at the root. The array can contain any items. predicate  - a function that will be called to search for a specified item in the tree. Should return true  ,
				if the item  in the tree matches an item in the val  array. Predicate arguments: item: ITreeElement  - item of the tree. val: any  - item from the array path  .  Description Selects an item in the tree along the specified path. Only useful for dynamic trees. In the process, the method expands all intermediate nodes. 
 Selects an item in the tree along the specified path. Only useful for dynamic trees. In the process, the method expands all intermediate nodes.  Returns:  A promise with a reference to the selected tree item. Working with trees is described in more detail in the section on . 
 Working with trees is described in more detail in the section on  hierarchical data models  . 

*** 
 Part: Properties and Methods of the Array 
  Properties and Methods of the Array  Model on the Client Each array is extended with the following additional utility properties and methods: 
 Each array is extended with the following additional utility properties and methods: Each item in the array implements the 
		interface and contains some additional properties and methods. 
 Each item in the array implements the  IArrayElement  interface and contains some additional properties and methods. declare const enum InsertTo  {  start  = 'start'  ,  end  = 'end'  ,  above  = 'above'  ,  below  = 'below'  } interface IElementArray  <  T  > extends Array  <  T  >  {  [  index  : number  ]  :  T  ; // properties readonly  $root  : IRoot  ; readonly  $parent  : IElement  ; readonly  $ctrl  : IController  ; readonly  $isEmpty  : boolean  ; readonly  $hasSelected  : boolean  ; readonly  $selectedIndex  : number  ; readonly  $checked  : IElementArray  <  T  >  ; readonly  $cross  :  {  [  prop  : string  ]  : string  [  ]  }  ; // methods  $empty  (  )  : this  ;  $reload  (  )  : Promise  < IElementArray  <  T  >  >  ;  $remove  (  elem  :  T  )  : this  ;  $clearSelected  (  )  : this  ;  $append  (  src?  : object  )  :  T  ;  $prepend  (  src?  : object  )  :  T  ;  $insert  (  src  : object  ,  to  : InsertTo  ,  ref?  :  T  )  :  T  ;  $copy  (  src  : any  [  ]  )  : this  ;  $sum  (  fn  :  (  item  :  T  )  =  > number  )  : number  ;  $find  (  fn  :  ( this  : any  ,  item  :  T  ,  index?  : number  ,  array?  : IElementArray  <  T  >  )  : boolean  ,  thisArg  : any  )  :  T  ;  $isLazy  (  )  : boolean  ;  $loadLazy  (  )  : Promise  < IElementArray  <  T  >  >  ;  $load  (  )  : void  ;  $resetLazy  (  )  : void  ;  }  Properties readonly  $root  : IRoot Reference to the root object of the model (). 
 Reference to the root object of the model (  IRoot  ). readonly  $parent  : IElement Reference to the parent of the array (). 
 Reference to the parent of the array (  IElement  ). readonly  $ctrl  : IController Reference to the . 
 Reference to the  controller object (IController)  . readonly  $hasSelected  : boolean Does the array have a selected item (the one with the  property set to ). 
 Does the array have a selected item (the one with the $selected  property set to true  ). readonly  $selectedIndex  : number The index of the selected item, or  if there is no selected item. 
 The index of the selected item, or  -1  if there is no selected item. readonly  $checked  : IElementArray  <  T  > An array of checked () elements of the current array. 
 An array of checked ( $checked = true  ) elements of the current array. readonly  $cross  :  {  [  prop  : string  ]  : string  [  ]  } The key object for the .Returns an object with property names that
			match the cross fields. The values are an array of strings - cross keys. 
 The key object for the  cross data models  .Returns an object with property names that
			match the cross fields. The values are an array of strings - cross keys.  Methods  $empty  (  )  : this  Description Clears the array. Removes all items. 
 Clears the array. Removes all items.  Returns:  reference to the array itself..  $reload  (  )  : Promise  < IElementArray  <  T  >  >  Description Reloads an array from the database. Makes sense only for children and “lazy” arrays. 
 Reloads an array from the database. Makes sense only for children and “lazy” arrays.  Returns:  promise with the reference to the array itself.  $remove  (  elem  :  T  )  : this  Description Removes the specified item from the array. 
 Removes the specified item from the array.  Arguments: elem  - item being removed.  Returns:  reference to the array itself.  $clearSelected  (  )  : this  Description Clears the selection flag from all items of the array. 
 Clears the selection flag from all items of the array.  Returns:  reference to the array itself.  $append  (  src  :  T  )  :  T  Description Inserts an item at the end of the array. If the source is specified and is an object, then its properties are copied to the newly inserted item. 
 Inserts an item at the end of the array. If the source is specified and is an object, then its properties are copied to the newly inserted item.  Arguments: src  - source to insert from. Can be a regular (non-reactive) javascript object.  Returns:  Inserted item.  $prepend  (  src  :  T  )  :  T  Description Inserts an item at the beginning of an array. If the source is specified 
		and is an object, then its Properties are copied to the newly inserted item. 
 Inserts an item at the beginning of an array. If the source is specified 
		and is an object, then its Properties are copied to the newly inserted item.  Arguments: src  - source to insert from. Can be a regular (non-reactive) javascript object.  Returns:  Inserted item.  $insert  (  src  : object  ,  to  : InsertTo  ,  ref?  :  T  )  :  T  Description Inserts a new item into the array. 
 Inserts a new item into the array.  Arguments: src  - source. Can be a regular (non-reactive) javascript object. to  - place of insertion. Possible values: 'start'  -  to the beginning of the array (equivalent of $prepend  ). 'end'  -  to the end of the array (equivalent of $append  ). 'above'  - before the specified ( ref  ) item. 'below'  - after the specified ( ref  ) item. ref  - item relative to which the insertion will be performed for to = 'above' | 'below'  .  Returns:  Inserted item.  $copy  (  src  : any  [  ]  )  : this  Description Copies the source into the current array. 
 Copies the source into the current array.  Arguments: src  - source for the copying. Can be a regular (non-reactive) javascript 
				object. Properties of the source which are not in the item are ignored.  Returns:  array itself.  $sum  (  fn  :  (  item  :  T  )  =  > number  )  : number  ;  Description Calculates the sum for the items of an array. 
 Calculates the sum for the items of an array.  Arguments: fn  - a callback function that should return a property of the array item to add.  Returns:  Calculated sum.  $find  (  fn  :  ( this  : any  ,  item  :  T  ,  index?  : number  ,  array?  : IElementArray  <  T  >  )  : boolean  ,  thisArg?  : any  )  :  T  Description Searches the array for the first matching item. This function differs from a regular array search
			in that it performs recursive tree searches for hierarchical arrays. 
 Searches the array for the first matching item. This function differs from a regular array search
			in that it performs recursive tree searches for hierarchical arrays.  Arguments: fn  - a callback function that should return true  ,
					if the item matches the selection criteria. Function arguments: this?  - argument value thisArg  . item  - array item. index?  - item index. array?  - the array to search through. thisArg  - this  argument value for callback function.  Returns:  Found item.  $isLazy  (  )  : boolean  Description Whether the array is . 
 Whether the array is  "lazy"  .  Returns:  true, if the array is "lazy" (with lazy loading).  $resetLazy  (  )  : void  Description Resets the  array loading flag. On 
			the next call, the array will be reloaded from the server. 
 Resets the  "lazy"  array loading flag. On 
			the next call, the array will be reloaded from the server. 

*** 
 Part: Templates 
  Templates A Template is a JavaScript object that defines the behavior 
	of a data model. General structure of the template: 
 A Template is a JavaScript object that defines the behavior 
	of a data model. General structure of the template: const  template  =  { 'options'  :  {  } 'defaults'  :  {  }  , 'properties'  :  {  }  , 'validators'  :  {  }  , 'events'  :  {  }  , 'commands'  :  {  }  , 'delegates'  :  {  }  }  module.exports  =  template  ; /*export template from current module*/  Object properties of the Template 
[Table]
 Name  |  Type  |  Description 
 options  |  options  |  An object describing the options for configuring the template. 
 defaults  |  defaults  |  An object describing the model initialization rules. 
 properties  |  properties  |  An object describing additional properties to be added to the model. 
 validators  |  validators  |  An object describing the validation rules for model items. 
 events  |  events  |  An object describing event handlers for the model. 
 commands  |  commands  |  An object describing commands for the model. 
 delegates  |  delegates  |  An object describing the delegates (callback functions) required for the model to work. 
 Name  Type  Description  options  options  An object describing the options for configuring the template.  defaults  defaults  An object describing the model initialization rules.  properties  properties  An object describing additional properties to be added to the model.  validators  validators  An object describing the validation rules for model items.  events  events  An object describing event handlers for the model.  commands  commands  An object describing commands for the model.  delegates  delegates  An object describing the delegates (callback functions) required for the model to work. 

*** 
 Part: Templates. Events 
  Templates. Events  Templates The object describing events in the template is a regular JavaScript object. 
		The property names of this object are the names of the events, and the values
		are the functions that will be called when the event occurs. 
 The object describing events in the template is a regular JavaScript object. 
		The property names of this object are the names of the events, and the values
		are the functions that will be called when the event occurs. Event names are constructed in different ways depending on the type of event: 
 Event names are constructed in different ways depending on the type of event:  the names are fixed for the entire model.  for the event of object creation they are constructed from the object type and .constuct  suffix.  for data change events ― from the full path to the data item and the specified suffix. The full path to the item actually represents the fully qualified name of the object's property, starting
		from the root of the model. The  suffix is used to indicate an array item. 
 The full path to the item actually represents the fully qualified name of the object's property, starting
		from the root of the model. The []  suffix is used to indicate an array item. Syntax: 
 Syntax: const  tempate  =  {  events  :  { 'Model.load'  :  ( this  : IRoot  ,  root  : IRoot  ,  caller?  : IRoot  )  : void  , 'Model.unload'  :  ( this  : IRoot  ,  root  : IRoot  )  : void  , '{Type}.construct'  :  ( this  : IRoot  ,  elem  : IElement  ,  prop?  : string  )  : void  , '{PropertyName}.change'  :  ( this  : IRoot  ,  elem?  : IElement  ,  newVal?  : any  ,  oldVal?  : any  ,  prop?  : string  )  : void  , '{PropertyName}.changing'  :  ( this  : IRoot  ,  elem?  : IElement  ,  newVal?  : any  ,  oldVal?  : any  ,  prop?  : string  )  : boolean  , '{ArrayName}.add'  :  ( this  : IRoot  ,  array?  : IArrayElement  ,  elem?  : IElement  >  )  : void  }  }  Events for the entire model Those events have fixed names. 
 Those events have fixed names. Model.load  - model is downloaded. Model.unload  - model is uploaded. No action is possible anymore. Most often used
			to unsubscribe from events on the global event bus. Model.saved  - model is saved. Model.beforeSave  - before saving. Arguments for the model events: 
 Arguments for the model events: this  - data model root (IRoot). model  - data model root (IRoot). caller  - reference to the data model root (IRoot) of the caller. For example,
				if this is a dialog model, then the caller  will be a reference to the model
				from which this dialog was called. Can be used to interact with the caller. For Model.saved  , Model.save  events, the value will always be undefined  .  Events for objects .construct  - the object is created. The event name prefix represents the name of
			the object type. In the handler of this event, you can add new properties to the created item.
			However, it is better to use the (  properites  ) mechanism for this purpose. .change  - property value has been changed. The event name prefix is the full path to the property in the data model. .changing  -  the property value will be changed. The event name prefix is the full path to the property in the
			data model. It is possible to undo the changes. Arguments for the  event: 
 Arguments for the .construct  event: this  - data model root (IRoot). elem  - created item. prop  - the name of the property of the parent item
				to which the created object will be assigned. Makes sense for
				the items creating handlers in a MapObject  .  Arguments for the .changing  , .change  : this  - data model root (IRoot). elem  - item. newValue  - the new value of the property. oldValue  - the old value of the property. prop  - the name of the property to change.  The returned value only makes sense for the .changing  event: Boolean  - strict false  value. Cancels an attempt to change
				the property value. Any other value allows changes.  Please note!  When changing the values of object properties, both property values (old and new) will point to the same object.
			This is because the object is never re-created. Its properties are simply overwritten.  Events for arrays The name prefix for all array events is the full path to the property in the model. 
 The name prefix for all array events is the full path to the property in the model. [].adding  - before adding the item to the array. [].add  - the item is added to the array. [].change  - the array item has been changed. [].remove  -  the item has been removed from the array. [].select  - the array item is selected. The events will be generated only when platform tools are used to manipulate
		the arrays. If the array is changed using standard methods (for example, ,
		), then no events will be generated. 
 Please note!  The events will be generated only when platform tools are used to manipulate
		the arrays. If the array is changed using standard methods (for example, push  , splice  ), then no events will be generated. Arguments for the array events: 
 Arguments for the array events: this  - data model root (IRoot). arr  - modifiable array. elem  - new or deleted item.  The returned value is only meaningful for the .adding  event. Boolean  - strict false  value. Cancels the operation of adding an item to the array.  User-Defined Event The events described above are inline events. However, no one forbids the use of custom events, which 
		can more accurately describe the business logic of the application. 
 The events described above are inline events. However, no one forbids the use of custom events, which 
		can more accurately describe the business logic of the application. Such events are generated by the  method of the root object (IRoot)
		and can have an arbitrary name (of course, not overlapping with system names). The  method can also generate system events. 
 Such events are generated by the  $emit  method of the root object (IRoot)
		and can have an arbitrary name (of course, not overlapping with system names). The $emit  method can also generate system events. The event model in the system is associated with data, not with elements of the user interface. In other words, 
		events occur when data changes. The occurrence of events bears no relation to the user interface. In fact, there may be no user interface at all. 
 Please note!  The event model in the system is associated with data, not with elements of the user interface. In other words, 
		events occur when data changes. The occurrence of events bears no relation to the user interface. In fact, there may be no user interface at all. 

*** 
 Part: Templates. Options 
  Templates. Options Template options define the behavior of the entire model. 
 Template options define the behavior of the entire model.  Syntax /* опции */  options  :  {  noDirty?  : boolean  ,  bindOnce?  : string  [  ]  ,  persistSelect?  : string  [  ]  ,  skipDirty?  : string  [  ]  }  Options object properties noDirty  - do not set the $isDirty  change flag upon data model changes. bindOnce  - an array of strings defining which root properties of the model will be bound once. persistSelect  - an array of strings that defines the arrays of the model for which to keep the 
			position of the selected item during saving or reloading of the model. skipDirty  - an array of strings that defines the paths to the model properties,
			when changing which you do not need to set the $isDirty  change flag.  Read more The  flag is responsible for displaying a message about the need to save the model after making
		changes, as well as for the behavior of some controls. For example, the button associated with the  
		command will be automatically allowed after changing the model. If the  option is set, then the
		 flag will not be set. 
 The $isDirty  flag is responsible for displaying a message about the need to save the model after making
		changes, as well as for the behavior of some controls. For example, the button associated with the Save  command will be automatically allowed after changing the model. If the noDirty  option is set, then the $isDirty  flag will not be set. The  property allows you to define the root properties of the model that will only bind to data
		upon the first model loading. Upon further reloading (for example, using the  command or after saving
		the model), this property will not be rebound. This is most often used to bind the catalog items. 
 The bindOnce  property allows you to define the root properties of the model that will only bind to data
		upon the first model loading. Upon further reloading (for example, using the Reload  command or after saving
		the model), this property will not be rebound. This is most often used to bind the catalog items.  Please note!  In the bindOnce  array, you can specify only the root properties of the model (that 
			is, only those that do not have a period in their names). The  property allows you to define arrays in the model for which the position of the selected
		item (). will be persisted. The position will be persisted when the model is saved (for example,
		with the ) command) and when it is reloaded (for example, with the  command). 
 The persistSelect  property allows you to define arrays in the model for which the position of the selected
		item ( $selected  ). will be persisted. The position will be persisted when the model is saved (for example,
		with the Save  ) command) and when it is reloaded (for example, with the Reload  command). 

*** 
 Part: Templates. Initial Values 
  Templates. Initial Values  Templates The  section allows you to set initial values for the new model. A model with a zero (empty)
		identifier of the main object is considered new. 
 The defaults  section allows you to set initial values for the new model. A model with a zero (empty)
		identifier of the main object is considered new. The object describing the initial values is a regular JavaScript object. Property names represent the path to the 
		data item in the model (to the property the value of which needs to be set). 
 The object describing the initial values is a regular JavaScript object. Property names represent the path to the 
		data item in the model (to the property the value of which needs to be set).  Syntax /* template defaults */ interface  templateDefaultFunc  {  ( this  : IRoot  ,  elem  : IElement  ,  prop  : string  )  : any  ;  } declare type  templateDefault  =  templateDefaultFunc  | string  | number  | boolean  | Date  | object  ; /* template */  template  : Template  {  defaults?  :  {  [  prop  : string  ]  :  templateDefault  }  }  Example Example of a document template with automatic setting of today's date. 
 Example of a document template with automatic setting of today's date. const  dateUtils  :  UtilsDate  =  require  ( "std:utils"  )  .date  ; const  template  =  {  defaults  :  { 'Document.Date'  :  dateUtils.today  (  ) /* today's date */  }  }  ; 

*** 
 Part: Templates. Properties 
  Templates. Properties  Templates The properties section allows you to add additional properties to the model elements. They can 
		be both scalar (string, number) and . 
 The properties section allows you to add additional properties to the model elements. They can 
		be both scalar (string, number) and  computed  . Computed properties are a powerful mechanism that can greatly simplify the implementation of 
		complex business logic in an application. Such a property is a function that is called when 
		an attempt is made to read (or set) a property. The result returned by the function is 
		considered as the value of the property. During the calculations, the function can refer 
		to other computed properties, etc. In this way, it is easy to build dependent data handlers 
		without using the event model. 
 Computed properties are a powerful mechanism that can greatly simplify the implementation of 
		complex business logic in an application. Such a property is a function that is called when 
		an attempt is made to read (or set) a property. The result returned by the function is 
		considered as the value of the property. During the calculations, the function can refer 
		to other computed properties, etc. In this way, it is easy to build dependent data handlers 
		without using the event model. Computed properties can either supplement existing static properties in the model, or replace existing ones. 
 Computed properties can either supplement existing static properties in the model, or replace existing ones. The object describing the properties in the template is a regular JavaScript object. The property names 
		of this object are the fully qualified name of the property (including the name of the object type), 
		and the values are a scalar type, function, or object. 
 The object describing the properties in the template is a regular JavaScript object. The property names 
		of this object are the fully qualified name of the property (including the name of the object type), 
		and the values are a scalar type, function, or object.  Syntax /* properties */  properties  :  { 'TypeName.property'  : String  | Number  | Boolean  , /* scalar property */ 'TypeName.property'  : Function  , /* computed property */ 'TypeName.property'  :  { /* computed and settable property */  get  : Function  ,  set  : Function  }  ...  }  Naming rules The  property prefix must match the type , that is specified when the model is built. By 
	convention, type names begin with an uppercase "T" (for Type). 
 The TypeName  property prefix must match the type  name  , that is specified when the model is built. By 
	convention, type names begin with an uppercase "T" (for Type). If a computed property has the same name as a property in the model, then it is not added to the model, but 
	the model property. This will cause the computed value to be saved in the model. 
 If a computed property has the same name as a property in the model, then it is not added to the model, but  replaces  the model property. This will cause the computed value to be saved in the model. If the property name begins with the characters "$" or "_", then it is internal and does not participate in the exchange of
	data between the client and the server. If a property name begins with "$$", then changing it does not change the
	 flag for the model. 
 If the property name begins with the characters "$" or "_", then it is internal and does not participate in the exchange of
	data between the client and the server. If a property name begins with "$$", then changing it does not change the  $dirty  flag for the model.  Scalar Properties The value of a scalar property is always a primitive JavaScript type such as , 
	or . A property of the corresponding type will be added to the model. 
 The value of a scalar property is always a primitive JavaScript type such as String  , Number  or Boolean  . A property of the corresponding type will be added to the model.  Computed properties The value of a computed property is the function that will be computed when an attempt is made to access the property. Function argument: 
 The value of a computed property is the function that will be computed when an attempt is made to access the property. Function argument: this  - a reference to the object to which the property is added.  The function should return the value of the property. The function is called only when the property is accessed. If there are no calls, the function will never be called. 
 The function is called only when the property is accessed. If there are no calls, the function will never be called. Computed properties can be accessed many times and often. Never use server calls in computed property code. Use caching if necessary. 
 Computed properties can be accessed many times and often. Never use server calls in computed property code. Use caching if necessary. Do not use arrow functions when defining computed properties. Arrow functions do not have their own this value (they
	use the parent context), so it will be impossible to get a reference to the object 
 Please note!  Do not use arrow functions when defining computed properties. Arrow functions do not have their own this value (they
	use the parent context), so it will be impossible to get a reference to the object  Computed and Settable Properties In addition to the property read function (getter), you can also specify a set function (setter). 
	This function will be called when an attempt is made to set a property value. Function arguments: 
 In addition to the property read function (getter), you can also specify a set function (setter). 
	This function will be called when an attempt is made to set a property value. Function arguments: this  - a reference to the object to which the property is being added. value  - set value. Use properties with setters cautiously and carefully. When doing so, it is very easy to get infinite recursion. 
 Use properties with setters cautiously and carefully. When doing so, it is very easy to get infinite recursion.  Example An example of a document template with computing the amount for the row and the amount for the document. 
	Suppose the model contains a document with rows, each of which has a price and a quantity. It is necessary
	to automatically calculate the amount for the row and the amount for the document. 
 An example of a document template with computing the amount for the row and the amount for the document. 
	Suppose the model contains a document with rows, each of which has a price and a quantity. It is necessary
	to automatically calculate the amount for the row and the amount for the document. const  template  =  {  properties  :  { 'TRow.Sum'  (  )  { return  this.Qty  *  this.Price  }  , /*amount for row */  , 'TDocument.Sum'  :  getDocumentSum /*amount for document */  }  }  ; function  getDocumentSum  (  )  { return  this.Rows.reduce  (  (  prev  ,  curr  )  =  >  prev  +  curr.Sum  , 0  )  ;  } 

*** 
 Part: Templates. Validators 
  Templates. Validators Validators are a mechanism for checking the validity of a model. Note that validators, like everything 
		else in templates, bind to data, not user interface. The controls themselves keep track of the 
		correctness of the data and display corresponding error messages. 
 Validators are a mechanism for checking the validity of a model. Note that validators, like everything 
		else in templates, bind to data, not user interface. The controls themselves keep track of the 
		correctness of the data and display corresponding error messages. The object describing the validators is a regular JavaScript object. Property names are the path to the
		data item in the model (the object to be checked). If an array is encountered in the data path, then the
		corresponding property is marked with the  suffix. For example, a validator for the
		 property of a document row will have the name . 
 The object describing the validators is a regular JavaScript object. Property names are the path to the
		data item in the model (the object to be checked). If an array is encountered in the data path, then the
		corresponding property is marked with the []  suffix. For example, a validator for the Sum  property of a document row will have the name Document.Rows[].Sum  .  Syntax /* validators */ declare const enum Severity  {  error  = 'error'  , /*default value*/  warning  = 'warning'  ,  info  = 'info'  } declare const enum StdValidator  {  notBlank  = 'notBlank'  ,  email  = 'email'  ,  url  = 'url'  ,  isTrue  = 'isTrue'  ,  regExp  = 'regExp'  } declare type  templateValidatorResult  =  {  msg  : string  ,  severity  : Severity  }  ; interface tempateValidatorFunc  {  (  elem  : IElement  ,  value?  : any  )  : boolean  | string  |  templateValidatorResult  | Promise  < any  >  ;  } interface templateValidatorObj  {  valid  : tempateValidatorFunc  | StdValidator  ,  async?  : boolean  ,  msg?  : string  ,  regExp?  : RegExp  ,  severity?  : Severity  ,  applyIf?  :  (  elem  : IElement  ,  value?  : any  )  =  > boolean  } declare type templateValidator  = String  | tempateValidatorFunc  | templateValidatorObj  ;  validators  :  {  [  prop  : string  ]  : templateValidator  | templateValidator  [  ]  }  Description A validator value can be either a single validator or an array of validators. 
	If it is an array, then all validators from the array are applied. 
 A validator value can be either a single validator or an array of validators. 
	If it is an array, then all validators from the array are applied. Each validator (single, or array element) can be a string, function, or object of 
	a given structure. The main type of validator is an object. The rest of the values
	are just shorthand for the object. 
 Each validator (single, or array element) can be a string, function, or object of 
	a given structure. The main type of validator is an object. The rest of the values
	are just shorthand for the object.  Validator object properties valid  - validation string (standard validator) or function. async  - optional. The validator is asynchronous (see below). msg  - error message. The check function can return a string and 
			not a boolean value. In this case, the value of this property is ignored. severity  - the seriousness of the error. The default is 'error'. 
			Affects the appearance of the message and can be used in code. regExp  - 'regExp'  type regular expression for a standard validator. applyIf  - function determining whether to apply a validator.  Standard validators If the value of the  property is a string, then this is the standard validator. Possible values: 
 If the value of the valid  property is a string, then this is the standard validator. Possible values: 'notBlank'  - the value is not empty. 'email'  - the value represents a valid (syntactically) email address. 'url'  -  the value represents the correct (syntactically) web address. 'isTrue'  - the value is exactly true  . 'regExp'  - the value matches the regular expression. In this case, the 'regExp'  property must be set.  Validator - string If the validator is a string, then this is a check of the value for emptiness. The string itself will be 
		an error message. This is the equivalent of an object 
 If the validator is a string, then this is a check of the value for emptiness. The string itself will be 
		an error message. This is the equivalent of an object  {  valid  : 'notBlank'  ,  msg  : 'error message'  ,  severity  = Severity.error  }  Validator - function If the validator is a function, then it is the equivalent of an object 
 If the validator is a function, then it is the equivalent of an object  {  valid  :  func  ,  severity  = Severity.error'  }  Validation function format  valid  (  elem  : IElement  ,  value?  : any  )  : boolean  | string  | Promise  ;  Arguments: elem  - item to which the validator is applied val  - value being checked.  Returns: true  - if the value is correct. false  - if the value is incorrect. string  - an error message if the value is incorrect. This string will override the value of the 'msg'  property. If the validator is declared as a function, then it must always return a string (there is simply no msg  value in this case). templateValidatorResult object  - an object that defines the error message ( msg  )
				and its seriousness ( severity  ). Promise  - for an asynchronous validator. The promise must return a boolean value or a string. applyIf  Function format  applyIf?  :  (  elem  : IElement  ,  value?  : any  )  : boolean  Arguments: elem  - item to which the validator is applied.. val  - value being checked.  Returns: true  - if the validator is active and needs to be applied.  Asynchronous validators Asynchronous validators are used when you need to contact the server to check the
		correctness. Such a validator is marked with the  property. 
 Asynchronous validators are used when you need to contact the server to check the
		correctness. Such a validator is marked with the async: true  property. The validator function for an asynchronous validator must return a ,
		which will be either a boolean value or a string (just like a regular validation function). 
 The validator function for an asynchronous validator must return a Promise  ,
		which will be either a boolean value or a string (just like a regular validation function). An asynchronous validator usually uses the  controller method. 
 An asynchronous validator usually uses the  $asyncValid  controller method. Return values for asynchronous validators are cached to prevent over-hitting
		the server. In fact, the validator is called only once every time the values associated with it change. 
 Please note!  Return values for asynchronous validators are cached to prevent over-hitting
		the server. In fact, the validator is called only once every time the values associated with it change. 

*** 
 Part: Templates. Commands 
  Templates. Commands The object describing commands in the template is a regular JavaScript object. The 
		property names of this object are command names, and the values are functions or objects. 
 The object describing commands in the template is a regular JavaScript object. The 
		property names of this object are command names, and the values are functions or objects. Commands in views are specified using the 
		binding with the  property set to  or .
		The name of the command is specified by the  property. 
 Commands in views are specified using the  BindCmd  binding with the Command  property set to Execute  or ExecuteSelected  .
		The name of the command is specified by the CommandName  property.  Syntax /* commands */  commands  :  {  Command1  : Function  ,  Command2  :  {  exec  : Function  canExec  : Function  ,  saveRequired  : Boolean  ,  validRequired  : Boolean  ,  checkReadOnly  : Boolean  ,  confirm  : String  | Object  }  ...  } If the value is a function, then it is simply called when the command is executed. 
 If the value is a function, then it is simply called when the command is executed.  Command object properties {Function} exec  - function executing the command. {Function} canExec  - a function that determines whether a command can be executed. Returns an
			indication of whether the command can be executed. The value is cast to the Boolean  type. {Boolean} saveRequired  - whether the model needs to be saved before executing the command. Can also be set in 
			the  BindCmd  binding using the SaveRequired  property. {Boolean} validRequired  - execute command only for the model that has passed validation($valid property
			of root object = true  . Can also be set in the  BindCmd  binding using the ValidRequired  . {Boolean} checkReadOnly  - forbid command for model in “read-only” state. Can also be set in the  BindCmd  binding using the CheckReadOnly  property. {String|Object} confirm  - ask for user confirmation before executing the command. Can also be set in the  BindCmd  binding using the Confirm  property. If the 
			value is a string, then it is considered a confirmation text. If it is an object, then it has the structure shown below.  Confirm object properties {String} message  - message text. {String} title  - the title of the message box. If not specified, will be  locale.$Confirm  . {String} okText  - text on the confirmation button. If not specified, will be  locale.$Ok  . {String} cancelText  - text on the cancel button. If not specified, will be  locale.$Cancel  .  Exec and canExec function arguments this  - root object (TRoot). arg  - the argument passed to the command. If the command is specified in markup, the argument is specified by 
			the Argument  property (or binding) of the  BindCmd  object. User interface elements associated with commands (for example buttons) will be automatically forbidden or
		allowed depending on the ability to execute the command. It is not necessary to use the  property. 
 Please note!  User interface elements associated with commands (for example buttons) will be automatically forbidden or
		allowed depending on the ability to execute the command. It is not necessary to use the Disabled  property.  Example XAML: 
 XAML: <!--Button associated with command--> <Button Command  = "{BindCmd Execute, CommandName='MyCommand', Argument={Bind Document}}" >  Execute  command </Button>  Javascript: const  template  =  {  commands  :  {  MyCommand  :  {  exec  (  doc  )  {  alert  (  doc.Id  )  ;  }  , // simply display the message  canExec  (  doc  )  { return  doc.$isNew  ;  }  , // only for new documents  validRequired  : true  , // without errors  confirm  :  {  message  : 'Indeed execute?'  ,  title  : 'Please confirm'  ,  okText  : 'Yes, execute'  cancelText  : 'No, don’t execute'  }  }  }  } 

*** 
 Part: Templates. Delegates 
  Templates. Delegates The delegate is a callback function. It will be called at the moment when it is necessary to
		perform any action. For example, in a  control,
		a delegate will be called when a piece of text is entered to get a list of choices. 
 The delegate is a callback function. It will be called at the moment when it is necessary to
		perform any action. For example, in a  Selector  control,
		a delegate will be called when a piece of text is entered to get a list of choices. The object describing the delegates in the template is a regular JavaScript object. The property
		names of this object are the names of the delegates, and the values are functions. 
 The object describing the delegates in the template is a regular JavaScript object. The property
		names of this object are the names of the delegates, and the values are functions. Delegates in views are set using the  property of the corresponding control. 
 Delegates in views are set using the Delegate  property of the corresponding control.  Syntax /* delegates */  delegates  :  {  Delegate1  : Function  ,  Delegate2  : Function  ,  ...  }  Delegates arguments this  - root object (TRoot). ...  - the rest of the arguments depend on the specific delegate.  Returned value  The returned value depends on the specific delegate.  Example XAML: 
 XAML: <!--selector--> <Selector Delegate  = "FetchAgent" Value  = "{Bind Document.Agent}" DisplayProperty  = "Name" Label  = "Select a contractor" > </Selector>  Javascript: const  template  =  {  delegates  :  {  FetchAgent  :  fetchAgent  }  }  ; function  fetchAgent  (  agent  ,  text  )  { /*
  agent - contractor selected in the selector 
  text - a piece of text entered by the user
  */ const  ctrl  =  this.$ctrl  ; /* 
  Run the 'fetchCustomer' command on the server, 
  which will return a list of eligible customers. 
  In this case, the function should return a Promise, 
  which will be processed by the selector.

  */ return  ctrl.$invoke  ( 'fetchCustomer'  ,  {  Text  :  text  ,  Kind  : 'Customer'  }  )  ;  } 

*** 
 Part: Modules 
  Modules  Programming on the Client 

*** 
 Part: Utilities std:utils 
  Utilities std:utils  Modules 

*** 
 Part: Global functions 
  Global functions  Programming on the Client 

*** 
 Part: require - load module 
  require - load module  Global Functions  Description The  function loads the module. 
 The require  function loads the module.  Syntax  require(path)  Parameters {String} path  - the path to the module file. Set relative to the root of the application.  Returns  Module export link.  Characteristic properties Standard modules have no path. Instead, the module name starts with the  prefix. 
 Standard modules have no path. Instead, the module name starts with the 'std:'  prefix. 

*** 
 Part: Desktop Applications 
  Desktop Applications The system provides the ability to run business 
	applications in the desktop application mode. 
 The system provides the ability to run business 
	applications in the desktop application mode. 

*** 
 Part: App.config.json configuration file 
  App.config.json configuration file 

*** 
 Part: Business processes 
  Business processes 

*** 
 Part: Activities 
  Activities  Activities  Request  - request.  SendMessage  - sending a message. 

*** 
 Part: Request Activity 
  Request Activity  All Activities Stops the process and sets the bookmark. The bookmark name (specified in the )
		object) is used to continue the process from this breakpoint. 
 Stops the process and sets the bookmark. The bookmark name (specified in the Inbox  )
		object) is used to continue the process from this breakpoint.  Properties 
[Table]
 Name  |  Type  |  Description 
 Inbox  |  InArgument<Inbox>  |  Task description. 
 TrackBefore  |  InArgument<TrackRecord>  |  Recording into the process log before suspending the process. 
 TrackAfter  |  InArgument<TrackRecord>  |  Recording into the process log after resuming the process. 
 SendBefore  |  InArgument<MessageInfo>  |  Message before suspending the process. 
 SendAfter  |  InArgument<MessageInfo>  |  Message after resuming the process. 
 Name  Type  Description  Inbox InArgument<>  Task description.  TrackBefore InArgument<>  Recording into the process log before suspending the process.  TrackAfter InArgument<>  Recording into the process log after resuming the process.  SendBefore InArgument<>  Message before suspending the process.  SendAfter InArgument<>  Message after resuming the process. 

*** 
 Part: SendMessage Activity 
  SendMessage Activity  All Activities Sends a message. 
 Sends a message. A common subsystem for  is used. 
 A common subsystem for  working with messages  is used.  Properties 
[Table]
 Name  |  Type  |  Description 
 Message  |  InArgument<MessageInfo>  |  Message description. 
 Track  |  InArgument<TrackRecord>  |  Recording into the log before sending the message. 
 Name  Type  Description  Message InArgument<>  Message description.  Track InArgument<>  Recording into the log before sending the message. 

*** 
 Part: Business process objects 
  Business process objects  Objects  Inbox  - Task description.  MessageInfo  - Message description.  ModelStateInfo  - Description of the state of the model.  TrackRecord  - Description of the log record. 

*** 
 Part: Inbox Object 
  Inbox Object  All Objects 

*** 
 Part: MessageInfo Object 
  MessageInfo Object  All Objects Represents the description of the message. 
 Represents the description of the message. A common subsystem for . 
 A common subsystem for  working with messages  . Used in:
		, 
 Used in:  Request  ,  SendMessage  Properties (C#) 
[Table]
 Name  |  Type  |  Description 
 Template  |  String  |  The name of the template file. The file name is set relative to the root of the application. 
 Key  |  String  |  The message key in the template. 
 TargetId  |  Int64  |  Data model identifier. The model itself (if needed) is specified in the message template. 
 Parameters  |  Dictionary<String, Object>  |  Message parameters. For more convenient work, there is the CreateParameters static method. 
 Name  Type  Description  Template  String  The name of the template file. The file name is set relative to the root of the application.  Key  String  The message key in the template.  TargetId  Int64  Data model identifier. The model itself (if needed) is specified in the message template.  Parameters Dictionary<String, Object>  Message parameters. For more convenient work, there is the CreateParameters  static method.  Methods (C#) static Dictionary  < string  , object  >  CreateParameters  ( object  prms  )  Description Creates a dictionary from an arbitrary object (including an anonymous one). Property names become keys and values become values. 
 Creates a dictionary from an arbitrary object (including an anonymous one). Property names become keys and values become values. 

*** 
 Part: ModelStateInfo Object 
  ModelStateInfo Object  All Objects 

*** 
 Part: TrackRecord Object 
  TrackRecord Object  All Objects 

*** 
 Part: Working with Messages 
  Working with Messages In order to separate the logic of building a message and the mechanism for sending it,
		the template mechanism is used. A template represents a set of rules used to construct
		the body of a message, its subject, addressees, copies, etc. 
 In order to separate the logic of building a message and the mechanism for sending it,
		the template mechanism is used. A template represents a set of rules used to construct
		the body of a message, its subject, addressees, copies, etc. A template can include several messages. They are accessed using a simple text key. 
 A template can include several messages. They are accessed using a simple text key. When building a message, a data model, additional parameters that are passed by the 
		sender and environment variables can be used. 
 When building a message, a data model, additional parameters that are passed by the 
		sender and environment variables can be used. When the system needs to send a message, it simply indicates on what template it needs
		to be built and passes the required parameters such as template name, message key, ID 
		for the data model, and arbitrary parameters. 
 When the system needs to send a message, it simply indicates on what template it needs
		to be built and passes the required parameters such as template name, message key, ID 
		for the data model, and arbitrary parameters. The sending subsystem selects the required message, loads the data model (if necessary), forms the
		message text directly using the  and sends it to the addressee. 
 The sending subsystem selects the required message, loads the data model (if necessary), forms the
		message text directly using the  bindings  and sends it to the addressee.  Application You can send a message in the following ways: 
 You can send a message in the following ways:  From a business process using the  Request  or  SendMessage  activities.  Directly by a server command like  sendMessage  Setting up  Setting up the configuration  .  Objects for working with messages  EmailMessage  - email message.  MessageAddress  - message address.  MessageAttachment  - attachment.  MessageReport  - report.  MessageReportModel  - data model for the report.  MessageReportParam  - data model parameter for the report.  Template  - template.  TemplatedMessage  - the base class for working with messages. 

*** 
 Part: Configuring the work with messages 
  Configuring the work with messages  Sending the Messages  Configuring the email sending  Configuring smtp  smtp  in the web.config  file Configuration can be performed using standard .NET tools
		(),
		or by the mailSettings element in the  section. 
 Configuration can be performed using standard .NET tools
		(  <mailSettings>  ),
		or by the mailSettings element in the <appSettings>  section. The json-text format for  is identical to the standard .NET settings format. 
 The json-text format for <appSettings>  is identical to the standard .NET settings format.  { from  : string  , host  : string  , port  : number  , userName  : string  , password  : string  , enableSsl  : boolean  , deliveryMethod  : 'SpecifiedPickupDirectory'  | 'Network'  , pickupDirectoryLocation?  : string  } If the delivery method  is set 
		(used for testing, without actually sending a message), then you must obligatorily specify
		the folder where test messages will be placed (). 
 Please note!  If the delivery method 'SpecifiedPickupDirectory'  is set 
		(used for testing, without actually sending a message), then you must obligatorily specify
		the folder where test messages will be placed ( pickupDirectoryLocation  ).  Example of configuring via the mailSettings key <appSettings> <add key  = "mailSettings" value  = "{from:'from@domain.com', host:'mail.domain.com', port:'111', userName:'userName', password:'userPassword', enableSsl:'true',  deliveryMethod: 'Network'}" /> </appSettings> Example of configuring via 
 Example of configuring via  system.net <system.net> <mailSettings> <smtp from  = "from@domain.com" deliveryMethod  = "Network" deliveryFormat  = "International" > <network host  = "mail.domain.com" port  = "111" userName  = "userName" password  = "userPassword" enableSsl  = "true" /> </smtp> </mailSettings> </system.net> 

*** 
 Part: Bindings 
  Bindings In order for the properties to be able to use the "outside" values, the bindings are used. 
		A binding is the name of a property, enclosed in double brackets, braces, or parentheses. 
 In order for the properties to be able to use the "outside" values, the bindings are used. 
		A binding is the name of a property, enclosed in double brackets, braces, or parentheses. 
[Table]
 Binding  |  Type  |  Description 
 [[param]]  |  Command parameters  |  The value from the command parameters. Note that this is not the parameters property, but the parameters with which the command is called from the client. 
 {{path}}  |  Model properties  |  The value from the model. The Path is the path from the data model. If the entire binding represents an expression, a conflict is possible with the XAML parser. It considers the text starting with "{" as a markup extension. In this case, start the expression with a backquote character ("`") or use <![CDATA[...]]]]>. 
 ((value))  |  Environment  |  The value of the external environment. Possible values:
((Host)) - the hostname from the config file. Used to build links in the body of an email.
((UserHost)) - the hostname of the custom application (site) from the config file. Used to build links in the body of an email.
((ProcessId)) - only for messages from business processes. The identifier of the current process.
((InboxId)) - only for messages from business processes. The identifier of the current task. 
 Binding  Type  Description  [[param]]  Command parameters  The value from the command parameters. Note that this is not the parameters  property, but the parameters with which the command is called from the client.  {{path}}  Model properties  The value from the model. The Path  is the path from the data model. If the 
					entire binding represents an expression, a conflict is possible with the XAML parser. 
					It considers the text starting with "{" as a markup extension. In this case, start the 
					expression with a backquote character ("`") or use <![CDATA[...]]]]>  .  ((value))  Environment  The value of the external environment. Possible values: ((Host))  - the hostname from the config file. Used to build links in the body of an email. ((UserHost))  - the hostname of the custom application (site) from the 
							config file. Used to build links in the body of an email. ((ProcessId))  - only for messages from business processes. The identifier of the current process. ((InboxId))  - only for messages from business processes. The identifier of the current task. 

*** 
 Part: EmailMessage Item 
  EmailMessage Item  Sending the Messages Represents an email message. 
 Represents an email message.  Inherits:  TemplatedMessage Content property: 
 Content property: Body  Properties 
[Table]
 Name  |  Type  |  Description 
 Body  |  String  |  The body of the message. If the BodyTemplate property is set, then the property value is ignored. 
 Subject  |  String  |  Message subject. 
 BodyTemplate  |  String  |  The name of the file with the message template. 
 From  |  MessageAddress  |  Sender. May be empty. If not specified, used from mail settings. 
 To  |  MessageAddress Collection  |  Recipients of the message. 
 СС  |  Collection MessageAddress  |  Copy (Carbon Copy). 
 Bcc  |  Collection MessageAddress  |  Hidden copy (Blind Carbon Copy). 
 Attachments  |  Collection MessageAttachment  |  Attachments. 
 Reports  |  Collection MessageReport  |  Reports. 
 Base item properties 
 Name  Type  Description  Body  String  The body of the message. If the BodyTemplate  property is set, then the property value is ignored.  Subject  String  Message subject.  BodyTemplate  String  The name of the file with the message template.  From  MessageAddress  Sender. May be empty. If not specified, used from  mail settings  .  To  MessageAddress  Collection  Recipients of the message.  СС  Collection  MessageAddress  Copy (Carbon Copy).  Bcc  Collection  MessageAddress  Hidden copy (Blind Carbon Copy).  Attachments  Collection  MessageAttachment  Attachments.  Reports  Collection  MessageReport  Reports.  Base item properties All text properties support . 
 Please note!  All text properties support  bindings  . 

*** 
 Part: MessageAddress item 
  MessageAddress item  Sending messages Represents the address for messages. 
 Represents the address for messages. Converter: supports converting from a line of text to both a single message and a collection of messages.
		The text string in this case is considered the address ( property). 
 Converter: supports converting from a line of text to both a single message and a collection of messages.
		The text string in this case is considered the address ( Address  property).  Properties 
[Table]
 Name  |  Type  |  Description 
 Address  |  String  |  Message address. 
 DisplayName  |  String  |  The name displayed. 
 Phone  |  String  |  Phone number. Not used for email. 
 Name  Type  Description  Address  String  Message address.  DisplayName  String  The name displayed.  Phone  String  Phone number. Not used for email. 

*** 
 Part: MessageAttachment Item 
  MessageAttachment Item  Sending the Messages Represents an attachment to an e-mail message. 
 Represents an attachment to an e-mail message.  Properties 
[Table]
 Name  |  Type  |  Description 
 Data  |  Stream  |  Always binding from the data model. The model field to which this property is bound must be of the byte array (vabinary) type. 
 Name  |  String  |  Attachment name. To enable the client to correctly recognize the file type of the attachment, add an extension (for example .pdf) to the name. 
 Mime  |  String  |  The mime-type of the attachment's content. 
 Name  Type  Description  Data  Stream  Always binding from the data model. The model field to which this 
				property is bound must be of the byte array (vabinary) type.  Name  String  Attachment name. To enable the client to correctly recognize the file 
				type of the attachment, add an extension (for example .pdf) to the name.  Mime  String  The mime-type of the attachment's content. 

*** 
 Part: MessageReport Item 
  MessageReport Item  Sending the Messages Represents a report that will be generated and attached to an e-mail message. 
 Represents a report that will be generated and attached to an e-mail message. Content property: 
 Content property: Model  Properties 
[Table]
 Name  |  Type  |  Description 
 Report  |  String  |  Always binding from the data model. The field of the main model (not the report model!), which must contain the text description of the report (the field type is nvarchar(max)). 
 Name  |  String  |  The name of the report (attachment). If not specified, will be "report". In addition, if no extension is specified, the .pdf extension is automatically added. 
 Model  |  MessageReportModel  |  Description of the data model for building a report. 
 Name  Type  Description  Report  String  Always binding from the data model. The field of the main model
					(not the report model!), which must contain the text description 
					of the report (the field type is  nvarchar(max)  ).  Name  String  The name of the report (attachment). If not specified, will be
					"report". In addition, if no extension is specified, the  .pdf  extension is automatically added.  Model  MessageReportModel  Description of the data model for building a report. 

*** 
 Part: MessageReportModel Item 
  MessageReportModel Item  Sending the Messages Represents a description of a data model for building a report to send with a message. 
 Represents a description of a data model for building a report to send with a message. Content property: 
 Content property: Parameters  Properties 
[Table]
 Name  |  Type  |  Description 
 Source  |  String  |  Data source for loading the model. 
 Schema  |  String  |  Scheme for loading the model. 
 Model  |  String  |  Model name. The procedure [{Schema}].[{Model}.Load] in the data source {Source} will be called to load the model. 
 Parameters  |  Dictionary MessageReportParam  |  Parameters for the report model. 
 Name  Type  Description  Source  String  Data source for loading the model.  Schema  String  Scheme for loading the model.  Model  String  Model name. The procedure [{Schema}].[{Model}.Load]  in the data source {Source}  will be called to load the model.  Parameters  Dictionary  MessageReportParam  Parameters for the report model. 

*** 
 Part: MessageReportParam Item 
  MessageReportParam Item  Sending the Messages Represents a parameter for the report data model. 
 Represents a parameter for the report data model. The collection of parameters is a dictionary with a text key. The name of the
		parameter is specified by the  attribute. 
 The collection of parameters is a dictionary with a text key. The name of the
		parameter is specified by the x:Key  attribute.  Properties 
[Table]
 Name  |  Type  |  Description 
 Value  |  Object  |  Typically a binding. Parameter value. Note that binding works relative to the underlying message model (not the report model!). 
 Name  Type  Description  Value  Object  Typically a binding. Parameter value. Note that binding works relative
				to the underlying message model (not the report model!). 

*** 
 Part: Template Item 
  Template Item  Sending the Messages Represents a simple dictionary of  objects with a text key. 
 Represents a simple dictionary of  TemplatedMessage  objects with a text key. , that the dictionary key is located in the  namespace,
		so you need to include the corresponding  element in the header of the xaml file. 
 Note  , that the dictionary key is located in the http://schemas.microsoft.com/winfx/2006/xaml  namespace,
		so you need to include the corresponding xmlns  element in the header of the xaml file. Content property: 
 Content property: Messages  Properties 
[Table]
 Name  |  Type  |  Description 
 Messages  |  Dictionary<String, TemplatedMessage>  |  Message dictionary. 
 Name  Type  Description  Messages Dictionary<String, >  Message dictionary.  Example: <Template xmlns  = "clr-namespace:A2v10.Messaging;assembly=A2v10.Messaging" xmlns:x  = "http://schemas.microsoft.com/winfx/2006/xaml" > <!--
  DataModel: {{}} - data model
  Parameters [[]] - all parameters passed to the message
  Environment: (()) - ProcessId, InboxId, Host, UserHost
  --> <EmailMessage x:Key  = "EMail" Subject  = "[[Subject]]" Model  = "MessageForSend" Schema  = "a2demo" BodyTemplate  = "messaging/mail.html" To  = " {{Message.To}}" > </EmailMessage> </Template> 

*** 
 Part: TemplatedMessage Item 
  TemplatedMessage Item  Sending the Messages Represents the abstract base class for messages. 
 Represents the abstract base class for messages. Derived elements:
		, 
 Derived elements:  EmailMessage  ,  Properties 
[Table]
 Name  |  Type  |  Description 
 Source  |  String  |  Data source for loading the model. 
 Schema  |  String  |  Scheme for loading the model. 
 Model  |  String  |  Model name. The [{Schema}].[{Model}.Load] procedure in the {Source} data source will be called to load the model. 
 Name  Type  Description  Source  String  Data source for loading the model.  Schema  String  Scheme for loading the model.  Model  String  Model name. The [{Schema}].[{Model}.Load]  procedure in the {Source}  data source will be
				called to load the model. 

*** 
 Part: How to make 
  How to make  Examples with explanations  Data import from Excel 

*** 
 Part: Data import from Excel 
  Data import from Excel  How to make  Introduction This section describes an example of importing data from an Excel spreadsheet
		into a system database. All sources and a working example can be found in the
		
		repository on Github. 
 This section describes an example of importing data from an Excel spreadsheet
		into a system database. All sources and a working example can be found in the  A2v10.Web.Sample  repository on Github. In order for the system to know how to process the downloaded files, their format must be
		predefined in advance. To do this, it is recommended to offer users to download sample files. 
 In order for the system to know how to process the downloaded files, their format must be
		predefined in advance. To do this, it is recommended to offer users to download sample files. We will overview importing goods. Therefore, all the main files
		are in the . 
 We will overview importing goods. Therefore, all the main files
		are in the /sample/catalog/product  .  Adding an Import Button to the Toolbar The first step is to add the  button to the product list toolbar. 
 The first step is to add the  Import  button to the product list toolbar. file fragment 
 index.view.xaml  file fragment <Toolbar> <Button Icon  = "FileImport" Content  = "@[Import]" Command  = "{BindCmd Dialog, Action=Show, Url='/catalog/product/import'}" Toolbar.Align  = "Right" /> </Toolbar> The button simply calls the import dialog. 
 The button simply calls the import dialog.  Import dialog and its template Let's not forget to indicate this dialog in the file . 
 Let's not forget to indicate this dialog in the file /catalog/product/model.json  . file fragment 
model.json  file fragment  { "dialogs"  :  { "import"  :  { "model"  : ""  , "template"  : "import.template"  , "view"  : "import.dialog"  }  }  } We don't need a data model for this dialog, so we specify an empty string in the
	 property. Other scenarios are possible, which, for example, will
	show the imported records first. In this case, the model will be needed. 
 We don't need a data model for this dialog, so we specify an empty string in the model  property. Other scenarios are possible, which, for example, will
	show the imported records first. In this case, the model will be needed. For the rest, this is the standard platform dialog. It uses the  template. 
 For the rest, this is the standard platform dialog. It uses the import.template  template. file fragment 
 import.dialog.xaml  file fragment <Dialog> <UploadFile Url  = "/catalog/product/import" Delegate  = "uploadFile" Accept  = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" /> <Hyperlink Content  = "@[File.Sample]" Margin  = "1rem,0" Block  = "True" Command  = "{BindCmd Command=Download, Url='/entity_import_sample.xlsx'}" /> </Dialog> In this dialogue, two controls are interesting. Firstly .
	This item will display a field for uploading a file (by clicking or dragging). The content of the selected file will be sent
	to the server and processed by the  command from the  section of the
	. After downloading and processing the file, the delegate specified in the
	 property will be called. 
 In this dialogue, two controls are interesting. Firstly  UploadFile  .
	This item will display a field for uploading a file (by clicking or dragging). The content of the selected file will be sent
	to the server and processed by the /catalog/product/import  command from the  files  section of the model.json  . After downloading and processing the file, the delegate specified in the Delegate  property will be called. The second control is a link that will allow the user to download a sample file for upload.
	 command allows downloading a
	file from a special  folder. 
 The second control is a link that will allow the user to download a sample file for upload.  Download  command allows downloading a
	file from a special  _files  folder.  File processing on the server After uploading the file to the server, the command from the  section of the  file will be called. 
 After uploading the file to the server, the command from the  files  section of the model.json  file will be called.  { "files"  :  { "import"  :  { "type"  : "parse"  , "parse"  : "xlsx"  , "model"  : "Product.Import"  }  }  } The  command type indicates that the file needs to be processed, and the type 
	of processing () indicates that the system expects a Microsoft Excel file. 
 The parse  command type indicates that the file needs to be processed, and the type 
	of processing ( parse  ) indicates that the system expects a Microsoft Excel file. Only  files (Excel 2007 and older) are processed. Old versions of
	tables in  format are not supported. 
 Please note!  Only  .xlsx  files (Excel 2007 and older) are processed. Old versions of
	tables in  .xls  format are not supported. After the system receives the file from the client, it will try to parse it and receive a simple
	table from it. If the command specifies a model (the  property), then an object is
	created with a single  property (the name is predefined!) which represents an array
	of rows from an Excel file.

	After that the system will attempt to , by calling the  и  procedures. 
 After the system receives the file from the client, it will try to parse it and receive a simple
	table from it. If the command specifies a model (the  model  property), then an object is
	created with a single  Rows  property (the name is predefined!) which represents an array
	of rows from an Excel file.

	After that the system will attempt to  save this object as a standard 
	model  , by calling the  .Metadata  и  .Update  procedures. As a result of processing, a model, which will be returned from the  procedure, will be returned to the client. 
 As a result of processing, a model, which will be returned from the  .Update  procedure, will be returned to the client. Stored procedures and data types can be examined by looking at the
	 file. 
 Stored procedures and data types can be examined by looking at the  import.sql  file.  Notifying the calling code After the data is imported into the database, it is necessary to have some way to notify the calling code of this. 
 After the data is imported into the database, it is necessary to have some way to notify the calling code of this. The easiest way to do this is to use custom events. In the dialog's  event handler, it is possible 
	to store a reference to the calling context in a variable. In the delegate that will be called after the download 
	completes, you can initialize an event in the calling context. 
 The easiest way to do this is to use custom events. In the dialog's  Model.load  event handler, it is possible 
	to store a reference to the calling context in a variable. In the delegate that will be called after the download 
	completes, you can initialize an event in the calling context. Fragment of the  dialog template file 
 Fragment of the import.template.ts  dialog template file let  indexPage  ; const  template  : Template  =  {  events  :  { "Model.load"  :  modelLoad  ,  }  ,  delegates  :  {  uploadFile  }  } export default  template  ; function  modelLoad  (  root  ,  caller  )  {  indexPage  =  caller  ;  } function  uploadFile  (  result  )  {  indexPage?.$emit  ( '$product.import.done'  )  ;  } When the  event is received, the index page is simply reloaded. 
 When the  $product.import.done  event is received, the index page is simply reloaded. Fragment of the  dialog template file 
 Fragment of the import.template.ts  dialog template file const  template  :  Template  =  {  events  :  { '$product.import.done'  : function  ( this  : IRoot  )  {  this.$ctrl.$reload  (  )  ;  }  }  } export default  template  ;  Tip In order to import data from a single context (in which case no events are needed),
	you can use the  control. 
 In order to import data from a single context (in which case no events are needed),
	you can use the  InlineDialog  control. We will leave the implementation of this method as an exercise. 
 We will leave the implementation of this method as an exercise. 

*** 
 Part: Testing 
  Testing 

*** 
 Part: Types Checking 
  Types Checking The system provides the ability to dynamically (at runtime) type conformance checking. The conformity of the types and properties 
		obtained from the model and described in the *.d.ts definition file is checked. In addition, when rendering xaml-views, the 
		correspondence of the bindings to the specified types is checked. 
 The system provides the ability to dynamically (at runtime) type conformance checking. The conformity of the types and properties 
		obtained from the model and described in the *.d.ts definition file is checked. In addition, when rendering xaml-views, the 
		correspondence of the bindings to the specified types is checked. Thus, when type checking is enabled, the system guarantees that the model retrieved from the database matches the description 
		and that only existing bindings are used in the view. The TypeScript compiler takes care of data and template code compliance. 
 Thus, when type checking is enabled, the system guarantees that the model retrieved from the database matches the description 
		and that only existing bindings are used in the view. The TypeScript compiler takes care of data and template code compliance. This mechanism will only work if templates are written in TypeScript. 
 This mechanism will only work if templates are written in TypeScript.  Example Suppose, for example, we use type checking when editing properties of a contractor. 
		This part of the application is located in the  folder. 
 Suppose, for example, we use type checking when editing properties of a contractor. 
		This part of the application is located in the /catalog/agent  folder. Files in the folder: 
 Files in the folder: 
[Table]
 File  |  Description 
 model.json  |  model description file 
 model.d.ts  |  type definition file 
 edit.template.ts  |  template file (TypeScript) 
 edit.dialog.xaml  |  view file 
 File  Description model.json  model description file model.d.ts  type definition file edit.template.ts  template file (TypeScript) edit.dialog.xaml  view file  file model.json  { "schema"  : "a2v10"  , "model"  : "Agent"  , "dialogs"  :  { "edit"  :  { "template"  : "edit.template"  , "view"  : "edit.dialog"  , "checkTypes"  : "model.d"  }  }  }  Model content Stored procedure . 
 Stored procedure a2v10.[Agent.Load]  . create or alter procedure  a2v10.  [  Agent.Load  ]  @UserId bigint  ,  @Id bigint  = null as begin set nocount on  ; select  [  Agent!TAgent!Object  ]  = null  ,  [  Id!!Id  ]  =  a.Id  ,  [  Name!!Name  ]  =  a.  [  Name  ]  ,  a.Code from  dbo.Agents  a where  a.Id=@Id end go The procedure returns one  type record with
		the fields , , . 
 The procedure returns one TAgent  type record with
		the fields Id  , Name  , Code  .  model.d.ts export interface TAgent extends IElement  { Id  : number  ;  Name  : string  ;  Code  : string  ;  $NameOrUnknown  : string  ; /*the property is not in the model, but it is in the template */  } /*TRoot is always present and contains all top-level properties */ export interface TRoot extends IRoot  {  Agent  : TAgent  ;  }  edit.template.ts file fragment import  { TAgent  , TRoot  } from 'model'  ; const  template  : Template  =  {  properties  :  { 'TAgent.$NameOrUnknown'  ( this  :  TAgent  )  : string  { return  this.Id  ?  this.Name  : 'Not selected'  ;  }  }  }  ; export default  template  ;  How it works  The model is loaded from the database and the metadata is built.  In the model.json  file, the presence of the checkTypes  item is checked. If it is not there, nothing is executed.  If a data description file is specified, then it is loaded and all types described in it are parsed.  The conformity of the types described in the model.d.ts  иfile and the types obtained from the data model is checked. The type
			names and their properties must match. Property names that start with the "$" character are considered computed and are not checked in the
			data model. They will be needed in the next step. If mismatches are found, an exception is thrown.  While rendering the view, all bindings are checked. Upon an attempt to bind to a property that does not exist, an exception is thrown. . Dynamic type checking will only work in a debug configuration.
		
		The  property in the  section of the Web.config file must be set to . 
 Please note!  . Dynamic type checking will only work in a debug configuration.  The configuration  property in the appSettings  section of the Web.config file must be set to debug  . 

*** 
 Part: Testing tools 
  Testing tools 

*** 
 Part: About the help system 
  About the help system Copyright © 2017-2022 Oleksandr Kukhtin
		
		English translation: Copyright © 2021-2022 Olena Kozhevnikova.
		Special thanks for Katerina Brekhova. 
 Copyright © 2017-2022 Oleksandr Kukhtin  English translation: Copyright © 2021-2022 Olena Kozhevnikova.
		Special thanks for Katerina Brekhova. The  help system is built using open source software 
 The  A2v10  help system is built using open source software  home page  license  home page 